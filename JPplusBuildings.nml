# 1 "JPplusBuildings.pnml"
/*---HEADER--*/

// Define the GRF
# 1 "src/header.pnml" 1
/* *** Begin Header *** */

/*
*	Welcome to JPplusBuildings!
*/

grf {
	grfid: 						"KR04";
	name: 						string(STR_GRF_NAME);
	desc: 						string(STR_GRF_DESC);
	version: 					5;
	min_compatible_version: 	5;
	url: 						string(STR_WEBSITE);

	// Parameter to decide which cargoes are required, if any, to allow Commercial buildings to appear
	param 0 {
  		param_commercial_cargoes {
			type: 				int;
   			name: 				string(STR_PARAM_NAME_COMMERCIAL_CARGOES);
   			desc: 				string(STR_PARAM_DESC_COMMERCIAL_CARGOES);
   			def_value: 			0;
			min_value:			0;
			max_value:			1;
			names: {
				0: string(STR_PARAM_VALUE_COMMERCIAL_CARGOES_NONE);
				1: string(STR_PARAM_VALUE_COMMERCIAL_CARGOES_MAIL_ONLY);
			};
   		}
	}
	param 1 {
		param_prohibition_shrine {
			type:				bool;
			name:				string(STR_PARAM_NAME_PROHIBITION_SHRINE);
			desc: 				string(STR_PARAM_DESC_PROHIBITION_SHRINE);
			def_value: 			0;
		}
	}
}

if (version_openttd(1,10,0,28004) > openttd_version) {
	error(FATAL, string(STR_ERROR_GAME_VERSION));
}

disable_item(FEAT_HOUSES);

/* *** End Header *** */
# 1 "JPplusBuildings.pnml" 4
# 1 "src/cargotable.pnml" 1
/* Begin cargotable */

cargotable {
	PASS, 		// Obviously
	MAIL, 		// Obviously
	GOOD, 		// For Commercial Buildings
	CASS,		// For Shops
	EOIL,		// For Restaurants
	FISH,		// For Restaurants
	FOOD, 		// For Stadiums and Restaurants
	FRUT,		// For Shops
	JAVA,		// For Restaurants
	LVST,		// For Restaurants
	BEER, 		// For Stadiums
	PETR,		// For Petrol Stations
	RFPR,		// For Hospitals	
}

/* Production loop, shared by all houses. Individual production rates stored in temporary registers in the function below.*/

switch (FEAT_HOUSES, SELF, switch_alt_production, getbits(extra_callback_info1, 0, 8)) {
	0: (PASS * 256) + (abs(extra_callback_info2 % 8) == 0) * LOAD_TEMP(1);
	1: (MAIL * 256) + (abs(extra_callback_info2 % 8) == 0) * LOAD_TEMP(2);
	return CB_RESULT_HOUSE_NO_MORE_PRODUCTION;
}

/* Production levels for passengers and mail, are passed as arguments to this function for use in the production loop. */
switch (FEAT_HOUSES, SELF, func_produce, pass, mail, [STORE_TEMP(pass, 1), STORE_TEMP(mail, 2)] ) {switch_alt_production;}

/* End cargotable */
# 1 "JPplusBuildings.pnml" 4
# 1 "src/sprite_templates.pnml" 1
// Begin Sprite Templates

// Ground Tile Template

template template_ground(x, y) {   
	//left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		31,		-31,		01,	    NOCROP | ANIM]
    sw: [ x+65,		y,		64,		31,		-31,		01,	    NOCROP | ANIM]
    nw: [ x+130,	y,		64,		31,		-31,		01,	    NOCROP | ANIM]
    ne: [ x+195,	y,		64,		31,		-31,		01,	    NOCROP | ANIM]
}

// House Templates

template template_house_80_2dir(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    nw: [ x,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    ne: [ x+65,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
}

template template_house_80(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    nw: [ x+130,	y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    ne: [ x+195,	y,		64,		80,		-31,		-48,	NOCROP | ANIM]
}

template template_house_80_wide(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		76,		80,	    -37,		-48,	NOCROP | ANIM]
    sw: [ x+77,		y,		76,		80,	    -37,		-48,	NOCROP | ANIM]  
    nw: [ x+154,	y,		76,		80,	    -37,		-48,	NOCROP | ANIM]
    ne: [ x+231,	y,		76,		80,	    -37,		-48,	NOCROP | ANIM]
}

template template_house_80_wide_ground(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x+6,		y,		64,		80,	    -31,		-48,	NOCROP | ANIM]
    sw: [ x+83,		y,		64,		80,	    -31,		-48,	NOCROP | ANIM]  
    nw: [ x+160,	y,		64,		80,	    -31,		-48,	NOCROP | ANIM]
    ne: [ x+237,	y,		64,		80,	    -31,		-48,	NOCROP | ANIM]
}

template template_house_100_1dir(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		100,	-31,		-68,	NOCROP | ANIM]
    sw: [ x,		y,		64,		100,	-31,		-68,	NOCROP | ANIM]
    nw: [ x,		y,		64,		100,	-31,		-68,	NOCROP | ANIM]
    ne: [ x,		y,		64,		100,	-31,		-68,	NOCROP | ANIM]
}

template template_house_100(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		100,	-31,		-68,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		100,	-31,		-68,	NOCROP | ANIM]
    nw: [ x+130,	y,		64,		100,	-31,		-68,	NOCROP | ANIM]
    ne: [ x+195,	y,		64,		100,	-31,		-68,	NOCROP | ANIM]
}

template template_house_100_wide(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		76,		100,	-37,		-68,	NOCROP | ANIM]
    sw: [ x+77,		y,		76,		100,	-37,		-68,	NOCROP | ANIM]
    nw: [ x+154,	y,		76,		100,	-37,		-68,	NOCROP | ANIM]
    ne: [ x+231,	y,		76,		100,	-37,		-68,	NOCROP | ANIM]
}

template template_house_128_1dir(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		128,	-31,		-96,	NOCROP | ANIM]
    sw: [ x,		y,		64,		128,	-31,		-96,	NOCROP | ANIM]
    nw: [ x,		y,		64,		128,	-31,		-96,	NOCROP | ANIM]
    ne: [ x,		y,		64,		128,	-31,		-96,	NOCROP | ANIM]
}

template template_house_128(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		128,	-31,		-96,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		128,	-31,		-96,	NOCROP | ANIM]
    nw: [ x+130,	y,		64,		128,	-31,		-96,	NOCROP | ANIM]
    ne: [ x+195,	y,		64,		128,	-31,		-96,	NOCROP | ANIM]
}

template template_house_128_wide(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		76,		128,	-37,		-96,	NOCROP | ANIM]
    sw: [ x+77,		y,		76,		128,	-37,		-96,	NOCROP | ANIM]
    nw: [ x+154,	y,		76,		128,	-37,		-96,	NOCROP | ANIM]
    ne: [ x+231,	y,		76,		128,	-37,		-96,	NOCROP | ANIM]
}

template template_house_150(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		150,	-31,		-118,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		150,	-31,		-118,	NOCROP | ANIM]  
    nw: [ x+130,	y,		64,	    150,	-31,		-118,	NOCROP | ANIM]
    ne: [ x+195,	y,		64,		150,	-31,		-118,	NOCROP | ANIM]
}

template template_house_150_wide(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		76,		150,	-37,		-118,	NOCROP | ANIM]
    sw: [ x+77,		y,		76,		150,	-37,		-118,	NOCROP | ANIM]  
    nw: [ x+154,	y,		76,	    150,	-37,		-118,	NOCROP | ANIM]
    ne: [ x+231,	y,		76,		150,	-37,		-118,	NOCROP | ANIM]
}

template template_house_200(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		200,	-31,		-168,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		200,	-31,		-168,	NOCROP | ANIM]
    nw: [ x+130,	y,		64,		200,	-31,		-168,	NOCROP | ANIM]
    ne: [ x+195,	y,		64,		200,	-31,		-168,	NOCROP | ANIM]
}

template template_house_200_wide(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		76,		200,	-37,		-168,	NOCROP | ANIM]
    sw: [ x+77,		y,		76,		200,	-37,		-168,	NOCROP | ANIM]  
    nw: [ x+154,	y,		76,		200,	-37,		-168,	NOCROP | ANIM]
    ne: [ x+231,	y,		76,		200,	-37,		-168,	NOCROP | ANIM]
}

template template_house_250(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		250,	-31,		-218,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		250,	-31,		-218,	NOCROP | ANIM]  
    nw: [ x+130,	y,		64,		250,	-31,		-218,	NOCROP | ANIM]
    ne: [ x+195,	y,		64,		250,	-31,		-218,	NOCROP | ANIM]
}

template template_house_250_wide(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		76,		250,	-37,		-218,	NOCROP | ANIM]
    sw: [ x+77,		y,		76,		250,	-37,		-218,	NOCROP | ANIM]  
    nw: [ x+154,	y,		76,		250,	-37,		-218,	NOCROP | ANIM]
    ne: [ x+231,	y,		76,		250,	-37,		-218,	NOCROP | ANIM]
}

// End Sprite Templates
# 1 "JPplusBuildings.pnml" 4

// Primary Functions (i.e. do not use any other Function)
# 1 "src/functions/PopulationChecks.pnml" 1
/* Begin Population Checks */

/* 	
	- Purpose is for use in Construction Checks of Shops & Offices (Class 2) to only allow their construction when there is a certain 'level' of Residential
	- Larger weightings are given to 'denser' Residential
	- The Residential factor must be greater than the Class of the building using this function
*/

/* CLASS 2 */

switch (FEAT_HOUSES, SELF, Class2PopCheck, 
	(
		((1 + same_class_count_town) * 60) 
	)
	
	< 

	(
		(other_class_count_town(00) * 2)	+	// Houses
		(other_class_count_town(01) * 3)	+	// Townhouses
		(other_class_count_town(03) * 5)	+	// Small Apartments
		(other_class_count_town(04) * 10)		// Apartments
	)

) {return;}

/* CLASS 5 */

switch (FEAT_HOUSES, SELF, Class5PopCheck, 
	(
		((1 + same_class_count_town) * 50)	+ 
		(other_class_count_town(02) * 60)		// Shops and Offices
	)
	
	< 

	(
		(other_class_count_town(00) * 2)	+	// Houses
		(other_class_count_town(01) * 3)	+	// Townhouses
		(other_class_count_town(03) * 5)	+	// Small Apartments
		(other_class_count_town(04) * 10)		// Apartments
	)

) {return;}


/* End Population Checks */
# 1 "JPplusBuildings.pnml" 4
# 1 "src/functions/AdjacentToCommercial.pnml" 1
/* Begin Adjacent to Commercial */

/* Check for Commercial (Shops, Offices and Skyscrapers) within 1 tile excluding diagonals */
/* Begin Adjacent to Commercial */

/* Check for Commercial (Shops, Offices and Skyscrapers) within 1 tile excluding diagonals */

switch (FEAT_HOUSES, SELF, AdjacentToCommercialNE, nearby_tile_house_class(-1, 0) == 258 || nearby_tile_house_class(-1, 0) == 261 ) {return;}
switch (FEAT_HOUSES, SELF, AdjacentToCommercialNW, nearby_tile_house_class( 0,-1) == 258 || nearby_tile_house_class( 0,-1) == 261 ) {return;}
switch (FEAT_HOUSES, SELF, AdjacentToCommercialSE, nearby_tile_house_class( 0, 1) == 258 || nearby_tile_house_class( 0, 1) == 261 ) {return;}
switch (FEAT_HOUSES, SELF, AdjacentToCommercialSW, nearby_tile_house_class( 1, 0) == 258 || nearby_tile_house_class( 1, 0) == 261 ) {return;}

switch (FEAT_HOUSES, SELF, AdjacentToCommercial, AdjacentToCommercialNE() || AdjacentToCommercialNW() || AdjacentToCommercialSE() || AdjacentToCommercialSW() ) {return;}

switch (FEAT_HOUSES, SELF, DiagonalToCommercialN, nearby_tile_house_class(-1,-1) == 258 || nearby_tile_house_class(-1,-1) == 261 ) {return;}
switch (FEAT_HOUSES, SELF, DiagonalToCommercialE, nearby_tile_house_class(-1, 1) == 258 || nearby_tile_house_class(-1, 1) == 261 ) {return;}
switch (FEAT_HOUSES, SELF, DiagonalToCommercialS, nearby_tile_house_class( 1, 1) == 258 || nearby_tile_house_class( 1, 1) == 261 ) {return;}
switch (FEAT_HOUSES, SELF, DiagonalToCommercialW, nearby_tile_house_class( 1,-1) == 258 || nearby_tile_house_class( 1,-1) == 261 ) {return;}

//switch (FEAT_HOUSES, SELF, DiagonalToCommercial, DiagonalToCommercialN() || DiagonalToCommercialE() || DiagonalToCommercialS() || DiagonalToCommercialW() ) {return;}

//switch (FEAT_HOUSES, SELF, CommercialWithinOneTile, AdjacentToCommercial() || DiagonalToCommercial() ) {return;}


/* End Adjacent to Commercial */
# 1 "JPplusBuildings.pnml" 4
# 1 "src/functions/AcrossRoads.pnml" 1
/* Begin AcrossRoads */

// Purpose of this function is to allow Class 2 and Class 5 to build across roads (and station tiles).

/* NORTHWEST */

/* One tile wide road */

switch (FEAT_HOUSES, SELF, AcrossRoadNWOneTile, 		

	// Tile one tile away is a Road or Station tile
	( nearby_tile_class( 0,-1) == TILE_CLASS_ROAD || nearby_tile_class( 0,-1) == TILE_CLASS_STATION ) 

&& 	// AND

	// Two tiles away in the same direction is either a Class 2 or Class 5 
	( nearby_tile_house_class ( 0,-2) == 258 || nearby_tile_house_class ( 0,-2) == 261 )

) {return;}

/* Two tile wide road */

switch (FEAT_HOUSES, SELF, AcrossRoadNWTwoTiles, 
	// Tiles both one and two tiles away are Road tiles
	(	
		( nearby_tile_class( 0,-1) == TILE_CLASS_ROAD  || nearby_tile_class( 0,-1) == TILE_CLASS_STATION ) && 
		( nearby_tile_class( 0,-2) == TILE_CLASS_ROAD  || nearby_tile_class( 0,-2) == TILE_CLASS_STATION ) 
	) 
			
&& // AND
			
	// Three tiles away in the same direction is either a Class 2 or Class 5 
	(nearby_tile_house_class ( 0,-3) == 258 || nearby_tile_house_class ( 0,-3) == 261)	
		
) {return;}

// Three tile wide road
switch (FEAT_HOUSES, SELF, AcrossRoadNWThreeTiles, 
	// Tiles one, two and three tiles away are all Road tiles
	(		
		( nearby_tile_class( 0,-1) == TILE_CLASS_ROAD || nearby_tile_class( 0,-1) == TILE_CLASS_STATION ) && 
		( nearby_tile_class( 0,-2) == TILE_CLASS_ROAD || nearby_tile_class( 0,-2) == TILE_CLASS_STATION ) && 
		( nearby_tile_class( 0,-3) == TILE_CLASS_ROAD || nearby_tile_class( 0,-3) == TILE_CLASS_STATION )
	)

&& // AND
	
	// Four tiles away in the same direction is either a Class 2 or Class 5 
	(nearby_tile_house_class ( 0,-4) == 258 || nearby_tile_house_class ( 0,-4) == 261 )
		
) {return;}


// Giving for NORTHWEST 
switch (FEAT_HOUSES, SELF, AcrossRoadNW, AcrossRoadNWOneTile() || AcrossRoadNWTwoTiles() || AcrossRoadNWThreeTiles() ) {return;}

/* SOUTHEAST */

/* One tile wide road */

switch (FEAT_HOUSES, SELF, AcrossRoadSEOneTile, 		

	// Tile one tile away is a Road or Station tile
	( nearby_tile_class( 0, 1) == TILE_CLASS_ROAD || nearby_tile_class( 0, 1) == TILE_CLASS_STATION ) 

&& 	// AND

	// Two tiles away in the same direction is either a Class 2 or Class 5 
	( nearby_tile_house_class ( 0, 2) == 258 || nearby_tile_house_class ( 0, 2) == 261 )

) {return;}

/* Two tile wide road */

switch (FEAT_HOUSES, SELF, AcrossRoadSETwoTiles, 
	// Tiles both one and two tiles away are Road tiles
	(	
		( nearby_tile_class( 0, 1) == TILE_CLASS_ROAD  || nearby_tile_class( 0, 1) == TILE_CLASS_STATION ) && 
		( nearby_tile_class( 0, 2) == TILE_CLASS_ROAD  || nearby_tile_class( 0, 2) == TILE_CLASS_STATION ) 
	) 
			
&& // AND
			
	// Three tiles away in the same direction is either a Class 2 or Class 5 
	(nearby_tile_house_class ( 0, 3) == 258 || nearby_tile_house_class ( 0, 3) == 261)	
		
) {return;}

// Three tile wide road
switch (FEAT_HOUSES, SELF, AcrossRoadSEThreeTiles, 
	// Tiles one, two and three tiles away are all Road tiles
	(		
		( nearby_tile_class( 0, 1) == TILE_CLASS_ROAD || nearby_tile_class( 0, 1) == TILE_CLASS_STATION ) && 
		( nearby_tile_class( 0, 2) == TILE_CLASS_ROAD || nearby_tile_class( 0, 2) == TILE_CLASS_STATION ) && 
		( nearby_tile_class( 0, 3) == TILE_CLASS_ROAD || nearby_tile_class( 0, 3) == TILE_CLASS_STATION )
	)

&& // AND
	
	// Four tiles away in the same direction is either a Class 2 or Class 5 
	(nearby_tile_house_class ( 0, 4) == 258 || nearby_tile_house_class ( 0, 4) == 261 )
		
) {return;}


// Giving for SOUTHEAST
switch (FEAT_HOUSES, SELF, AcrossRoadSE, AcrossRoadSEOneTile() || AcrossRoadSETwoTiles() || AcrossRoadSEThreeTiles() ) {return;}


/* NORTHEAST */

/* One tile wide road */

switch (FEAT_HOUSES, SELF, AcrossRoadNEOneTile, 		

	// Tile one tile away is a Road or Station tile
	( nearby_tile_class(-1, 0) == TILE_CLASS_ROAD || nearby_tile_class(-1, 0) == TILE_CLASS_STATION ) 

&& 	// AND

	// Two tiles away in the same direction is either a Class 2 or Class 5 
	( nearby_tile_house_class (-2, 0) == 258 || nearby_tile_house_class (-2, 0) == 261 )

) {return;}

/* Two tile wide road */

switch (FEAT_HOUSES, SELF, AcrossRoadNETwoTiles, 
	// Tiles both one and two tiles away are Road tiles
	(	
		( nearby_tile_class(-1, 0) == TILE_CLASS_ROAD  || nearby_tile_class(-1, 0) == TILE_CLASS_STATION ) && 
		( nearby_tile_class(-2, 0) == TILE_CLASS_ROAD  || nearby_tile_class(-2, 0) == TILE_CLASS_STATION ) 
	) 
			
&& // AND
			
	// Three tiles away in the same direction is either a Class 2 or Class 5 
	(nearby_tile_house_class (-3, 0) == 258 || nearby_tile_house_class (-3, 0) == 261)	
		
) {return;}

// Three tile wide road
switch (FEAT_HOUSES, SELF, AcrossRoadNEThreeTiles, 
	// Tiles one, two and three tiles away are all Road tiles
	(		
		( nearby_tile_class(-1, 0) == TILE_CLASS_ROAD || nearby_tile_class(-1, 0) == TILE_CLASS_STATION ) && 
		( nearby_tile_class(-2, 0) == TILE_CLASS_ROAD || nearby_tile_class(-2, 0) == TILE_CLASS_STATION ) && 
		( nearby_tile_class(-3, 0) == TILE_CLASS_ROAD || nearby_tile_class(-3, 0) == TILE_CLASS_STATION )
	)

&& // AND
	
	// Four tiles away in the same direction is either a Class 2 or Class 5 
	(nearby_tile_house_class (-4, 0) == 258 || nearby_tile_house_class (-4, 0) == 261 )
		
) {return;}


// Giving for NORTHEAST
switch (FEAT_HOUSES, SELF, AcrossRoadNE, AcrossRoadNEOneTile() || AcrossRoadNETwoTiles() || AcrossRoadNEThreeTiles() ) {return;}


// SOUTHWEST

/* One tile wide road */

switch (FEAT_HOUSES, SELF, AcrossRoadSWOneTile, 		

	// Tile one tile away is a Road or Station tile
	( nearby_tile_class( 1, 0) == TILE_CLASS_ROAD || nearby_tile_class( 1, 0) == TILE_CLASS_STATION ) 

&& 	// AND

	// Two tiles away in the same direction is either a Class 2 or Class 5 
	( nearby_tile_house_class ( 2, 0) == 258 || nearby_tile_house_class ( 2, 0) == 261 )

) {return;}

/* Two tile wide road */

switch (FEAT_HOUSES, SELF, AcrossRoadSWTwoTiles, 
	// Tiles both one and two tiles away are Road tiles
	(	
		( nearby_tile_class( 1, 0) == TILE_CLASS_ROAD  || nearby_tile_class( 1, 0) == TILE_CLASS_STATION ) && 
		( nearby_tile_class( 2, 0) == TILE_CLASS_ROAD  || nearby_tile_class( 2, 0) == TILE_CLASS_STATION ) 
	) 
			
&& // AND
			
	// Three tiles away in the same direction is either a Class 2 or Class 5 
	(nearby_tile_house_class ( 3, 0) == 258 || nearby_tile_house_class ( 3, 0) == 261)	
		
) {return;}

// Three tile wide road
switch (FEAT_HOUSES, SELF, AcrossRoadSWThreeTiles, 
	// Tiles one, two and three tiles away are all Road tiles
	(		
		( nearby_tile_class( 1, 0) == TILE_CLASS_ROAD || nearby_tile_class( 1, 0) == TILE_CLASS_STATION ) && 
		( nearby_tile_class( 2, 0) == TILE_CLASS_ROAD || nearby_tile_class( 2, 0) == TILE_CLASS_STATION ) && 
		( nearby_tile_class( 3, 0) == TILE_CLASS_ROAD || nearby_tile_class( 3, 0) == TILE_CLASS_STATION )
	)

&& // AND
	
	// Four tiles away in the same direction is either a Class 2 or Class 5 
	(nearby_tile_house_class ( 4, 0) == 258 || nearby_tile_house_class ( 4, 0) == 261 )
		
) {return;}


// Giving for SOUTHWEST
switch (FEAT_HOUSES, SELF, AcrossRoadSW, AcrossRoadSWOneTile() || AcrossRoadSWTwoTiles() || AcrossRoadSWThreeTiles() ) {return;}


// Combining All four
switch (FEAT_HOUSES, SELF, AcrossRoads, AcrossRoadSE() || AcrossRoadSW() || AcrossRoadNE() || AcrossRoadNW() ) {return;}
 
/* End AcrossRoads */
# 1 "JPplusBuildings.pnml" 4
# 1 "src/functions/AcrossTracks.pnml" 1
/* Begin Across Tracks */

switch (FEAT_HOUSES, SELF, AcrossTracks, 
		// Direction 1
	(	
		(
			(	
			nearby_tile_class( 0,-1) == TILE_CLASS_RAIL && 
			nearby_tile_class( 0,-2) == TILE_CLASS_RAIL 
			) 
			&& 
			(	
			nearby_tile_house_class ( 0,-3) == 258 || 
			nearby_tile_house_class ( 0,-3) == 261
			)
		)
		||
		(
			(
			nearby_tile_class( 0,-1) == TILE_CLASS_RAIL && 
			nearby_tile_class( 0,-2) == TILE_CLASS_RAIL &&
			nearby_tile_class( 0,-3) == TILE_CLASS_RAIL
			)
			&&
			(
			nearby_tile_house_class ( 0,-4) == 258 || 
			nearby_tile_house_class ( 0,-4) == 261 
			)
		)
		||
		(
			(
			nearby_tile_class( 0,-1) == TILE_CLASS_RAIL && 
			nearby_tile_class( 0,-2) == TILE_CLASS_RAIL &&
			nearby_tile_class( 0,-3) == TILE_CLASS_RAIL &&
			nearby_tile_class( 0,-4) == TILE_CLASS_RAIL
			)
			&&
			(
			nearby_tile_house_class ( 0,-5) == 258 || 
			nearby_tile_house_class ( 0,-5) == 261 
			)
		)
	) 
	
	||	// Direction 2 

	(	
		(
			(	
			nearby_tile_class( 0, 1) == TILE_CLASS_RAIL && 
			nearby_tile_class( 0, 2) == TILE_CLASS_RAIL 
			) 
			&& 
			(	
			nearby_tile_house_class ( 0, 3) == 258 || 
			nearby_tile_house_class ( 0, 3) == 261
			)
		)
		||
		(
			(
			nearby_tile_class( 0, 1) == TILE_CLASS_RAIL && 
			nearby_tile_class( 0, 2) == TILE_CLASS_RAIL &&
			nearby_tile_class( 0, 3) == TILE_CLASS_RAIL
			)
			&&
			(
			nearby_tile_house_class ( 0, 4) == 258 || 
			nearby_tile_house_class ( 0, 4) == 261 
			)
		)
		||
		(
			(
			nearby_tile_class( 0, 1) == TILE_CLASS_RAIL && 
			nearby_tile_class( 0, 2) == TILE_CLASS_RAIL &&
			nearby_tile_class( 0, 3) == TILE_CLASS_RAIL &&
			nearby_tile_class( 0, 4) == TILE_CLASS_RAIL
			)
			&&
			(
			nearby_tile_house_class ( 0, 5) == 258 || 
			nearby_tile_house_class ( 0, 5) == 261 
			)
		)
	) 
	
	|| 	// Direction 3

	(	
		(
			(	
			nearby_tile_class(-1, 0) == TILE_CLASS_RAIL && 
			nearby_tile_class(-2, 0) == TILE_CLASS_RAIL 
			) 
			&& 
			(	
			nearby_tile_house_class (-3, 0) == 258 || 
			nearby_tile_house_class (-3, 0) == 261
			)
		)
		||
		(
			(
			nearby_tile_class(-1, 0) == TILE_CLASS_RAIL && 
			nearby_tile_class(-2, 0) == TILE_CLASS_RAIL &&
			nearby_tile_class(-3, 0) == TILE_CLASS_RAIL
			)
			&&
			(
			nearby_tile_house_class (-4, 0) == 258 || 
			nearby_tile_house_class (-4, 0) == 261 
			)
		)
		||
		(
			(
			nearby_tile_class(-1, 0) == TILE_CLASS_RAIL && 
			nearby_tile_class(-2, 0) == TILE_CLASS_RAIL &&
			nearby_tile_class(-3, 0) == TILE_CLASS_RAIL &&
			nearby_tile_class(-4, 0) == TILE_CLASS_RAIL
			)
			&&
			(
			nearby_tile_house_class (-5, 0) == 258 || 
			nearby_tile_house_class (-5, 0) == 261 
			)
		)
	) 
		
	||	// Direction 4

	(	
		(
			(	
			nearby_tile_class( 1, 0) == TILE_CLASS_RAIL && 
			nearby_tile_class( 2, 0) == TILE_CLASS_RAIL 
			) 
			&& 
			(	
			nearby_tile_house_class ( 3, 0) == 258 || 
			nearby_tile_house_class ( 3, 0) == 261
			)
		)
		||
		(
			(
			nearby_tile_class( 1, 0) == TILE_CLASS_RAIL && 
			nearby_tile_class( 2, 0) == TILE_CLASS_RAIL &&
			nearby_tile_class( 3, 0) == TILE_CLASS_RAIL
			)
			&&
			(
			nearby_tile_house_class ( 4, 0) == 258 || 
			nearby_tile_house_class ( 4, 0) == 261 
			)
		)
		||
		(
			(
			nearby_tile_class( 1, 0) == TILE_CLASS_RAIL && 
			nearby_tile_class( 2, 0) == TILE_CLASS_RAIL &&
			nearby_tile_class( 3, 0) == TILE_CLASS_RAIL &&
			nearby_tile_class( 4, 0) == TILE_CLASS_RAIL
			)
			&&
			(
			nearby_tile_house_class ( 5, 0) == 258 || 
			nearby_tile_house_class ( 5, 0) == 261 
			)
		)
	) 
) {return;}

/* End Across Tracks */
# 1 "JPplusBuildings.pnml" 4
# 1 "src/functions/CargoServiceChecks.pnml" 1
/* Begin Cargo Service Checks */

/* Functions checking for service of cargoes */

// Passenger Service
switch(FEAT_HOUSES, SELF, FuncServicePASS, 	(cargo_accepted_nearby_last_month(PASS) == 1 || cargo_accepted_nearby_this_month(PASS) == 1)) {return;}
// Mail Service
switch(FEAT_HOUSES, SELF, FuncServiceMAIL, 	(cargo_accepted_nearby_last_month(MAIL) == 1 || cargo_accepted_nearby_this_month(MAIL) == 1)) {return;}
// Petroleum Fuels Service - for Petrol Stations
switch(FEAT_HOUSES, SELF, FuncServicePETR, (cargo_accepted_nearby_last_month(PETR) == 1 || cargo_accepted_nearby_this_month(PETR) == 1)) {return;}
// Alcohol Service - for Stadiums
switch(FEAT_HOUSES, SELF, FuncServiceBEER, (cargo_accepted_nearby_last_month(BEER) == 1 || cargo_accepted_nearby_this_month(BEER) == 1)) {return;}
// Food Service - for Stadiums
switch(FEAT_HOUSES, SELF, FuncServiceFOOD, (cargo_accepted_nearby_last_month(FOOD) == 1 || cargo_accepted_nearby_this_month(FOOD) == 1)) {return;}
// Edible Oils Service - for Restaurants
switch(FEAT_HOUSES, SELF, FuncServiceEOIL, (cargo_accepted_nearby_last_month(EOIL) == 1 || cargo_accepted_nearby_this_month(EOIL) == 1)) {return;}
// Fish Service - for Restaurants
switch(FEAT_HOUSES, SELF, FuncServiceFISH, (cargo_accepted_nearby_last_month(FISH) == 1 || cargo_accepted_nearby_this_month(FISH) == 1)) {return;}
// Chemicals Service - for Hospitals
switch(FEAT_HOUSES, SELF, FuncServiceRFPR, (cargo_accepted_nearby_last_month(RFPR) == 1 || cargo_accepted_nearby_this_month(RFPR) == 1)) {return;}
// Fruit - for Shops
switch(FEAT_HOUSES, SELF, FuncServiceFRUT, (cargo_accepted_nearby_last_month(FRUT) == 1 || cargo_accepted_nearby_this_month(FRUT) == 1)) {return;}
// Cassava - for shops
switch(FEAT_HOUSES, SELF, FuncServiceCASS, (cargo_accepted_nearby_last_month(CASS) == 1 || cargo_accepted_nearby_this_month(CASS) == 1)) {return;}
// Goods - for various
switch(FEAT_HOUSES, SELF, FuncServiceGOOD, (cargo_accepted_nearby_last_month(GOOD) == 1 || cargo_accepted_nearby_this_month(GOOD) == 1)) {return;}

/* End Cargo Service Checks */
# 1 "JPplusBuildings.pnml" 4
# 1 "src/functions/one_liner_functions.pnml" 1
/* Begin one_liners */

/* Function to check if City */
switch (FEAT_HOUSES, PARENT, IsCity, is_city == 1) {return;}

/* Population must be over a certain level */
switch (FEAT_HOUSES, PARENT, PopOver10k, population >= 10000) {return;}
switch (FEAT_HOUSES, PARENT, PopOver30k, population >= 30000) {return;}
switch (FEAT_HOUSES, PARENT, PopOver50k, population >= 50000) {return;}
switch (FEAT_HOUSES, PARENT, PopOver70k, population >= 70000) {return;}

/* House is Unique */
switch (FEAT_HOUSES, SELF, IsUniqueHouse, same_house_count_town == 0) {return;}

/* Can only appear when town is being generated */
switch (FEAT_HOUSES, SELF, OnGenerationOnly, generating_town == 1) {return;}

/* Probabilities */
switch (FEAT_HOUSES, SELF, RandomBitsFour, random_bits % 4 == 0) {return;}

/* Range Checks */
switch (FEAT_HOUSES, SELF, TwentyTileGap, nearest_house_matching_criterion(20, SEARCH_HOUSE_BY_TYPE) == 0 ) {return;}
switch (FEAT_HOUSES, SELF, ThirtyTileGap, nearest_house_matching_criterion(30, SEARCH_HOUSE_BY_TYPE) == 0 ) {return;}

/* Check for road (and stations) in adjacent tiles functions */
switch (FEAT_HOUSES, SELF, HasRoadAdjacentNE, nearby_tile_class(-1, 0) == TILE_CLASS_ROAD || nearby_tile_class(-1, 0) == TILE_CLASS_STATION) {return;}
switch (FEAT_HOUSES, SELF, HasRoadAdjacentNW, nearby_tile_class( 0,-1) == TILE_CLASS_ROAD || nearby_tile_class( 0,-1) == TILE_CLASS_STATION) {return;}
switch (FEAT_HOUSES, SELF, HasRoadAdjacentSE, nearby_tile_class( 0, 1) == TILE_CLASS_ROAD || nearby_tile_class( 0, 1) == TILE_CLASS_STATION) {return;}
switch (FEAT_HOUSES, SELF, HasRoadAdjacentSW, nearby_tile_class( 1, 0) == TILE_CLASS_ROAD || nearby_tile_class( 1, 0) == TILE_CLASS_STATION) {return;}

//switch (FEAT_HOUSES, SELF, HasRoadAdjacentE, nearby_tile_class(-1, 1) == TILE_CLASS_ROAD || nearby_tile_class(-1, 1) == TILE_CLASS_STATION) {return;}
//switch (FEAT_HOUSES, SELF, HasRoadAdjacentS, nearby_tile_class( 1, 1) == TILE_CLASS_ROAD || nearby_tile_class( 1, 1) == TILE_CLASS_STATION) {return;}
//switch (FEAT_HOUSES, SELF, HasRoadAdjacentW, nearby_tile_class( 1,-1) == TILE_CLASS_ROAD || nearby_tile_class( 1,-1) == TILE_CLASS_STATION) {return;}

switch (FEAT_HOUSES, SELF, HasRoadAdjacentSE2x2, nearby_tile_class(0,2) == TILE_CLASS_ROAD || nearby_tile_class(0,2) == TILE_CLASS_STATION) {return;}
/*
switch (FEAT_HOUSES, SELF, HasRoadAdjacentNWSW, nearby_tile_class( 0,-1) == TILE_CLASS_ROAD || nearby_tile_class( 0,-1) == TILE_CLASS_STATION || 
	nearby_tile_class( 1, 0) == TILE_CLASS_ROAD || nearby_tile_class( 1, 0) == TILE_CLASS_STATION) {return;}
*/
switch (FEAT_HOUSES, SELF, HasRoadAdjacentSESW, nearby_tile_class( 0, 1) == TILE_CLASS_ROAD || nearby_tile_class( 0, 1) == TILE_CLASS_STATION || 
	nearby_tile_class( 1, 0) == TILE_CLASS_ROAD || nearby_tile_class( 1, 0) == TILE_CLASS_STATION) {return;}

/* End one_liners */
# 1 "JPplusBuildings.pnml" 4

// Secondary Functions (i.e. those that use Primary Functions, therefore must appear later)
# 1 "src/functions/SpriteDirections.pnml" 1
/* Begin Sprite Directions*/

/*

When using Sprite Directions, list out the outcomes desired with the following results the switch in the nml file for the House

0 
1  SE Only
2  SW Only
3  SE && SW
4  NW Only
5  NW && SE
6  NW && SW
7  NW, SE, SW
8  NE Only
9  NE && SE
10 NE && SW
11 NE, SE, SW
12 NE && NW
13 NE, NW, SE
14 NE, NW, SW
15 All

*/

// Road to the SE
switch (FEAT_HOUSES, SELF, switch_SE_facing, HasRoadAdjacentSE() )
	{1: return 1; return 0;}

// Road to the SW
switch (FEAT_HOUSES, SELF, switch_SW_facing, HasRoadAdjacentSW() )
	{1: return 2; return 0;}

// Road to the NW
switch (FEAT_HOUSES, SELF, switch_NW_facing, HasRoadAdjacentNW() )
	{1: return 4; return 0;}

// Road to the NE
switch (FEAT_HOUSES, SELF, switch_NE_facing, HasRoadAdjacentNE() )
	{1: return 8; return 0;}

switch (FEAT_HOUSES, SELF, SpriteDirections, 
	switch_SE_facing() + 	// 0 or 1
	switch_SW_facing() +	// 0 or 2
	switch_NW_facing() +	// 0 or 4
	switch_NE_facing()		// 0 or 8
){return;}


/* End Sprite Directions */
# 1 "JPplusBuildings.pnml" 4
# 1 "src/functions/HouseGap.pnml" 1
/* Begin HouseOfficeGap */

switch(FEAT_HOUSES, SELF, HouseOfficeGap,
	
	// MAIN CRITERIA - Houses and Townhouses cannot build within two tiles of Commercial Buildings (Classes 2 & 5)
	( !AdjacentToCommercial() && !FuncServicePASS() )

	|| // OR

	// EXCEPTION - Adjacent to Commercial AND there is NO passenger service - to prevent gaps on catchment area border
	( AdjacentToCommercial() && !FuncServicePASS() )

){return;}

/* End HouseOfficeGap */
# 1 "JPplusBuildings.pnml" 4
//#include "src/functions/SmallApartmentsCheck.pnml"
# 1 "src/functions/ClusterBuildingClass.pnml" 1
/* Begin Cluster Building Class */

/* Buildings after the first of the class must cluster near the same class */

switch (FEAT_HOUSES, SELF, ClusterBuildingClass, 
	// If first of class and Town Zone Centre ("4"), then allow 
	( same_class_count_town == 0 && town_zone == TOWNZONE_CENTRE ) || 								
	
	// Thereafter, must be adjacent to a Commercial building (Class 2 or Class 5)
	AdjacentToCommercial() ||								

	/* SPECIFIC EXCEPTIONS */

	// Allow to build across roads of varying width (1, 2 and 3 tiles) from a Class 2 or Class 5 Building
	AcrossRoads()  ||									
	
	// Allow building across tracks from a Class 2 or Class 5 
	AcrossTracks()
	
	) {return;}

/* End Cluster Building Class */
# 1 "JPplusBuildings.pnml" 4
# 1 "src/functions/IfFirstSkyscraper.pnml" 1
/* Begin If First Skyscraper */

// Allow first skyscraper to build near Class 2
switch (FEAT_HOUSES, SELF, IfFirstSkyscraper, 
	((same_class_count_town == 0 && AdjacentToCommercial() ) || 
	nearest_house_matching_criterion(2, SEARCH_HOUSE_BY_CLASS) >= 1 )
) {return;}

/* End If First Skyscraper */
# 1 "JPplusBuildings.pnml" 4
# 1 "src/functions/CommercialCargoes.pnml" 1
/* Begin Commercial Cargoes */

switch(FEAT_HOUSES, SELF, CommercialCargoes,
	param_commercial_cargoes == 0 ||                            // No Cargo requirements - return 1 if no cargoes selected 
	(param_commercial_cargoes == 1 && FuncServiceMAIL() )       // Mail - return 1 if Mail delivered
) {return;}

/* End Commercial Cargoes*/
# 1 "JPplusBuildings.pnml" 4
# 1 "src/functions/DestructionChecks.pnml" 1
/* Begin Destruction Checks */

switch(FEAT_HOUSES, SELF, DestructionCheckHouses,
	
    // There is availability to build another Class 2 Building
	Class2PopCheck() &&

    // There is Passenger Service
    FuncServicePASS() &&

    // Two Buildings adjacent are Commercial
    ( 
        ( 
        // Obviously adjacent
        ( ( AdjacentToCommercialNE()  + AdjacentToCommercialNW() + AdjacentToCommercialSE() + AdjacentToCommercialSW() ) * 10 ) +

        // Diagonals are considered adjacent
        ( DiagonalToCommercialN() + DiagonalToCommercialE() + DiagonalToCommercialS() + DiagonalToCommercialW() ) +   

        // Across roads is considered adjacent
        ( ( AcrossRoadSE() + AcrossRoadSW() + AcrossRoadNE() + AcrossRoadNW() ) * 10 )
        
        ) >= 11 
    )
	
){return;}

/* End Destruction Checks */
# 1 "JPplusBuildings.pnml" 4
# 1 "src/functions/ProtectClassTwo.pnml" 1
/* Begin Protect Class Two */

/* When Population factor unsufficient, then protect current Class 2 */

// Purpose of this is to prevent the Class 2 cluster from splitting

switch (FEAT_HOUSES, SELF, ProtectClassTwoUntil1959, 
	// Check if there is NOT sufficient population to build another Class 2
	!Class2PopCheck() &&

    // Passenger service remains in place
    FuncServicePASS() &&

    current_year < 1960
	
	) {return;}

switch (FEAT_HOUSES, SELF, ProtectClassTwo, 
	// Check if there is NOT sufficient population to build another Class 2
	!Class2PopCheck() &&

    // Passenger service remains in place
    FuncServicePASS() 
	
	) {return;}

/* End Protect Class Two */
# 1 "JPplusBuildings.pnml" 4

// GROUND
# 1 "src/houses/ground/ground.pnml" 1
// Begin ground

// Grass
spriteset (spr_ground_grass, 							"src/gfx/ground/grass.png") 					{template_ground(1,1)}
// Snow
spriteset (spr_ground_snow, 						    "src/gfx/ground/snow.png") 						{template_ground(1,1)}
// Concrete
spriteset (spr_ground_concrete, 						"src/gfx/ground/concrete.png") 					{template_ground(1,1)}
// Temple
spriteset (spr_ground_temple, 							"src/gfx/ground/temple.png") 					{template_ground(1,1)}
// Shiro
spriteset (spr_ground_shiro, 							"src/gfx/ground/shiro.png") 					{template_ground(1,1)}

// End ground
# 1 "JPplusBuildings.pnml" 4

// HOUSES
# 1 "src/houses/houses/naganuma_house.pnml" 1
// Begin naganuma_house

// A
spriteset (spr_naganuma_house_a, 					"src/gfx/houses/naganuma/building_a.png") 						{template_house_80(1,1)}
spriteset (spr_naganuma_house_a_snow, 				"src/gfx/houses/naganuma/building_a.png") 						{template_house_80(1,82)}

// B
spriteset (spr_naganuma_house_b, 					"src/gfx/houses/naganuma/building_b.png") 						{template_house_80(1,1)}
spriteset (spr_naganuma_house_b_snow, 				"src/gfx/houses/naganuma/building_b.png") 						{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_naganuma_house_a_norm {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_naganuma_house_a (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_naganuma_house_a_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_naganuma_house_a_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_naganuma_house_b_norm {
	ground {
		sprite: spr_ground_grass(construction_state);
	}
	building {
		sprite: spr_naganuma_house_b (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_naganuma_house_b_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_naganuma_house_b_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_naganuma_house_a_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_naganuma_house_a_snow;
	sprlay_naganuma_house_a_norm;
}

switch(FEAT_HOUSES, SELF, switch_naganuma_house_b_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_naganuma_house_b_snow;
	sprlay_naganuma_house_b_norm;
}

// Selection of Sprites based in relation to where roads are

random_switch (FEAT_HOUSES, SELF, switch_naganuma_house_sprites) {
	1: switch_naganuma_house_a_sprites;		// SE
	1: switch_naganuma_house_b_sprites;		// SW
}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_naganuma_house_con_check, 
	HouseOfficeGap() 				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
	) {return;}	

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_naganuma_house_old)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

random_switch (FEAT_HOUSES, SELF, rand_recolor_naganuma_house_new)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

item(FEAT_HOUSES, item_naganuma_house_old, 19, HOUSE_SIZE_1X1){
	property {
		substitute: 				26;
		name: 						string(NAME_NAGANUMA_HOUSE);
		population: 				20;	
		accepted_cargos: 			[[PASS, 2],[MAIL, 1],[FOOD, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1870,1959];
		minimum_lifetime: 			2;
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										//TOWNZONE_INNER_SUBURB,	// 3
										TOWNZONE_OUTER_SUBURB,		// 2
										TOWNZONE_OUTSKIRT,			// 1
										TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class: 			0;
		
		}
	graphics {
		default: 					switch_naganuma_house_sprites;
		construction_check: 		switch_naganuma_house_con_check;
		cargo_production: 			func_produce(2,1);
		colour: 					rand_recolor_naganuma_house_old;
	}
}

item(FEAT_HOUSES, item_naganuma_house_new, 20, HOUSE_SIZE_1X1){
	property {
		substitute: 				26;
		name: 						string(NAME_NAGANUMA_HOUSE);
		population: 				20;	
		accepted_cargos: 			[[PASS, 2],[MAIL, 1],[FOOD, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1960,0xFFFF];
		minimum_lifetime: 			2;
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										TOWNZONE_INNER_SUBURB,		// 3
										TOWNZONE_OUTER_SUBURB,		// 2
										TOWNZONE_OUTSKIRT,			// 1
										TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class: 			0;
		
		}
	graphics {
		default: 					switch_naganuma_house_sprites;
		construction_check: 		switch_naganuma_house_con_check;
		cargo_production: 			func_produce(2,1);
		colour: 					rand_recolor_naganuma_house_new;
	}
}

// End naganuma_house
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/houses/nishikawa_house.pnml" 1
// Begin nishikawa_house

// A
spriteset (spr_nishikawa_house_a, 					"src/gfx/houses/nishikawa/building_a.png") 						{template_house_80(1,1)}
spriteset (spr_nishikawa_house_a_snow, 				"src/gfx/houses/nishikawa/building_a.png") 						{template_house_80(1,82)}

// B
spriteset (spr_nishikawa_house_b, 					"src/gfx/houses/nishikawa/building_b.png") 						{template_house_80(1,1)}
spriteset (spr_nishikawa_house_b_snow, 				"src/gfx/houses/nishikawa/building_b.png") 						{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_nishikawa_house_a_norm {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_nishikawa_house_a (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_nishikawa_house_a_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_nishikawa_house_a_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_nishikawa_house_b_norm {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_nishikawa_house_b (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_nishikawa_house_b_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_nishikawa_house_b_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_nishikawa_house_a_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_nishikawa_house_a_snow;
	sprlay_nishikawa_house_a_norm;
}

switch(FEAT_HOUSES, SELF, switch_nishikawa_house_b_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_nishikawa_house_b_snow;
	sprlay_nishikawa_house_b_norm;
}

// Selection of Sprites based in relation to where roads are

random_switch (FEAT_HOUSES, SELF, switch_nishikawa_house_sprites) {
	1: switch_nishikawa_house_a_sprites;		// SE
	1: switch_nishikawa_house_b_sprites;		// SW
}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_nishikawa_house_con_check, 
	HouseOfficeGap() 				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
	) {return;}	

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_nishikawa_house_old)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

random_switch (FEAT_HOUSES, SELF, rand_recolor_nishikawa_house_new)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

item(FEAT_HOUSES, item_nishikawa_house_old, 21, HOUSE_SIZE_1X1){
	property {
		substitute: 				26;
		name: 						string(NAME_NISHIKAWA_HOUSE);
		population: 				20;	
		accepted_cargos: 			[[PASS, 2],[MAIL, 1],[FOOD, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1870,1959];
		minimum_lifetime: 			2;
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										TOWNZONE_INNER_SUBURB,		// 3
										TOWNZONE_OUTER_SUBURB,		// 2
										TOWNZONE_OUTSKIRT,			// 1
										TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class: 			0;
		
		}
	graphics {
		default: 					switch_nishikawa_house_sprites;
		construction_check: 		switch_nishikawa_house_con_check;
		cargo_production: 			func_produce(2,1);
		colour: 					rand_recolor_nishikawa_house_old;
	}
}

item(FEAT_HOUSES, item_nishikawa_house_new, 22, HOUSE_SIZE_1X1){
	property {
		substitute: 				26;
		name: 						string(NAME_NISHIKAWA_HOUSE);
		population: 				20;	
		accepted_cargos: 			[[PASS, 2],[MAIL, 1],[FOOD, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1960,0xFFFF];
		minimum_lifetime: 			2;
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										//TOWNZONE_INNER_SUBURB,	// 3
										TOWNZONE_OUTER_SUBURB,		// 2
										TOWNZONE_OUTSKIRT,			// 1
										TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class: 			0;
		
		}
	graphics {
		default: 					switch_nishikawa_house_sprites;
		construction_check: 		switch_nishikawa_house_con_check;
		cargo_production: 			func_produce(2,1);
		colour: 					rand_recolor_nishikawa_house_new;
	}
}

// End nishikawa_house
# 1 "JPplusBuildings.pnml" 4

// TOWNHOUSES
# 1 "src/houses/houses/townhouses_01.pnml" 1
// Begin townhouses

// Building Sprites
spriteset (spr_townhouses_01_a, 					"src/gfx/houses/townhouses_01/building_a.png") 			{template_house_80(1,1)}
spriteset (spr_townhouses_01_a_snow, 				"src/gfx/houses/townhouses_01/building_a.png") 			{template_house_80(1,82)}

spriteset (spr_townhouses_01_b, 					"src/gfx/houses/townhouses_01/building_b.png") 			{template_house_80(1,1)}
spriteset (spr_townhouses_01_b_snow, 				"src/gfx/houses/townhouses_01/building_b.png") 			{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_townhouses_01_a_norm {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_townhouses_01_a (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_townhouses_01_a_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_townhouses_01_a_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_townhouses_01_b_norm {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_townhouses_01_b (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_townhouses_01_b_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_townhouses_01_b_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_townhouses_01_a_sprites, terrain_type) {
	TILETYPE_SNOW: sprlay_townhouses_01_a_snow;
	sprlay_townhouses_01_a_norm;
}

switch(FEAT_HOUSES, SELF, switch_townhouses_01_b_sprites, terrain_type) {
	TILETYPE_SNOW: sprlay_townhouses_01_b_snow;
	sprlay_townhouses_01_b_norm;
}

// Random selection of sprites
random_switch (FEAT_HOUSES, SELF, switch_townhouses_01_sprites) {
	1: switch_townhouses_01_a_sprites;		
	1: switch_townhouses_01_b_sprites;		
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_townhouses_01_a)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Checks

switch (FEAT_HOUSES, SELF, switch_townhouses_01_old_con_check, 
	HouseOfficeGap()
) {return;}	

switch (FEAT_HOUSES, SELF, switch_townhouses_01_new_con_check, 
	HouseOfficeGap() && 			// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
	!FuncServicePASS() 				// Builds where there is no Passenger service
) {return;}	

item(FEAT_HOUSES, item_townhouses_old, 05, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_TOWNHOUSES_01);
		population: 				30;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1870,1949];
		minimum_lifetime: 			2;
		availability_mask: 			[bitmask(								// Agreed to JPS
										TOWNZONE_CENTRE,			// 4
										TOWNZONE_INNER_SUBURB,		// 3
										TOWNZONE_OUTER_SUBURB,		// 2
										TOWNZONE_OUTSKIRT,			// 1
										TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				1;
		
		}
	graphics {
		default: 					switch_townhouses_01_sprites;
		construction_check: 		switch_townhouses_01_old_con_check;
		destruction:				DestructionCheckHouses;
		cargo_production: 			func_produce(2,1);
		colour: 					rand_recolor_townhouses_01_a;
	}
}

item(FEAT_HOUSES, item_townhouses_new, 06, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_TOWNHOUSES_01);
		population: 				30;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1945,0xFFFF];
		minimum_lifetime: 			2;
		availability_mask: 			[bitmask(								// Agreed to JPS
										TOWNZONE_CENTRE,			// 4
										TOWNZONE_INNER_SUBURB,		// 3
										TOWNZONE_OUTER_SUBURB,		// 2
										TOWNZONE_OUTSKIRT			// 1
										//TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				1;
		
		}
	graphics {
		default: 					switch_townhouses_01_sprites;
		construction_check: 		switch_townhouses_01_new_con_check;
		cargo_production: 			func_produce(4,1);
		colour: 					rand_recolor_townhouses_01_a;
	}
}

// End townhouses
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/houses/townhouses_02.pnml" 1
// Begin townhouses

// Building Sprites
spriteset (spr_townhouses_02, 					"src/gfx/houses/townhouses_02/building.png") 		{template_house_80(1,1)}
spriteset (spr_townhouses_02_snow, 				"src/gfx/houses/townhouses_02/building.png") 		{template_house_80(1,82)}

// Ground Tiles
spriteset (spr_townhouses_02_ground, 			"src/gfx/houses/townhouses_02/ground.png") 			{template_ground(1,1)}
spriteset (spr_townhouses_02_ground_snow, 		"src/gfx/houses/townhouses_02/ground.png") 			{template_ground(1,33)}

// Spritelayouts
spritelayout sprlay_townhouses_02_norm {
	ground {
		sprite: spr_townhouses_02_ground (3);
	}
	building {
		sprite: spr_townhouses_02 (3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_townhouses_02_snow {
	ground {
		sprite: spr_townhouses_02_ground_snow (3);
	}
	building {
		sprite: spr_townhouses_02_snow (3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_townhouses_02_sprites, terrain_type) {
	TILETYPE_SNOW: sprlay_townhouses_02_snow;
	sprlay_townhouses_02_norm;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_townhouses_02)
	{
		//1: PALETTE_CC_RED;
		//2: PALETTE_CC_LIGHT_BLUE;
		//1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		//1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Checks
switch (FEAT_HOUSES, SELF, switch_townhouses_02_con_check, 
	HouseOfficeGap() 				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
) {return;}	


item(FEAT_HOUSES, item_townhouses_02, 112, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_TOWNHOUSES_02);
		population: 				30;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2],[FOOD, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1945,1969];
		minimum_lifetime: 			2;
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										//TOWNZONE_INNER_SUBURB,	// 3
										TOWNZONE_OUTER_SUBURB,		// 2
										TOWNZONE_OUTSKIRT			// 1
										//TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				1;
		
		}
	graphics {
		default: 					switch_townhouses_02_sprites;
		construction_check: 		switch_townhouses_02_con_check;
		cargo_production: 			func_produce(2,1);
		colour: 					rand_recolor_townhouses_02;
	}
}

// End townhouses
# 1 "JPplusBuildings.pnml" 4

// OLD HOUSES
# 1 "src/houses/houses_old/wooden_farmhouse_01.pnml" 1
// Begin wooden_farmhouse_01

// Buildings
spriteset (spr_wooden_farmhouse_01, 				"src/gfx/houses_old/wooden_farmhouse_01/building.png") 		{template_house_80(1,1)}
spriteset (spr_wooden_farmhouse_01_snow, 			"src/gfx/houses_old/wooden_farmhouse_01/building.png") 		{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_wooden_farmhouse_01 {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_wooden_farmhouse_01 (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_wooden_farmhouse_01_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_wooden_farmhouse_01_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_wooden_farmhouse_01_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_wooden_farmhouse_01_snow;
	sprlay_wooden_farmhouse_01;
}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_wooden_farmhouse_01_con_check, 
	HouseOfficeGap() &&				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
	HasRoadAdjacentSE()
) {return;}	

item(FEAT_HOUSES, item_wooden_farmhouse_01, 17, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_WOODEN_FARMHOUSE);
		population: 				20;										// Agreed to JPS
		accepted_cargos: 			[[PASS, 2],[MAIL, 1],[GOOD, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				4;										// Increased due to only SE facing
		years_available: 			[1700,1950];							// Agreed to JPS
		minimum_lifetime: 			2;										
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										//TOWNZONE_INNER_SUBURB,	// 3
										//TOWNZONE_OUTER_SUBURB		// 2
										TOWNZONE_OUTSKIRT,			// 1
										TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				0;
		
		}
	graphics {
		default: 					switch_wooden_farmhouse_01_sprites;
		construction_check: 		switch_wooden_farmhouse_01_con_check;
		cargo_production: 			func_produce(1,1);						// 
		//colour: 					rand_recolor_wooden_townhouses;
	}
}

// End wooden_farmhouse_01
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/houses_old/wooden_house_01.pnml" 1
// Begin wooden_house_01

// Buildings
spriteset (spr_wooden_house_01a, 			"src/gfx/houses_old/wooden_house_01/building_a.png") 			{template_house_80(1,1)}
spriteset (spr_wooden_house_01a_snow, 		"src/gfx/houses_old/wooden_house_01/building_a.png") 			{template_house_80(1,82)}

spriteset (spr_wooden_house_01b, 			"src/gfx/houses_old/wooden_house_01/building_b.png") 			{template_house_80(1,1)}
spriteset (spr_wooden_house_01b_snow, 		"src/gfx/houses_old/wooden_house_01/building_b.png") 			{template_house_80(1,82)}

spriteset (spr_wooden_house_01c, 			"src/gfx/houses_old/wooden_house_01/building_c.png") 			{template_house_80(1,1)}
spriteset (spr_wooden_house_01c_snow, 		"src/gfx/houses_old/wooden_house_01/building_c.png") 			{template_house_80(1,82)}

spriteset (spr_wooden_house_01d, 			"src/gfx/houses_old/wooden_house_01/building_d.png") 			{template_house_80(1,1)}
spriteset (spr_wooden_house_01d_snow, 		"src/gfx/houses_old/wooden_house_01/building_d.png") 			{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_wooden_house_01a {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_wooden_house_01a (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_wooden_house_01a_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_wooden_house_01a_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_wooden_house_01b {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_wooden_house_01b (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_wooden_house_01b_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_wooden_house_01b_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_wooden_house_01c {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_wooden_house_01c (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_wooden_house_01c_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_wooden_house_01c_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_wooden_house_01d {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_wooden_house_01d (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_wooden_house_01d_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_wooden_house_01d_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}


// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_wooden_house_01a,terrain_type) {
	TILETYPE_SNOW: sprlay_wooden_house_01a_snow;
	sprlay_wooden_house_01a;
}

switch(FEAT_HOUSES, SELF, switch_wooden_house_01b,terrain_type) {
	TILETYPE_SNOW: sprlay_wooden_house_01b_snow;
	sprlay_wooden_house_01b;
}

switch(FEAT_HOUSES, SELF, switch_wooden_house_01c,terrain_type) {
	TILETYPE_SNOW: sprlay_wooden_house_01c_snow;
	sprlay_wooden_house_01c;
}

switch(FEAT_HOUSES, SELF, switch_wooden_house_01d,terrain_type) {
	TILETYPE_SNOW: sprlay_wooden_house_01d_snow;
	sprlay_wooden_house_01d;
}

// Selection of sprites
random_switch (FEAT_HOUSES, SELF, switch_wooden_house_01_sprites_any) {
	1: switch_wooden_house_01b;		// Any
	1: switch_wooden_house_01d;		// Any
}

random_switch (FEAT_HOUSES, SELF, switch_wooden_house_01_sprites_SESW) {
	1: switch_wooden_house_01a;		// SE
	1: switch_wooden_house_01c;		// SW
}

switch (FEAT_HOUSES, SELF, switch_wooden_house_01_sprites, SpriteDirections() ) {
	1: switch_wooden_house_01a; 
	2: switch_wooden_house_01c;
	3: switch_wooden_house_01_sprites_SESW;
	default: switch_wooden_house_01_sprites_any;
}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_wooden_house_01_con_check, 
	HouseOfficeGap() 			// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
) {return;}	

item(FEAT_HOUSES, item_wooden_house_01, 18, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_WOODEN_HOUSE);
		population: 				30;										// Agreed to JPS
		accepted_cargos: 			[[PASS, 3],[MAIL, 1],[GOOD, 3]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1700,1950];							// Agreed to JPS
		minimum_lifetime: 			2;										
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										TOWNZONE_INNER_SUBURB,		// 3
										TOWNZONE_OUTER_SUBURB		// 2
										//TOWNZONE_OUTSKIRT,		// 1
										//TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				0;
		
		}
	graphics {
		default: 					switch_wooden_house_01_sprites;
		construction_check: 		switch_wooden_house_01_con_check;
		cargo_production: 			func_produce(2,1);						// 
		//colour: 					rand_recolor_wooden_townhouses;
	}
}

// End wooden_house_01
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/houses_old/dense_wooden.pnml" 1
// Begin dense_wooden

// Buildings
spriteset (spr_dense_wooden_a, 						"src/gfx/houses_old/dense_wooden/building_a.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_a_snow, 				"src/gfx/houses_old/dense_wooden/building_a.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_b, 						"src/gfx/houses_old/dense_wooden/building_b.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_b_snow, 				"src/gfx/houses_old/dense_wooden/building_b.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_c, 						"src/gfx/houses_old/dense_wooden/building_c.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_c_snow, 				"src/gfx/houses_old/dense_wooden/building_c.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_d, 						"src/gfx/houses_old/dense_wooden/building_d.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_d_snow, 				"src/gfx/houses_old/dense_wooden/building_d.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_e, 						"src/gfx/houses_old/dense_wooden/building_e.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_e_snow, 				"src/gfx/houses_old/dense_wooden/building_e.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_f, 						"src/gfx/houses_old/dense_wooden/building_f.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_f_snow, 				"src/gfx/houses_old/dense_wooden/building_f.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_g, 						"src/gfx/houses_old/dense_wooden/building_g.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_g_snow, 				"src/gfx/houses_old/dense_wooden/building_g.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_h, 						"src/gfx/houses_old/dense_wooden/building_h.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_h_snow, 				"src/gfx/houses_old/dense_wooden/building_h.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_i, 						"src/gfx/houses_old/dense_wooden/building_i.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_i_snow, 				"src/gfx/houses_old/dense_wooden/building_i.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_j, 						"src/gfx/houses_old/dense_wooden/building_j.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_j_snow, 				"src/gfx/houses_old/dense_wooden/building_j.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_k, 						"src/gfx/houses_old/dense_wooden/building_k.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_k_snow, 				"src/gfx/houses_old/dense_wooden/building_k.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_l, 						"src/gfx/houses_old/dense_wooden/building_l.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_l_snow, 				"src/gfx/houses_old/dense_wooden/building_l.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_m, 						"src/gfx/houses_old/dense_wooden/building_m.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_m_snow, 				"src/gfx/houses_old/dense_wooden/building_m.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_n, 						"src/gfx/houses_old/dense_wooden/building_n.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_n_snow, 				"src/gfx/houses_old/dense_wooden/building_n.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_o, 						"src/gfx/houses_old/dense_wooden/building_o.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_o_snow, 				"src/gfx/houses_old/dense_wooden/building_o.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_p, 						"src/gfx/houses_old/dense_wooden/building_p.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_p_snow, 				"src/gfx/houses_old/dense_wooden/building_p.png") 					{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_dense_wooden_a {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_dense_wooden_a (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_a_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_dense_wooden_a_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_b {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_dense_wooden_b (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_b_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_dense_wooden_b_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_c {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_dense_wooden_c (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_c_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_dense_wooden_c_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_d {
	ground {
		sprite: spr_ground_grass(construction_state);
	}
	building {
		sprite: spr_dense_wooden_d(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_d_snow {
	ground {
		sprite: spr_ground_snow(construction_state);
	}
	building {
		sprite: spr_dense_wooden_d_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_e {
	ground {
		sprite: spr_ground_grass(construction_state);
	}
	building {
		sprite: spr_dense_wooden_e(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_e_snow {
	ground {
		sprite: spr_ground_snow(construction_state);
	}
	building {
		sprite: spr_dense_wooden_e_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_f {
	ground {
		sprite: spr_ground_grass(construction_state);
	}
	building {
		sprite: spr_dense_wooden_f(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_f_snow {
	ground {
		sprite: spr_ground_snow(construction_state);
	}
	building {
		sprite: spr_dense_wooden_f_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_g {
	ground {
		sprite: spr_ground_grass(construction_state);
	}
	building {
		sprite: spr_dense_wooden_g(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_g_snow {
	ground {
		sprite: spr_ground_snow(construction_state);
	}
	building {
		sprite: spr_dense_wooden_g_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_h {
	ground {
		sprite: spr_ground_grass(construction_state);
	}
	building {
		sprite: spr_dense_wooden_h(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_h_snow {
	ground {
		sprite: spr_ground_snow(construction_state);
	}
	building {
		sprite: spr_dense_wooden_h_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_i {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_dense_wooden_i (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_i_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_dense_wooden_i_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_j {
	ground {
		sprite: spr_ground_grass(construction_state);
	}
	building {
		sprite: spr_dense_wooden_j(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_j_snow {
	ground {
		sprite: spr_ground_snow(construction_state);
	}
	building {
		sprite: spr_dense_wooden_j_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_k {
	ground {
		sprite: spr_ground_grass(construction_state);
	}
	building {
		sprite: spr_dense_wooden_k(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_k_snow {
	ground {
		sprite: spr_ground_snow(construction_state);
	}
	building {
		sprite: spr_dense_wooden_k_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_l {
	ground {
		sprite: spr_ground_grass(construction_state);
	}
	building {
		sprite: spr_dense_wooden_l(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_l_snow {
	ground {
		sprite: spr_ground_snow(construction_state);
	}
	building {
		sprite: spr_dense_wooden_l_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_m {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_dense_wooden_m (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_m_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_dense_wooden_m_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_n {
	ground {
		sprite: spr_ground_grass(construction_state);
	}
	building {
		sprite: spr_dense_wooden_n (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_n_snow {
	ground {
		sprite: spr_ground_snow(construction_state);
	}
	building {
		sprite: spr_dense_wooden_n_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_o {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_dense_wooden_o (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_o_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_dense_wooden_o_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_p {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_dense_wooden_p (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_p_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_dense_wooden_p_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_dense_wooden_a,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_a_snow;
	sprlay_dense_wooden_a;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_b,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_b_snow;
	sprlay_dense_wooden_b;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_c,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_c_snow;
	sprlay_dense_wooden_c;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_d,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_d_snow;
	sprlay_dense_wooden_d;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_e,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_e_snow;
	sprlay_dense_wooden_e;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_f,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_f_snow;
	sprlay_dense_wooden_f;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_g,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_g_snow;
	sprlay_dense_wooden_g;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_h,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_h_snow;
	sprlay_dense_wooden_h;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_i,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_i_snow;
	sprlay_dense_wooden_i;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_j,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_j_snow;
	sprlay_dense_wooden_j;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_k,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_k_snow;
	sprlay_dense_wooden_k;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_l,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_l_snow;
	sprlay_dense_wooden_l;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_m,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_m_snow;
	sprlay_dense_wooden_m;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_n,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_n_snow;
	sprlay_dense_wooden_n;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_o,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_o_snow;
	sprlay_dense_wooden_o;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_p,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_p_snow;
	sprlay_dense_wooden_p;
}

// Random selection of sprites
random_switch (FEAT_HOUSES, SELF, switch_dense_wooden_sprites) {
	1: switch_dense_wooden_a;
	1: switch_dense_wooden_b;
	1: switch_dense_wooden_c;
	1: switch_dense_wooden_d;
	1: switch_dense_wooden_e;
	1: switch_dense_wooden_f;
	1: switch_dense_wooden_g;
	1: switch_dense_wooden_h;
	1: switch_dense_wooden_i;
	1: switch_dense_wooden_j;
	1: switch_dense_wooden_k;
	1: switch_dense_wooden_l;
	1: switch_dense_wooden_m;
	1: switch_dense_wooden_n;
	1: switch_dense_wooden_o;
	1: switch_dense_wooden_p;

}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_dense_wooden)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Checks
switch (FEAT_HOUSES, SELF, switch_dense_wooden_con_check, 
	HouseOfficeGap() 				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
) {return;}	

item(FEAT_HOUSES, item_dense_wooden, 13, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_DENSE_WOODEN);
		population: 				60;										// Agreed to JPS
		accepted_cargos: 			[[PASS, 6],[MAIL, 3],[GOOD, 6]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1700,1950];							// Agreed to JPS
		minimum_lifetime: 			2;										
		availability_mask: 			[bitmask(								// Agreed to JPS
										TOWNZONE_CENTRE,			// 4
										TOWNZONE_INNER_SUBURB		// 3
										//TOWNZONE_OUTER_SUBURB,	// 2
										//TOWNZONE_OUTSKIRT			// 1
										//TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				1;										// Reallcoated to BC1 since more like townhouse (and higher popn factor)
		
		}
	graphics {
		default: 					switch_dense_wooden_sprites;
		construction_check: 		switch_dense_wooden_con_check;
		destruction:				DestructionCheckHouses;
		cargo_production: 			func_produce(2,1);						// 
		colour: 					rand_recolor_dense_wooden;
	}
}

// End dense_wooden
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/houses_old/wooden_townhouses_01.pnml" 1
// Begin wooden_townhouses_01

// Buildings
spriteset (spr_wooden_townhouses_01, 			"src/gfx/houses_old/wooden_townhouses_01/building.png") 			{template_house_80_wide(1,1)}
spriteset (spr_wooden_townhouses_01_snow, 		"src/gfx/houses_old/wooden_townhouses_01/building.png") 			{template_house_80_wide(1,82)}

// Spritelayouts
spritelayout sprlay_wooden_townhouses_01 {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_wooden_townhouses_01 (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_wooden_townhouses_01_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_wooden_townhouses_01_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_wooden_townhouses_01,terrain_type) {
	TILETYPE_SNOW: sprlay_wooden_townhouses_01_snow;
	sprlay_wooden_townhouses_01;
}

switch (FEAT_HOUSES, SELF, switch_wooden_townhouses_01_con_check, 
	HouseOfficeGap() 			// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
) {return;}	

item(FEAT_HOUSES, item_wooden_townhouses_01, 01, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_WOODEN_TOWNHOUSES_SHOPS);
		population: 				40;										// Agreed to JPS
		accepted_cargos: 			[[PASS, 4],[MAIL, 2],[GOOD, 4]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1700,1950];							// Agreed to JPS
		minimum_lifetime: 			2;										
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										TOWNZONE_INNER_SUBURB,		// 3
										//TOWNZONE_OUTER_SUBURB,	// 2
										TOWNZONE_OUTSKIRT			// 1
										//TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				0;
		
		}
	graphics {
		default: 					switch_wooden_townhouses_01;
		construction_check: 		switch_wooden_townhouses_01_con_check;
		cargo_production: 			func_produce(4,1);						// 
		//colour: 					rand_recolor_wooden_townhouses;
	}
}

// End wooden_townhouses_01
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/houses_old/wooden_townhouses_02.pnml" 1
// Begin wooden_townhouses_02

// Ground Sprites

// Leveraged from dense wooden

// Buildings
spriteset (spr_wooden_townhouses_02, 			"src/gfx/houses_old/wooden_townhouses_02/building.png") 			{template_house_80(1,1)}
spriteset (spr_wooden_townhouses_02_snow, 		"src/gfx/houses_old/wooden_townhouses_02/building.png")  			{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_wooden_townhouses_02 {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_wooden_townhouses_02 (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_wooden_townhouses_02_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_wooden_townhouses_02_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_wooden_townhouses_02,terrain_type) {
	TILETYPE_SNOW: sprlay_wooden_townhouses_02_snow;
	sprlay_wooden_townhouses_02;
}

// Construction Checks
switch (FEAT_HOUSES, SELF, switch_wooden_townhouses_02_con_check, 
	HouseOfficeGap() 				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
) {return;}	

item(FEAT_HOUSES, item_wooden_townhouses_02, 03, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_WOODEN_TOWNHOUSES);
		population: 				40;										// Agreed to JPS
		accepted_cargos: 			[[PASS, 4],[MAIL, 2],[GOOD, 4]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1700,1950];							// Agreed to JPS
		minimum_lifetime: 			2;										
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										TOWNZONE_INNER_SUBURB,		// 3
										//TOWNZONE_OUTER_SUBURB,	// 2
										TOWNZONE_OUTSKIRT			// 1
										//TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				0;
		
		}
	graphics {
		default: 					switch_wooden_townhouses_02;
		construction_check: 		switch_wooden_townhouses_02_con_check;
		cargo_production: 			func_produce(4,1);						// 
		//colour: 					rand_recolor_wooden_townhouses;
	}
}

// End wooden_townhouses_02
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/houses_old/wooden_townhouses_03.pnml" 1
// Begin wooden_townhouses_03

// Ground Sprites

// Leveraged from dense wooden

// Buildings
spriteset (spr_wooden_townhouses_03, 			"src/gfx/houses_old/wooden_townhouses_03/building.png")  			{template_house_80(1,1)}
spriteset (spr_wooden_townhouses_03_snow, 		"src/gfx/houses_old/wooden_townhouses_03/building.png") 			{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_wooden_townhouses_03 {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_wooden_townhouses_03 (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_wooden_townhouses_03_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_wooden_townhouses_03_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_wooden_townhouses_03,terrain_type) {
	TILETYPE_SNOW: sprlay_wooden_townhouses_03_snow;
	sprlay_wooden_townhouses_03;
}

switch (FEAT_HOUSES, SELF, switch_wooden_townhouses_03_con_check, 
	HouseOfficeGap() 				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
) {return;}	

item(FEAT_HOUSES, item_wooden_townhouses_03, 04, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_WOODEN_TOWNHOUSES);
		population: 				40;										// Agreed to JPS
		accepted_cargos: 			[[PASS, 4],[MAIL, 2],[GOOD, 4]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1700,1950];							// Agreed to JPS
		minimum_lifetime: 			2;										
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										TOWNZONE_INNER_SUBURB,		// 3
										//TOWNZONE_OUTER_SUBURB,	// 2
										TOWNZONE_OUTSKIRT			// 1
										//TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				0;
		
		}
	graphics {
		default: 					switch_wooden_townhouses_03;
		construction_check: 		switch_wooden_townhouses_03_con_check;
		cargo_production: 			func_produce(4,1);						// 
		//colour: 					rand_recolor_wooden_townhouses;
	}
}

// End wooden_townhouses_03
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/houses_old/wooden_townhouses_04.pnml" 1
// Begin wooden_townhouses_04

// Ground Sprites

// Leveraged from dense wooden

// Buildings
spriteset (spr_wooden_townhouses_04, 			"src/gfx/houses_old/wooden_townhouses_04/building.png")  			{template_house_80(1,1)}
spriteset (spr_wooden_townhouses_04_snow, 		"src/gfx/houses_old/wooden_townhouses_04/building.png") 			{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_wooden_townhouses_04 {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_wooden_townhouses_04 (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_wooden_townhouses_04_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_wooden_townhouses_04_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_wooden_townhouses_04,terrain_type) {
	TILETYPE_SNOW: sprlay_wooden_townhouses_04_snow;
	sprlay_wooden_townhouses_04;
}


switch (FEAT_HOUSES, SELF, switch_wooden_townhouses_04_con_check, 
	HouseOfficeGap()				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
) {return;}	

item(FEAT_HOUSES, item_wooden_townhouses_04, 08, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_WOODEN_TOWNHOUSES_TREE);
		population: 				40;										// Agreed to JPS
		accepted_cargos: 			[[PASS, 4],[MAIL, 2],[GOOD, 4]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1700,1950];							// Agreed to JPS
		minimum_lifetime: 			2;										
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										TOWNZONE_INNER_SUBURB,		// 3
										//TOWNZONE_OUTER_SUBURB,	// 2
										TOWNZONE_OUTSKIRT			// 1
										//TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				0;
		
		}
	graphics {
		default: 					switch_wooden_townhouses_04;
		construction_check: 		switch_wooden_townhouses_04_con_check;
		cargo_production: 			func_produce(4,1);						// 
		//colour: 					rand_recolor_wooden_townhouses;
	}
}

// End wooden_townhouses_04
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/houses_old/two_wooden_houses_01.pnml" 1
// Begin two_wooden_houses_01

// Buildings
spriteset (spr_two_wooden_houses_01a, 			"src/gfx/houses_old/two_wooden_houses_01/building_01a.png") 			{template_house_80(1,1)}
spriteset (spr_two_wooden_houses_01a_snow, 		"src/gfx/houses_old/two_wooden_houses_01/building_01a.png") 			{template_house_80(1,82)}

spriteset (spr_two_wooden_houses_01b, 			"src/gfx/houses_old/two_wooden_houses_01/building_01b.png") 			{template_house_80(1,1)}
spriteset (spr_two_wooden_houses_01b_snow, 		"src/gfx/houses_old/two_wooden_houses_01/building_01b.png") 			{template_house_80(1,82)}

spriteset (spr_two_wooden_houses_01c, 			"src/gfx/houses_old/two_wooden_houses_01/building_01c.png") 			{template_house_80(1,1)}
spriteset (spr_two_wooden_houses_01c_snow, 		"src/gfx/houses_old/two_wooden_houses_01/building_01c.png") 			{template_house_80(1,82)}

spriteset (spr_two_wooden_houses_01d, 			"src/gfx/houses_old/two_wooden_houses_01/building_01d.png") 			{template_house_80(1,1)}
spriteset (spr_two_wooden_houses_01d_snow, 		"src/gfx/houses_old/two_wooden_houses_01/building_01d.png") 			{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_two_wooden_houses_01a {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_01a (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_01a_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_01a_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_01b {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_01b (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_01b_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_01b_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_01c {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_01c (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_01c_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_01c_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_01d {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_01d (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_01d_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_01d_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}


// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_two_wooden_houses_01a,terrain_type) {
	TILETYPE_SNOW: sprlay_two_wooden_houses_01a_snow;
	sprlay_two_wooden_houses_01a;
}

switch(FEAT_HOUSES, SELF, switch_two_wooden_houses_01b,terrain_type) {
	TILETYPE_SNOW: sprlay_two_wooden_houses_01b_snow;
	sprlay_two_wooden_houses_01b;
}

switch(FEAT_HOUSES, SELF, switch_two_wooden_houses_01c,terrain_type) {
	TILETYPE_SNOW: sprlay_two_wooden_houses_01c_snow;
	sprlay_two_wooden_houses_01c;
}

switch(FEAT_HOUSES, SELF, switch_two_wooden_houses_01d,terrain_type) {
	TILETYPE_SNOW: sprlay_two_wooden_houses_01d_snow;
	sprlay_two_wooden_houses_01d;
}

// Random selection of sprites
random_switch (FEAT_HOUSES, SELF, switch_two_wooden_houses_01_sprites_SE) {
	1: switch_two_wooden_houses_01a;		// SE
	1: switch_two_wooden_houses_01b;		// SE
}

random_switch (FEAT_HOUSES, SELF, switch_two_wooden_houses_01_sprites_SW) {
	1: switch_two_wooden_houses_01c;		// SW
	1: switch_two_wooden_houses_01d;		// SW
}

random_switch (FEAT_HOUSES, SELF, switch_two_wooden_houses_01_sprites_SESW) {
	1: switch_two_wooden_houses_01a;		// SE
	1: switch_two_wooden_houses_01b;		// SE
	1: switch_two_wooden_houses_01c;		// SW
	1: switch_two_wooden_houses_01d;		// SW
}

switch (FEAT_HOUSES, SELF, switch_two_wooden_houses_01_sprites, SpriteDirections() ) {
	1: switch_two_wooden_houses_01_sprites_SE; 				// SE Only
	2: switch_two_wooden_houses_01_sprites_SW;				// SW Only
	3: switch_two_wooden_houses_01_sprites_SESW;			// SE or SW
	default: switch_two_wooden_houses_01_sprites_SESW;		// Otherwise
}

switch (FEAT_HOUSES, SELF, switch_two_wooden_houses_01_con_check, 
	HouseOfficeGap() &&				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
	HasRoadAdjacentSESW()			// Must have road to the SE or SW
) {return;}	

item(FEAT_HOUSES, item_two_wooden_houses_01, 14, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_TWO_WOODEN_TOWNHOUSES);
		population: 				30;										// Agreed to JPS
		accepted_cargos: 			[[PASS, 3],[MAIL, 1],[GOOD, 3]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				2;										// Increased since can only face SE or SW
		years_available: 			[1700,1950];							// Agreed to JPS
		minimum_lifetime: 			2;										
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										TOWNZONE_INNER_SUBURB,		// 3
										TOWNZONE_OUTER_SUBURB		// 2
										//TOWNZONE_OUTSKIRT,		// 1
										//TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				0;
		
		}
	graphics {
		default: 					switch_two_wooden_houses_01_sprites;
		construction_check: 		switch_two_wooden_houses_01_con_check;
		cargo_production: 			func_produce(2,1);						// 
		//colour: 					rand_recolor_wooden_townhouses;
	}
}

// End two_wooden_houses_01
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/houses_old/two_wooden_houses_02.pnml" 1
// Begin two_wooden_houses_02

// Buildings
spriteset (spr_two_wooden_houses_02a, 			"src/gfx/houses_old/two_wooden_houses_02/building_02a.png") 			{template_house_80(1,1)}
spriteset (spr_two_wooden_houses_02a_snow, 		"src/gfx/houses_old/two_wooden_houses_02/building_02a.png") 			{template_house_80(1,82)}

spriteset (spr_two_wooden_houses_02b, 			"src/gfx/houses_old/two_wooden_houses_02/building_02b.png") 			{template_house_80(1,1)}
spriteset (spr_two_wooden_houses_02b_snow, 		"src/gfx/houses_old/two_wooden_houses_02/building_02b.png") 			{template_house_80(1,82)}

spriteset (spr_two_wooden_houses_02c, 			"src/gfx/houses_old/two_wooden_houses_02/building_02c.png") 			{template_house_80(1,1)}
spriteset (spr_two_wooden_houses_02c_snow, 		"src/gfx/houses_old/two_wooden_houses_02/building_02c.png") 			{template_house_80(1,82)}

spriteset (spr_two_wooden_houses_02d, 			"src/gfx/houses_old/two_wooden_houses_02/building_02d.png") 			{template_house_80(1,1)}
spriteset (spr_two_wooden_houses_02d_snow, 		"src/gfx/houses_old/two_wooden_houses_02/building_02d.png") 			{template_house_80(1,82)}

spriteset (spr_two_wooden_houses_02e, 			"src/gfx/houses_old/two_wooden_houses_02/building_02e.png") 			{template_house_80(1,1)}
spriteset (spr_two_wooden_houses_02e_snow, 		"src/gfx/houses_old/two_wooden_houses_02/building_02e.png") 			{template_house_80(1,82)}

spriteset (spr_two_wooden_houses_02f, 			"src/gfx/houses_old/two_wooden_houses_02/building_02f.png") 			{template_house_80(1,1)}
spriteset (spr_two_wooden_houses_02f_snow, 		"src/gfx/houses_old/two_wooden_houses_02/building_02f.png") 			{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_two_wooden_houses_02a {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_02a (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_02a_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_02a_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_02b {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_02b (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_02b_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_02b_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_02c {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_02c (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_02c_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_02c_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_02d {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_02d (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_02d_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_02d_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_02e {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_02e (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_02e_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_02e_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_02f {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_02f (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_02f_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_02f_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_two_wooden_houses_02a,terrain_type) {
	TILETYPE_SNOW: sprlay_two_wooden_houses_02a_snow;
	sprlay_two_wooden_houses_02a;
}

switch(FEAT_HOUSES, SELF, switch_two_wooden_houses_02b,terrain_type) {
	TILETYPE_SNOW: sprlay_two_wooden_houses_02b_snow;
	sprlay_two_wooden_houses_02b;
}

switch(FEAT_HOUSES, SELF, switch_two_wooden_houses_02c,terrain_type) {
	TILETYPE_SNOW: sprlay_two_wooden_houses_02c_snow;
	sprlay_two_wooden_houses_02c;
}

switch(FEAT_HOUSES, SELF, switch_two_wooden_houses_02d,terrain_type) {
	TILETYPE_SNOW: sprlay_two_wooden_houses_02d_snow;
	sprlay_two_wooden_houses_02d;
}

switch(FEAT_HOUSES, SELF, switch_two_wooden_houses_02e,terrain_type) {
	TILETYPE_SNOW: sprlay_two_wooden_houses_02e_snow;
	sprlay_two_wooden_houses_02e;
}

switch(FEAT_HOUSES, SELF, switch_two_wooden_houses_02f,terrain_type) {
	TILETYPE_SNOW: sprlay_two_wooden_houses_02f_snow;
	sprlay_two_wooden_houses_02f;
}

// Random selection of sprites
random_switch (FEAT_HOUSES, SELF, switch_two_wooden_houses_02_sprites) {
	1: switch_two_wooden_houses_02a;
	1: switch_two_wooden_houses_02b;
	1: switch_two_wooden_houses_02c;
	1: switch_two_wooden_houses_02d;
	1: switch_two_wooden_houses_02e;
	1: switch_two_wooden_houses_02f;
}

switch (FEAT_HOUSES, SELF, switch_two_wooden_houses_02_con_check, 
	HouseOfficeGap() 			// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
) {return;}	

item(FEAT_HOUSES, item_two_wooden_houses_02, 15, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_TWO_WOODEN_TOWNHOUSES);
		population: 				30;										// Agreed to JPS
		accepted_cargos: 			[[PASS, 3],[MAIL, 1],[GOOD, 3]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1700,1950];							// Agreed to JPS
		minimum_lifetime: 			2;										
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										TOWNZONE_INNER_SUBURB,		// 3
										TOWNZONE_OUTER_SUBURB		// 2
										//TOWNZONE_OUTSKIRT,		// 1
										//TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				0;
		
		}
	graphics {
		default: 					switch_two_wooden_houses_02_sprites;
		construction_check: 		switch_two_wooden_houses_02_con_check;
		cargo_production: 			func_produce(2,1);						// 
		//colour: 					rand_recolor_wooden_townhouses;
	}
}

// End two_wooden_houses_02
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/houses_old/two_wooden_houses_03.pnml" 1
// Begin two_wooden_houses_03

// Buildings
spriteset (spr_two_wooden_houses_03a, 			"src/gfx/houses_old/two_wooden_houses_03/building_03a.png") 			{template_house_80(1,1)}
spriteset (spr_two_wooden_houses_03a_snow, 		"src/gfx/houses_old/two_wooden_houses_03/building_03a.png") 			{template_house_80(1,82)}

spriteset (spr_two_wooden_houses_03b, 			"src/gfx/houses_old/two_wooden_houses_03/building_03b.png") 			{template_house_80(1,1)}
spriteset (spr_two_wooden_houses_03b_snow, 		"src/gfx/houses_old/two_wooden_houses_03/building_03b.png") 			{template_house_80(1,82)}

spriteset (spr_two_wooden_houses_03c, 			"src/gfx/houses_old/two_wooden_houses_03/building_03c.png") 			{template_house_80(1,1)}
spriteset (spr_two_wooden_houses_03c_snow, 		"src/gfx/houses_old/two_wooden_houses_03/building_03c.png") 			{template_house_80(1,82)}

spriteset (spr_two_wooden_houses_03d, 			"src/gfx/houses_old/two_wooden_houses_03/building_03d.png") 			{template_house_80(1,1)}
spriteset (spr_two_wooden_houses_03d_snow, 		"src/gfx/houses_old/two_wooden_houses_03/building_03d.png") 			{template_house_80(1,82)}

spriteset (spr_two_wooden_houses_03e, 			"src/gfx/houses_old/two_wooden_houses_03/building_03e.png") 			{template_house_80(1,1)}
spriteset (spr_two_wooden_houses_03e_snow, 		"src/gfx/houses_old/two_wooden_houses_03/building_03e.png") 			{template_house_80(1,82)}

spriteset (spr_two_wooden_houses_03f, 			"src/gfx/houses_old/two_wooden_houses_03/building_03f.png") 			{template_house_80(1,1)}
spriteset (spr_two_wooden_houses_03f_snow, 		"src/gfx/houses_old/two_wooden_houses_03/building_03f.png") 			{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_two_wooden_houses_03a {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_03a (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_03a_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_03a_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_03b {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_03b (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_03b_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_03b_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_03c {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_03c (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_03c_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_03c_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_03d {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_03d (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_03d_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_03d_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_03e {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_03e (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_03e_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_03e_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_03f {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_03f (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_03f_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_03f_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_two_wooden_houses_03a,terrain_type) {
	TILETYPE_SNOW: sprlay_two_wooden_houses_03a_snow;
	sprlay_two_wooden_houses_03a;
}

switch(FEAT_HOUSES, SELF, switch_two_wooden_houses_03b,terrain_type) {
	TILETYPE_SNOW: sprlay_two_wooden_houses_03b_snow;
	sprlay_two_wooden_houses_03b;
}

switch(FEAT_HOUSES, SELF, switch_two_wooden_houses_03c,terrain_type) {
	TILETYPE_SNOW: sprlay_two_wooden_houses_03c_snow;
	sprlay_two_wooden_houses_03c;
}

switch(FEAT_HOUSES, SELF, switch_two_wooden_houses_03d,terrain_type) {
	TILETYPE_SNOW: sprlay_two_wooden_houses_03d_snow;
	sprlay_two_wooden_houses_03d;
}

switch(FEAT_HOUSES, SELF, switch_two_wooden_houses_03e,terrain_type) {
	TILETYPE_SNOW: sprlay_two_wooden_houses_03e_snow;
	sprlay_two_wooden_houses_03e;
}

switch(FEAT_HOUSES, SELF, switch_two_wooden_houses_03f,terrain_type) {
	TILETYPE_SNOW: sprlay_two_wooden_houses_03f_snow;
	sprlay_two_wooden_houses_03f;
}

// Random selection of sprites
random_switch (FEAT_HOUSES, SELF, switch_two_wooden_houses_03_sprites) {
	1: switch_two_wooden_houses_03a;
	1: switch_two_wooden_houses_03b;
	1: switch_two_wooden_houses_03c;
	1: switch_two_wooden_houses_03d;
	1: switch_two_wooden_houses_03e;
	1: switch_two_wooden_houses_03f;
}

switch (FEAT_HOUSES, SELF, switch_two_wooden_houses_03_con_check, 
	HouseOfficeGap() 			// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
) {return;}	

item(FEAT_HOUSES, item_two_wooden_houses_03, 16, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_TWO_WOODEN_TOWNHOUSES);
		population: 				30;										// Agreed to JPS
		accepted_cargos: 			[[PASS, 3],[MAIL, 1],[GOOD, 3]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1700,1950];							// Agreed to JPS
		minimum_lifetime: 			2;										
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										TOWNZONE_INNER_SUBURB,		// 3
										TOWNZONE_OUTER_SUBURB		// 2
										//TOWNZONE_OUTSKIRT,		// 1
										//TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				0;
		
		}
	graphics {
		default: 					switch_two_wooden_houses_03_sprites;
		construction_check: 		switch_two_wooden_houses_03_con_check;
		cargo_production: 			func_produce(2,1);						// 
		//colour: 					rand_recolor_wooden_townhouses;
	}
}

// End two_wooden_houses_03
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/houses_old/large_wooden_house_01.pnml" 1
// Begin large_wooden_house_01

// Buildings
spriteset (spr_large_wooden_house_01a, 			"src/gfx/houses_old/large_wooden_house_01/building_01a.png") 			{template_house_80(1,1)}
spriteset (spr_large_wooden_house_01a_snow, 	"src/gfx/houses_old/large_wooden_house_01/building_01a.png") 			{template_house_80(1,82)}

spriteset (spr_large_wooden_house_01b, 			"src/gfx/houses_old/large_wooden_house_01/building_01b.png") 			{template_house_80(1,1)}
spriteset (spr_large_wooden_house_01b_snow, 	"src/gfx/houses_old/large_wooden_house_01/building_01b.png") 			{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_large_wooden_house_01a {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_large_wooden_house_01a (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_large_wooden_house_01a_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_large_wooden_house_01a_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_large_wooden_house_01b {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_large_wooden_house_01b (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_large_wooden_house_01b_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_large_wooden_house_01b_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_large_wooden_house_01a,terrain_type) {
	TILETYPE_SNOW: sprlay_large_wooden_house_01a_snow;
	sprlay_large_wooden_house_01a;
}

switch(FEAT_HOUSES, SELF, switch_large_wooden_house_01b,terrain_type) {
	TILETYPE_SNOW: sprlay_large_wooden_house_01b_snow;
	sprlay_large_wooden_house_01b;
}


// Random selection of sprites
random_switch (FEAT_HOUSES, SELF, switch_large_wooden_house_01_sprites) {
	1: switch_large_wooden_house_01a;		
	1: switch_large_wooden_house_01b;		
}

switch (FEAT_HOUSES, SELF, switch_large_wooden_house_01_con_check, 
	HouseOfficeGap() 				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
) {return;}	

item(FEAT_HOUSES, item_large_wooden_house_01, 23, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_LARGE_WOODEN_HOUSE);
		population: 				30;										// Agreed to JPS
		accepted_cargos: 			[[PASS, 3],[MAIL, 1],[GOOD, 3]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				2;										// Increased since can only face SE or SW
		years_available: 			[1700,1950];							// Agreed to JPS
		minimum_lifetime: 			2;										
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										//TOWNZONE_INNER_SUBURB,	// 3
										//TOWNZONE_OUTER_SUBURB		// 2
										TOWNZONE_OUTSKIRT,			// 1
										TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				0;
		
		}
	graphics {
		default: 					switch_large_wooden_house_01_sprites;
		construction_check: 		switch_large_wooden_house_01_con_check;
		cargo_production: 			func_produce(1,1);						// 
		//colour: 					rand_recolor_wooden_townhouses;
	}
}

// End large_wooden_house_01
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/houses_old/large_wooden_house_02.pnml" 1
// Begin large_wooden_house_02

// Buildings
spriteset (spr_large_wooden_house_02a, 			"src/gfx/houses_old/large_wooden_house_02/building_a.png") 			{template_house_80(1,1)}
spriteset (spr_large_wooden_house_02a_snow, 	"src/gfx/houses_old/large_wooden_house_02/building_a.png") 			{template_house_80(1,82)}

spriteset (spr_large_wooden_house_02b, 			"src/gfx/houses_old/large_wooden_house_02/building_b.png") 			{template_house_80(1,1)}
spriteset (spr_large_wooden_house_02b_snow, 	"src/gfx/houses_old/large_wooden_house_02/building_b.png") 			{template_house_80(1,82)}

spriteset (spr_large_wooden_house_02c, 			"src/gfx/houses_old/large_wooden_house_02/building_c.png") 			{template_house_80(1,1)}
spriteset (spr_large_wooden_house_02c_snow, 	"src/gfx/houses_old/large_wooden_house_02/building_c.png") 			{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_large_wooden_house_02a {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_large_wooden_house_02a (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_large_wooden_house_02a_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_large_wooden_house_02a_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_large_wooden_house_02b {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_large_wooden_house_02b (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_large_wooden_house_02b_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_large_wooden_house_02b_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_large_wooden_house_02c {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_large_wooden_house_02c (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_large_wooden_house_02c_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_large_wooden_house_02c_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_large_wooden_house_02a,terrain_type) {
	TILETYPE_SNOW: sprlay_large_wooden_house_02a_snow;
	sprlay_large_wooden_house_02a;
}

switch(FEAT_HOUSES, SELF, switch_large_wooden_house_02b,terrain_type) {
	TILETYPE_SNOW: sprlay_large_wooden_house_02b_snow;
	sprlay_large_wooden_house_02b;
}

switch(FEAT_HOUSES, SELF, switch_large_wooden_house_02c,terrain_type) {
	TILETYPE_SNOW: sprlay_large_wooden_house_02c_snow;
	sprlay_large_wooden_house_02c;
}

// Random selection of sprites
random_switch (FEAT_HOUSES, SELF, switch_large_wooden_house_02_sprites_SESW) {
	1: switch_large_wooden_house_02a;						// SE
	1: switch_large_wooden_house_02c;						// SW
}

switch (FEAT_HOUSES, SELF, switch_large_wooden_house_02_sprites, SpriteDirections() ) {
	1: switch_large_wooden_house_02a; 						// SE Only
	2: switch_large_wooden_house_02c;						// SW Only
	3: switch_large_wooden_house_02_sprites_SESW;			// SE or SW
	default: switch_large_wooden_house_02b;					// Otherwise
}

switch (FEAT_HOUSES, SELF, switch_large_wooden_house_02_con_check, 
	HouseOfficeGap()				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
) {return;}	

item(FEAT_HOUSES, item_large_wooden_house_02, 24, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_LARGE_WOODEN_HOUSE);
		population: 				20;										// Agreed to JPS
		accepted_cargos: 			[[PASS, 2],[MAIL, 1],[GOOD, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;										// Increased since can only face SE or SW
		years_available: 			[1700,1950];							// Agreed to JPS
		minimum_lifetime: 			2;										
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										//TOWNZONE_INNER_SUBURB,	// 3
										//TOWNZONE_OUTER_SUBURB		// 2
										TOWNZONE_OUTSKIRT,			// 1
										TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				0;
		
		}
	graphics {
		default: 					switch_large_wooden_house_02_sprites;
		construction_check: 		switch_large_wooden_house_02_con_check;
		cargo_production: 			func_produce(2,1);						// 
		//colour: 					rand_recolor_wooden_townhouses;
	}
}

// End large_wooden_house_02
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/houses_old/large_wooden_farmhouse_01.pnml" 1
// Begin large_wooden_farmhouse_01

// Buildings
spriteset (spr_large_wooden_farmhouse_01a, 				"src/gfx/houses_old/large_wooden_farmhouse_01/building_a.png") 			{template_house_80(1,1)}
spriteset (spr_large_wooden_farmhouse_01a_snow, 		"src/gfx/houses_old/large_wooden_farmhouse_01/building_a.png") 			{template_house_80(1,82)}

spriteset (spr_large_wooden_farmhouse_01b, 				"src/gfx/houses_old/large_wooden_farmhouse_01/building_b.png") 			{template_house_80(1,1)}
spriteset (spr_large_wooden_farmhouse_01b_snow, 		"src/gfx/houses_old/large_wooden_farmhouse_01/building_b.png") 			{template_house_80(1,82)}

spriteset (spr_large_wooden_farmhouse_01c, 				"src/gfx/houses_old/large_wooden_farmhouse_01/building_c.png") 			{template_house_80(1,1)}
spriteset (spr_large_wooden_farmhouse_01c_snow, 		"src/gfx/houses_old/large_wooden_farmhouse_01/building_c.png") 			{template_house_80(1,82)}

spriteset (spr_large_wooden_farmhouse_01d, 				"src/gfx/houses_old/large_wooden_farmhouse_01/building_d.png") 			{template_house_80(1,1)}
spriteset (spr_large_wooden_farmhouse_01d_snow, 		"src/gfx/houses_old/large_wooden_farmhouse_01/building_d.png") 			{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_large_wooden_farmhouse_01a {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_large_wooden_farmhouse_01a (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_large_wooden_farmhouse_01a_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_large_wooden_farmhouse_01a_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_large_wooden_farmhouse_01b {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_large_wooden_farmhouse_01b (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_large_wooden_farmhouse_01b_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_large_wooden_farmhouse_01b_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_large_wooden_farmhouse_01c {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_large_wooden_farmhouse_01c (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_large_wooden_farmhouse_01c_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_large_wooden_farmhouse_01c_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_large_wooden_farmhouse_01d {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_large_wooden_farmhouse_01d (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_large_wooden_farmhouse_01d_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_large_wooden_farmhouse_01d_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}


// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_large_wooden_farmhouse_01a,terrain_type) {
	TILETYPE_SNOW: sprlay_large_wooden_farmhouse_01a_snow;
	sprlay_large_wooden_farmhouse_01a;
}

switch(FEAT_HOUSES, SELF, switch_large_wooden_farmhouse_01b,terrain_type) {
	TILETYPE_SNOW: sprlay_large_wooden_farmhouse_01b_snow;
	sprlay_large_wooden_farmhouse_01b;
}

switch(FEAT_HOUSES, SELF, switch_large_wooden_farmhouse_01c,terrain_type) {
	TILETYPE_SNOW: sprlay_large_wooden_farmhouse_01c_snow;
	sprlay_large_wooden_farmhouse_01c;
}

switch(FEAT_HOUSES, SELF, switch_large_wooden_farmhouse_01d,terrain_type) {
	TILETYPE_SNOW: sprlay_large_wooden_farmhouse_01d_snow;
	sprlay_large_wooden_farmhouse_01d;
}

// Selection of sprites
random_switch (FEAT_HOUSES, SELF, switch_large_wooden_farmhouse_01_sprites_any) {
	1: switch_large_wooden_farmhouse_01b;		// Any
	1: switch_large_wooden_farmhouse_01d;		// Any
}

random_switch (FEAT_HOUSES, SELF, switch_large_wooden_farmhouse_01_sprites_SESW) {
	1: switch_large_wooden_farmhouse_01a;		// SE
	1: switch_large_wooden_farmhouse_01c;		// SW
}

switch (FEAT_HOUSES, SELF, switch_large_wooden_farmhouse_01_sprites, SpriteDirections() ) {
	1: switch_large_wooden_farmhouse_01a; 
	2: switch_large_wooden_farmhouse_01c;
	3: switch_large_wooden_farmhouse_01_sprites_SESW;
	default: switch_large_wooden_farmhouse_01_sprites_any;
}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_large_wooden_farmhouse_01_con_check, 
	HouseOfficeGap() 			// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
) {return;}	

item(FEAT_HOUSES, item_large_wooden_farmhouse_01, 25, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_LARGE_WOODEN_FARMHOUSE);
		population: 				30;										// Agreed to JPS
		accepted_cargos: 			[[PASS, 3],[MAIL, 1],[GOOD, 3]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1700,1950];							// Agreed to JPS
		minimum_lifetime: 			2;										
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										//TOWNZONE_INNER_SUBURB,	// 3
										//TOWNZONE_OUTER_SUBURB		// 2
										TOWNZONE_OUTSKIRT,			// 1
										TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				0;
		
		}
	graphics {
		default: 					switch_large_wooden_farmhouse_01_sprites;
		construction_check: 		switch_large_wooden_farmhouse_01_con_check;
		cargo_production: 			func_produce(1,1);						// 
		//colour: 					rand_recolor_wooden_townhouses;
	}
}

// End large_wooden_farmhouse_01
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/houses_old/old_villa_01.pnml" 1
// Begin old_villa_01

// Buildings
spriteset (spr_old_villa_01, 				"src/gfx/houses_old/old_villa_01/building.png") 			{template_house_80(1,1)}
spriteset (spr_old_villa_01_snow, 			"src/gfx/houses_old/old_villa_01/building.png") 			{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_old_villa_01 {
	ground {
		sprite: spr_ground_grass (3);
	}
	building {
		sprite: spr_old_villa_01 (3);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_old_villa_01_snow {
	ground {
		sprite: spr_ground_snow (3);
	}
	building {
		sprite: spr_old_villa_01_snow (3);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}




// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_old_villa_01_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_old_villa_01_snow;
	sprlay_old_villa_01;
}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_old_villa_01_con_check, 
	HouseOfficeGap() 			// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
) {return;}	

item(FEAT_HOUSES, item_old_villa_01, 117, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_OLD_VILLA_01);
		population: 				12;										// Agreed to JPS
		accepted_cargos: 			[[PASS, 2],[MAIL, 1],[FOOD, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[0,0xFFFF];							// Agreed to JPS
		minimum_lifetime: 			2;										
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										//TOWNZONE_INNER_SUBURB,	// 3
										//TOWNZONE_OUTER_SUBURB		// 2
										//TOWNZONE_OUTSKIRT,		// 1
										TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				0;
		
		}
	graphics {
		default: 					switch_old_villa_01_sprites;
		construction_check: 		switch_old_villa_01_con_check;
		cargo_production: 			func_produce(1,1);						// 
		//colour: 					rand_recolor_wooden_townhouses;
	}
}

// End old_villa_01
# 1 "JPplusBuildings.pnml" 4

// APARTMENTS
// Buildings
# 1 "src/houses/apartments/fukuda/fukuda.pnml" 1
// Spritesets

spriteset (spr_fukuda_6L, 						"src/houses/apartments/fukuda/building.png") 					{template_house_100(1,1)}
spriteset (spr_fukuda_6L_snow, 					"src/houses/apartments/fukuda/building.png") 					{template_house_100(400,1)}

spriteset (spr_fukuda_7L, 						"src/houses/apartments/fukuda/building.png") 					{template_house_100(1,102)}
spriteset (spr_fukuda_7L_snow, 					"src/houses/apartments/fukuda/building.png") 					{template_house_100(400,102)}

spriteset (spr_fukuda_8L, 						"src/houses/apartments/fukuda/building.png") 					{template_house_100(1,203)}
spriteset (spr_fukuda_8L_snow, 					"src/houses/apartments/fukuda/building.png") 					{template_house_100(400,203)}

spriteset (spr_fukuda_9L, 						"src/houses/apartments/fukuda/building.png") 					{template_house_100(1,304)}
spriteset (spr_fukuda_9L_snow, 					"src/houses/apartments/fukuda/building.png") 					{template_house_100(400,304)}

spriteset (spr_fukuda_ground, 					"src/houses/apartments/fukuda/ground.png") 						{template_ground(1,1)}
spriteset (spr_fukuda_ground_snow, 				"src/houses/apartments/fukuda/ground.png") 						{template_ground(1,33)}


// Spritelayouts

// Fukuda 6 Storey

// Normal Sprites
spritelayout sprlay_fukuda_6L_norm {
	ground {
		sprite: spr_fukuda_ground(construction_state);
	}
	building {
		sprite: spr_fukuda_6L (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_fukuda_6L_snow {
	ground {
		sprite: spr_fukuda_ground_snow(construction_state);
	}
	building {
		sprite: spr_fukuda_6L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Fukuda 7 Storey

// Normal Sprites
spritelayout sprlay_fukuda_7L_norm {
	ground {
		sprite: spr_fukuda_ground(construction_state);
	}
	building {
		sprite: spr_fukuda_7L (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_fukuda_7L_snow {
	ground {
		sprite: spr_fukuda_ground_snow(construction_state);
	}
	building {
		sprite: spr_fukuda_7L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Fukuda 8 Storey

// Normal Sprites
spritelayout sprlay_fukuda_8L_norm {
	ground {
		sprite: spr_fukuda_ground(construction_state);
	}
	building {
		sprite: spr_fukuda_8L (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_fukuda_8L_snow {
	ground {
		sprite: spr_fukuda_ground_snow(construction_state);
	}
	building {
		sprite: spr_fukuda_8L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Fukuda 9 Storey

// Normal Sprites
spritelayout sprlay_fukuda_9L_norm {
	ground {
		sprite: spr_fukuda_ground(construction_state);
	}
	building {
		sprite: spr_fukuda_9L (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_fukuda_9L_snow {
	ground {
		sprite: spr_fukuda_ground_snow(construction_state);
	}
	building {
		sprite: spr_fukuda_9L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_fukuda_6L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_fukuda_6L_snow;
	sprlay_fukuda_6L_norm;
}

switch(FEAT_HOUSES, SELF, switch_fukuda_7L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_fukuda_7L_snow;
	sprlay_fukuda_7L_norm;
}

switch(FEAT_HOUSES, SELF, switch_fukuda_8L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_fukuda_8L_snow;
	sprlay_fukuda_8L_norm;
}

switch(FEAT_HOUSES, SELF, switch_fukuda_9L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_fukuda_9L_snow;
	sprlay_fukuda_9L_norm;
}
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/apartments/haraku/haraku.pnml" 1
// Spritesets

spriteset (spr_haraku_6L, 						"src/houses/apartments/haraku/building.png") 					{template_house_128(1,1)}
spriteset (spr_haraku_6L_snow, 					"src/houses/apartments/haraku/building.png") 					{template_house_128(400,1)}

spriteset (spr_haraku_7L, 						"src/houses/apartments/haraku/building.png") 					{template_house_128(1,130)}
spriteset (spr_haraku_7L_snow, 					"src/houses/apartments/haraku/building.png") 					{template_house_128(400,130)}

spriteset (spr_haraku_8L, 						"src/houses/apartments/haraku/building.png") 					{template_house_128(1,259)}
spriteset (spr_haraku_8L_snow, 					"src/houses/apartments/haraku/building.png") 					{template_house_128(400,259)}

spriteset (spr_haraku_9L, 						"src/houses/apartments/haraku/building.png") 					{template_house_128(1,388)}
spriteset (spr_haraku_9L_snow, 					"src/houses/apartments/haraku/building.png") 					{template_house_128(400,388)}

spriteset (spr_haraku_ground, 					"src/houses/apartments/haraku/ground.png") 						{template_ground(1,1)}
spriteset (spr_haraku_ground_snow, 				"src/houses/apartments/haraku/ground.png") 						{template_ground(1,33)}


// Spritelayouts

// Haraku 6 Storey

// Normal Sprites
spritelayout sprlay_haraku_6L_norm {
	ground {
		sprite: spr_haraku_ground(construction_state);
	}
	building {
		sprite: spr_haraku_6L (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_haraku_6L_snow {
	ground {
		sprite: spr_haraku_ground_snow(construction_state);
	}
	building {
		sprite: spr_haraku_6L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Haraku 7 Storey

// Normal Sprites
spritelayout sprlay_haraku_7L_norm {
	ground {
		sprite: spr_haraku_ground(construction_state);
	}
	building {
		sprite: spr_haraku_7L (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_haraku_7L_snow {
	ground {
		sprite: spr_haraku_ground_snow(construction_state);
	}
	building {
		sprite: spr_haraku_7L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Haraku 8 Storey

// Normal Sprites
spritelayout sprlay_haraku_8L_norm {
	ground {
		sprite: spr_haraku_ground(construction_state);
	}
	building {
		sprite: spr_haraku_8L (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_haraku_8L_snow {
	ground {
		sprite: spr_haraku_ground_snow(construction_state);
	}
	building {
		sprite: spr_haraku_8L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Haraku 9 Storey

// Normal Sprites
spritelayout sprlay_haraku_9L_norm {
	ground {
		sprite: spr_haraku_ground(construction_state);
	}
	building {
		sprite: spr_haraku_9L (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_haraku_9L_snow {
	ground {
		sprite: spr_haraku_ground_snow(construction_state);
	}
	building {
		sprite: spr_haraku_9L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_haraku_6L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_haraku_6L_snow;
	sprlay_haraku_6L_norm;
}

switch(FEAT_HOUSES, SELF, switch_haraku_7L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_haraku_7L_snow;
	sprlay_haraku_7L_norm;
}

switch(FEAT_HOUSES, SELF, switch_haraku_8L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_haraku_8L_snow;
	sprlay_haraku_8L_norm;
}

switch(FEAT_HOUSES, SELF, switch_haraku_9L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_haraku_9L_snow;
	sprlay_haraku_9L_norm;
}
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/apartments/hayashi/hayashi.pnml" 1
// Spritesets

spriteset (spr_hayashi_3L_norm, 					"src/houses/apartments/hayashi/building.png") 				{template_house_80(1,1)}
spriteset (spr_hayashi_3L_snow, 					"src/houses/apartments/hayashi/building.png") 				{template_house_80(400,1)}

spriteset (spr_hayashi_4L_norm, 					"src/houses/apartments/hayashi/building.png") 				{template_house_80(1,82)}
spriteset (spr_hayashi_4L_snow, 					"src/houses/apartments/hayashi/building.png") 				{template_house_80(400,82)}

spriteset (spr_hayashi_5L_norm, 					"src/houses/apartments/hayashi/building.png") 				{template_house_80(1,163)}
spriteset (spr_hayashi_5L_snow, 					"src/houses/apartments/hayashi/building.png") 				{template_house_80(400,163)}

spriteset (spr_hayashi_6L_norm, 					"src/houses/apartments/hayashi/building.png") 				{template_house_80(1,244)}
spriteset (spr_hayashi_6L_snow, 					"src/houses/apartments/hayashi/building.png") 				{template_house_80(400,244)}

spriteset (spr_hayashi_ground, 						"src/houses/apartments/hayashi/ground.png") 				{template_ground(1,1)}
spriteset (spr_hayashi_ground_snow, 				"src/houses/apartments/hayashi/ground.png") 				{template_ground(1,33)}

// Spritelayouts

// 3-story
// Norm Sprites
spritelayout sprlay_hayashi_3L_norm {
	ground {
		sprite: spr_hayashi_ground (construction_state);
	}
	building {
		sprite: spr_hayashi_3L_norm (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_hayashi_3L_snow {
	ground {
		sprite: spr_hayashi_ground_snow (construction_state);
	}
	building {
		sprite: spr_hayashi_3L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// 4-story
// Norm Sprites
spritelayout sprlay_hayashi_4L_norm {
	ground {
		sprite: spr_hayashi_ground (construction_state);
	}
	building {
		sprite: spr_hayashi_4L_norm (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_hayashi_4L_snow {
	ground {
		sprite: spr_hayashi_ground_snow (construction_state);
	}
	building {
		sprite: spr_hayashi_4L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// 5-story
// Norm Sprites
spritelayout sprlay_hayashi_5L_norm {
	ground {
		sprite: spr_hayashi_ground (construction_state);
	}
	building {
		sprite: spr_hayashi_5L_norm (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_hayashi_5L_snow {
	ground {
		sprite: spr_hayashi_ground_snow (construction_state);
	}
	building {
		sprite: spr_hayashi_5L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// 6-story
// Norm Sprites
spritelayout sprlay_hayashi_6L_norm {
	ground {
		sprite: spr_hayashi_ground (construction_state);
	}
	building {
		sprite: spr_hayashi_6L_norm (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_hayashi_6L_snow {
	ground {
		sprite: spr_hayashi_ground_snow (construction_state);
	}
	building {
		sprite: spr_hayashi_6L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Norm or Snow
switch(FEAT_HOUSES, SELF, switch_hayashi_3L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_hayashi_3L_snow;
	sprlay_hayashi_3L_norm;
}

switch(FEAT_HOUSES, SELF, switch_hayashi_4L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_hayashi_4L_snow;
	sprlay_hayashi_4L_norm;
}

switch(FEAT_HOUSES, SELF, switch_hayashi_5L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_hayashi_5L_snow;
	sprlay_hayashi_5L_norm;
}

switch(FEAT_HOUSES, SELF, switch_hayashi_6L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_hayashi_6L_snow;
	sprlay_hayashi_6L_norm;
}
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/apartments/hirata/hirata.pnml" 1
// Spritesets

spriteset (spr_hirata_a_3L_norm, 				"src/houses/apartments/hirata/building_a.png") 				{template_house_80(1,1)}
spriteset (spr_hirata_a_3L_snow, 				"src/houses/apartments/hirata/building_a.png") 				{template_house_80(400,1)}

spriteset (spr_hirata_a_4L_norm, 				"src/houses/apartments/hirata/building_a.png") 				{template_house_80(1,82)}
spriteset (spr_hirata_a_4L_snow, 				"src/houses/apartments/hirata/building_a.png") 				{template_house_80(400,82)}

spriteset (spr_hirata_a_5L_norm, 				"src/houses/apartments/hirata/building_a.png") 				{template_house_80(1,163)}
spriteset (spr_hirata_a_5L_snow, 				"src/houses/apartments/hirata/building_a.png") 				{template_house_80(400,163)}

spriteset (spr_hirata_a_6L_norm, 				"src/houses/apartments/hirata/building_a.png") 				{template_house_80(1,244)}
spriteset (spr_hirata_a_6L_snow, 				"src/houses/apartments/hirata/building_a.png") 				{template_house_80(400,244)}

spriteset (spr_hirata_b_3L_norm, 				"src/houses/apartments/hirata/building_b.png") 				{template_house_80(1,1)}
spriteset (spr_hirata_b_3L_snow, 				"src/houses/apartments/hirata/building_b.png") 				{template_house_80(400,1)}

spriteset (spr_hirata_b_4L_norm, 				"src/houses/apartments/hirata/building_b.png") 				{template_house_80(1,82)}
spriteset (spr_hirata_b_4L_snow, 				"src/houses/apartments/hirata/building_b.png") 				{template_house_80(400,82)}

spriteset (spr_hirata_b_5L_norm, 				"src/houses/apartments/hirata/building_b.png") 				{template_house_80(1,163)}
spriteset (spr_hirata_b_5L_snow, 				"src/houses/apartments/hirata/building_b.png") 				{template_house_80(400,163)}

spriteset (spr_hirata_b_6L_norm, 				"src/houses/apartments/hirata/building_b.png") 				{template_house_80(1,244)}
spriteset (spr_hirata_b_6L_snow, 				"src/houses/apartments/hirata/building_b.png") 				{template_house_80(400,244)}

spriteset (spr_hirata_a_ground, 				"src/houses/apartments/hirata/ground_a.png") 				{template_ground(1,1)}
spriteset (spr_hirata_a_ground_snow, 			"src/houses/apartments/hirata/ground_a.png") 				{template_ground(1,33)}

spriteset (spr_hirata_b_ground, 				"src/houses/apartments/hirata/ground_b.png") 				{template_ground(1,1)}
spriteset (spr_hirata_b_ground_snow, 			"src/houses/apartments/hirata/ground_b.png") 				{template_ground(1,33)}


// Spritelayouts

// 3-story
// Norm Sprites
spritelayout sprlay_hirata_a_3L_norm {
	ground {
		sprite: spr_hirata_a_ground (3);
	}
	building {
		sprite: spr_hirata_a_3L_norm (3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_hirata_a_3L_snow {
	ground {
		sprite: spr_hirata_a_ground_snow (3);
	}
	building {
		sprite: spr_hirata_a_3L_snow(3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// 4-story
// Norm Sprites
spritelayout sprlay_hirata_a_4L_norm {
	ground {
		sprite: spr_hirata_a_ground (3);
	}
	building {
		sprite: spr_hirata_a_4L_norm (3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_hirata_a_4L_snow {
	ground {
		sprite: spr_hirata_a_ground_snow (3);
	}
	building {
		sprite: spr_hirata_a_4L_snow(3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// 5-story
// Norm Sprites
spritelayout sprlay_hirata_a_5L_norm {
	ground {
		sprite: spr_hirata_a_ground (3);
	}
	building {
		sprite: spr_hirata_a_5L_norm (3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_hirata_a_5L_snow {
	ground {
		sprite: spr_hirata_a_ground_snow (3);
	}
	building {
		sprite: spr_hirata_a_5L_snow(3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// 6-story
// Norm Sprites
spritelayout sprlay_hirata_a_6L_norm {
	ground {
		sprite: spr_hirata_a_ground (3);
	}
	building {
		sprite: spr_hirata_a_6L_norm (3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_hirata_a_6L_snow {
	ground {
		sprite: spr_hirata_a_ground_snow (3);
	}
	building {
		sprite: spr_hirata_a_6L_snow(3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// 3-story
// Norm Sprites
spritelayout sprlay_hirata_b_3L_norm {
	ground {
		sprite: spr_hirata_b_ground (3);
	}
	building {
		sprite: spr_hirata_b_3L_norm (3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_hirata_b_3L_snow {
	ground {
		sprite: spr_hirata_b_ground_snow (3);
	}
	building {
		sprite: spr_hirata_b_3L_snow(3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// 4-story
// Norm Sprites
spritelayout sprlay_hirata_b_4L_norm {
	ground {
		sprite: spr_hirata_b_ground (3);
	}
	building {
		sprite: spr_hirata_b_4L_norm (3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_hirata_b_4L_snow {
	ground {
		sprite: spr_hirata_b_ground_snow (3);
	}
	building {
		sprite: spr_hirata_b_4L_snow(3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// 5-story
// Norm Sprites
spritelayout sprlay_hirata_b_5L_norm {
	ground {
		sprite: spr_hirata_b_ground (3);
	}
	building {
		sprite: spr_hirata_b_5L_norm (3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_hirata_b_5L_snow {
	ground {
		sprite: spr_hirata_b_ground_snow (3);
	}
	building {
		sprite: spr_hirata_b_5L_snow(3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// 6-story
// Norm Sprites
spritelayout sprlay_hirata_b_6L_norm {
	ground {
		sprite: spr_hirata_b_ground (3);
	}
	building {
		sprite: spr_hirata_b_6L_norm (3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_hirata_b_6L_snow {
	ground {
		sprite: spr_hirata_b_ground_snow (3);
	}
	building {
		sprite: spr_hirata_b_6L_snow(3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Norm or Snow
switch(FEAT_HOUSES, SELF, switch_hirata_a_3L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_hirata_a_3L_snow;
	sprlay_hirata_a_3L_norm;
}

switch(FEAT_HOUSES, SELF, switch_hirata_a_4L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_hirata_a_4L_snow;
	sprlay_hirata_a_4L_norm;
}

switch(FEAT_HOUSES, SELF, switch_hirata_a_5L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_hirata_a_5L_snow;
	sprlay_hirata_a_5L_norm;
}

switch(FEAT_HOUSES, SELF, switch_hirata_a_6L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_hirata_a_6L_snow;
	sprlay_hirata_a_6L_norm;
}

switch(FEAT_HOUSES, SELF, switch_hirata_b_3L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_hirata_b_3L_snow;
	sprlay_hirata_b_3L_norm;
}

switch(FEAT_HOUSES, SELF, switch_hirata_b_4L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_hirata_b_4L_snow;
	sprlay_hirata_b_4L_norm;
}

switch(FEAT_HOUSES, SELF, switch_hirata_b_5L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_hirata_b_5L_snow;
	sprlay_hirata_b_5L_norm;
}

switch(FEAT_HOUSES, SELF, switch_hirata_b_6L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_hirata_b_6L_snow;
	sprlay_hirata_b_6L_norm;
}

random_switch (FEAT_HOUSES, SELF, switch_hirata_3L_random) {
	1: switch_hirata_a_3L_snow;
	1: switch_hirata_b_3L_snow;
}

switch (FEAT_HOUSES, SELF, switch_hirata_3L_snow, SpriteDirections() ) {
	1: switch_hirata_a_3L_snow;
	2: switch_hirata_b_3L_snow;
	4: switch_hirata_a_3L_snow;
	5: switch_hirata_a_3L_snow;
	8: switch_hirata_b_3L_snow;
	10: switch_hirata_b_3L_snow;
	switch_hirata_3L_random;
}

random_switch (FEAT_HOUSES, SELF, switch_hirata_4L_random) {
	1: switch_hirata_a_4L_snow;
	1: switch_hirata_b_4L_snow;
}

switch (FEAT_HOUSES, SELF, switch_hirata_4L_snow, SpriteDirections() ) {
	1: switch_hirata_a_4L_snow;
	2: switch_hirata_b_4L_snow;
	4: switch_hirata_a_4L_snow;
	5: switch_hirata_a_4L_snow;
	8: switch_hirata_b_4L_snow;
	10: switch_hirata_b_4L_snow;
	switch_hirata_4L_random;
}

random_switch (FEAT_HOUSES, SELF, switch_hirata_5L_random) {
	1: switch_hirata_a_5L_snow;
	1: switch_hirata_b_5L_snow;
}

switch (FEAT_HOUSES, SELF, switch_hirata_5L_snow, SpriteDirections() ) {
	1: switch_hirata_a_5L_snow;
	2: switch_hirata_b_5L_snow;
	4: switch_hirata_a_5L_snow;
	5: switch_hirata_a_5L_snow;
	8: switch_hirata_b_5L_snow;
	10: switch_hirata_b_5L_snow;
	switch_hirata_5L_random;
}

random_switch (FEAT_HOUSES, SELF, switch_hirata_6L_random) {
	1: switch_hirata_a_6L_snow;
	1: switch_hirata_b_6L_snow;
}

switch (FEAT_HOUSES, SELF, switch_hirata_6L_snow, SpriteDirections() ) {
	1: switch_hirata_a_6L_snow;
	2: switch_hirata_b_6L_snow;
	4: switch_hirata_a_6L_snow;
	5: switch_hirata_a_6L_snow;
	8: switch_hirata_b_6L_snow;
	10: switch_hirata_b_6L_snow;
	switch_hirata_6L_random;
}
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/apartments/murakami/murakami.pnml" 1
// Spritesets

spriteset (spr_murakami_a_3L_norm, 				"src/houses/apartments/murakami/building_a.png") 				{template_house_100_wide(1,1)}
spriteset (spr_murakami_a_3L_snow, 				"src/houses/apartments/murakami/building_a.png") 				{template_house_100_wide(400,1)}

spriteset (spr_murakami_a_4L_norm, 				"src/houses/apartments/murakami/building_a.png") 				{template_house_100_wide(1,102)}
spriteset (spr_murakami_a_4L_snow, 				"src/houses/apartments/murakami/building_a.png") 				{template_house_100_wide(400,102)}

spriteset (spr_murakami_a_5L_norm, 				"src/houses/apartments/murakami/building_a.png") 				{template_house_100_wide(1,203)}
spriteset (spr_murakami_a_5L_snow, 				"src/houses/apartments/murakami/building_a.png") 				{template_house_100_wide(400,203)}

spriteset (spr_murakami_a_6L_norm, 				"src/houses/apartments/murakami/building_a.png") 				{template_house_100_wide(1,304)}
spriteset (spr_murakami_a_6L_snow, 				"src/houses/apartments/murakami/building_a.png") 				{template_house_100_wide(400,304)}

spriteset (spr_murakami_b_3L_norm, 				"src/houses/apartments/murakami/building_b.png") 				{template_house_100_wide(1,1)}
spriteset (spr_murakami_b_3L_snow, 				"src/houses/apartments/murakami/building_b.png") 				{template_house_100_wide(400,1)}

spriteset (spr_murakami_b_4L_norm, 				"src/houses/apartments/murakami/building_b.png") 				{template_house_100_wide(1,102)}
spriteset (spr_murakami_b_4L_snow, 				"src/houses/apartments/murakami/building_b.png") 				{template_house_100_wide(400,102)}

spriteset (spr_murakami_b_5L_norm, 				"src/houses/apartments/murakami/building_b.png") 				{template_house_100_wide(1,203)}
spriteset (spr_murakami_b_5L_snow, 				"src/houses/apartments/murakami/building_b.png") 				{template_house_100_wide(400,203)}

spriteset (spr_murakami_b_6L_norm, 				"src/houses/apartments/murakami/building_b.png") 				{template_house_100_wide(1,304)}
spriteset (spr_murakami_b_6L_snow, 				"src/houses/apartments/murakami/building_b.png") 				{template_house_100_wide(400,304)}

spriteset (spr_murakami_a_ground, 				"src/houses/apartments/murakami/ground_a.png") 					{template_ground(1,1)}
spriteset (spr_murakami_a_ground_snow, 			"src/houses/apartments/murakami/ground_a.png") 					{template_ground(1,33)}

spriteset (spr_murakami_b_ground, 				"src/houses/apartments/murakami/ground_b.png") 					{template_ground(1,1)}
spriteset (spr_murakami_b_ground_snow, 			"src/houses/apartments/murakami/ground_b.png") 					{template_ground(1,33)}


// Spritelayouts

// 3-story
// Norm Sprites
spritelayout sprlay_murakami_a_3L_norm {
	ground {
		sprite: spr_murakami_a_ground (construction_state);
	}
	building {
		sprite: spr_murakami_a_3L_norm (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_murakami_a_3L_snow {
	ground {
		sprite: spr_murakami_a_ground_snow (construction_state);
	}
	building {
		sprite: spr_murakami_a_3L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// 4-story
// Norm Sprites
spritelayout sprlay_murakami_a_4L_norm {
	ground {
		sprite: spr_murakami_a_ground (construction_state);
	}
	building {
		sprite: spr_murakami_a_4L_norm (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_murakami_a_4L_snow {
	ground {
		sprite: spr_murakami_a_ground_snow (construction_state);
	}
	building {
		sprite: spr_murakami_a_4L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// 5-story
// Norm Sprites
spritelayout sprlay_murakami_a_5L_norm {
	ground {
		sprite: spr_murakami_a_ground (construction_state);
	}
	building {
		sprite: spr_murakami_a_5L_norm (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_murakami_a_5L_snow {
	ground {
		sprite: spr_murakami_a_ground_snow (construction_state);
	}
	building {
		sprite: spr_murakami_a_5L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// 6-story
// Norm Sprites
spritelayout sprlay_murakami_a_6L_norm {
	ground {
		sprite: spr_murakami_a_ground (construction_state);
	}
	building {
		sprite: spr_murakami_a_6L_norm (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_murakami_a_6L_snow {
	ground {
		sprite: spr_murakami_a_ground_snow (construction_state);
	}
	building {
		sprite: spr_murakami_a_6L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// 3-story
// Norm Sprites
spritelayout sprlay_murakami_b_3L_norm {
	ground {
		sprite: spr_murakami_b_ground (construction_state);
	}
	building {
		sprite: spr_murakami_b_3L_norm (construction_state);
		yoffset: 2;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_murakami_b_3L_snow {
	ground {
		sprite: spr_murakami_b_ground_snow (construction_state);
	}
	building {
		sprite: spr_murakami_b_3L_snow(construction_state);
		yoffset: 2;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// 4-story
// Norm Sprites
spritelayout sprlay_murakami_b_4L_norm {
	ground {
		sprite: spr_murakami_b_ground (construction_state);
	}
	building {
		sprite: spr_murakami_b_4L_norm (construction_state);
		yoffset: 2;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_murakami_b_4L_snow {
	ground {
		sprite: spr_murakami_b_ground_snow (construction_state);
	}
	building {
		sprite: spr_murakami_b_4L_snow(construction_state);
		yoffset: 2;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// 5-story
// Norm Sprites
spritelayout sprlay_murakami_b_5L_norm {
	ground {
		sprite: spr_murakami_b_ground (construction_state);
	}
	building {
		sprite: spr_murakami_b_5L_norm (construction_state);
		yoffset: 2;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_murakami_b_5L_snow {
	ground {
		sprite: spr_murakami_b_ground_snow (construction_state);
	}
	building {
		sprite: spr_murakami_b_5L_snow(construction_state);
		yoffset: 2;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// 6-story
// Norm Sprites
spritelayout sprlay_murakami_b_6L_norm {
	ground {
		sprite: spr_murakami_b_ground (construction_state);
	}
	building {
		sprite: spr_murakami_b_6L_norm (construction_state);
		yoffset: 2;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_murakami_b_6L_snow {
	ground {
		sprite: spr_murakami_b_ground_snow (construction_state);
	}
	building {
		sprite: spr_murakami_b_6L_snow(construction_state);
		yoffset: 2;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Norm or Snow
switch(FEAT_HOUSES, SELF, switch_murakami_a_3L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_murakami_a_3L_snow;
	sprlay_murakami_a_3L_norm;
}

switch(FEAT_HOUSES, SELF, switch_murakami_a_4L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_murakami_a_4L_snow;
	sprlay_murakami_a_4L_norm;
}

switch(FEAT_HOUSES, SELF, switch_murakami_a_5L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_murakami_a_5L_snow;
	sprlay_murakami_a_5L_norm;
}

switch(FEAT_HOUSES, SELF, switch_murakami_a_6L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_murakami_a_6L_snow;
	sprlay_murakami_a_6L_norm;
}

switch(FEAT_HOUSES, SELF, switch_murakami_b_3L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_murakami_b_3L_snow;
	sprlay_murakami_b_3L_norm;
}

switch(FEAT_HOUSES, SELF, switch_murakami_b_4L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_murakami_b_4L_snow;
	sprlay_murakami_b_4L_norm;
}

switch(FEAT_HOUSES, SELF, switch_murakami_b_5L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_murakami_b_5L_snow;
	sprlay_murakami_b_5L_norm;
}

switch(FEAT_HOUSES, SELF, switch_murakami_b_6L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_murakami_b_6L_snow;
	sprlay_murakami_b_6L_norm;
}

random_switch (FEAT_HOUSES, SELF, switch_murakami_3L_random) {
	1: switch_murakami_a_3L_snow;
	1: switch_murakami_b_3L_snow;
}

switch (FEAT_HOUSES, SELF, switch_murakami_3L_snow, SpriteDirections() ) {
	1: switch_murakami_a_3L_snow;
	2: switch_murakami_b_3L_snow;
	4: switch_murakami_a_3L_snow;
	5: switch_murakami_a_3L_snow;
	8: switch_murakami_b_3L_snow;
	10: switch_murakami_b_3L_snow;
	switch_murakami_3L_random;
}

random_switch (FEAT_HOUSES, SELF, switch_murakami_4L_random) {
	1: switch_murakami_a_4L_snow;
	1: switch_murakami_b_4L_snow;
}

switch (FEAT_HOUSES, SELF, switch_murakami_4L_snow, SpriteDirections() ) {
	1: switch_murakami_a_4L_snow;
	2: switch_murakami_b_4L_snow;
	4: switch_murakami_a_4L_snow;
	5: switch_murakami_a_4L_snow;
	8: switch_murakami_b_4L_snow;
	10: switch_murakami_b_4L_snow;
	switch_murakami_4L_random;
}

random_switch (FEAT_HOUSES, SELF, switch_murakami_5L_random) {
	1: switch_murakami_a_5L_snow;
	1: switch_murakami_b_5L_snow;
}

switch (FEAT_HOUSES, SELF, switch_murakami_5L_snow, SpriteDirections() ) {
	1: switch_murakami_a_5L_snow;
	2: switch_murakami_b_5L_snow;
	4: switch_murakami_a_5L_snow;
	5: switch_murakami_a_5L_snow;
	8: switch_murakami_b_5L_snow;
	10: switch_murakami_b_5L_snow;
	switch_murakami_5L_random;
}

random_switch (FEAT_HOUSES, SELF, switch_murakami_6L_random) {
	1: switch_murakami_a_6L_snow;
	1: switch_murakami_b_6L_snow;
}

switch (FEAT_HOUSES, SELF, switch_murakami_6L_snow, SpriteDirections() ) {
	1: switch_murakami_a_6L_snow;
	2: switch_murakami_b_6L_snow;
	4: switch_murakami_a_6L_snow;
	5: switch_murakami_a_6L_snow;
	8: switch_murakami_b_6L_snow;
	10: switch_murakami_b_6L_snow;
	switch_murakami_6L_random;
}
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/apartments/kaneko/kaneko.pnml" 1
// Spritesets

spriteset (spr_kaneko_7L_norm, 				"src/houses/apartments/kaneko/building.png") 				{template_house_100_wide(1,1)}
spriteset (spr_kaneko_7L_snow, 				"src/houses/apartments/kaneko/building.png") 				{template_house_100_wide(400,1)}

spriteset (spr_kaneko_8L_norm, 				"src/houses/apartments/kaneko/building.png") 				{template_house_100_wide(1,102)}
spriteset (spr_kaneko_8L_snow, 				"src/houses/apartments/kaneko/building.png") 				{template_house_100_wide(400,102)}

spriteset (spr_kaneko_9L_norm, 				"src/houses/apartments/kaneko/building.png") 				{template_house_100_wide(1,203)}
spriteset (spr_kaneko_9L_snow, 				"src/houses/apartments/kaneko/building.png") 				{template_house_100_wide(400,203)}

spriteset (spr_kaneko_10L_norm, 			"src/houses/apartments/kaneko/building.png") 				{template_house_100_wide(1,304)}
spriteset (spr_kaneko_10L_snow, 			"src/houses/apartments/kaneko/building.png") 				{template_house_100_wide(400,304)}

spriteset (spr_kaneko_ground, 				"src/houses/apartments/kaneko/ground.png") 					{template_ground(1,1)}
spriteset (spr_kaneko_ground_snow, 			"src/houses/apartments/kaneko/ground.png") 					{template_ground(1,33)}

// Spritelayouts

// 7-story
// Norm Sprites
spritelayout sprlay_kaneko_7L_norm {
	ground {
		sprite: spr_kaneko_ground (construction_state);
	}
	building {
		sprite: spr_kaneko_7L_norm (construction_state);
		yoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_kaneko_7L_snow {
	ground {
		sprite: spr_kaneko_ground_snow (construction_state);
	}
	building {
		sprite: spr_kaneko_7L_snow(construction_state);
		yoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// 8-story
// Norm Sprites
spritelayout sprlay_kaneko_8L_norm {
	ground {
		sprite: spr_kaneko_ground (construction_state);
	}
	building {
		sprite: spr_kaneko_8L_norm (construction_state);
		yoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_kaneko_8L_snow {
	ground {
		sprite: spr_kaneko_ground_snow (construction_state);
	}
	building {
		sprite: spr_kaneko_8L_snow(construction_state);
		yoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// 9-story
// Norm Sprites
spritelayout sprlay_kaneko_9L_norm {
	ground {
		sprite: spr_kaneko_ground (construction_state);
	}
	building {
		sprite: spr_kaneko_9L_norm (construction_state);
		yoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_kaneko_9L_snow {
	ground {
		sprite: spr_kaneko_ground_snow (construction_state);
	}
	building {
		sprite: spr_kaneko_9L_snow(construction_state);
		yoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// 10-story
// Norm Sprites
spritelayout sprlay_kaneko_10L_norm {
	ground {
		sprite: spr_kaneko_ground (construction_state);
	}
	building {
		sprite: spr_kaneko_10L_norm (construction_state);
		yoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_kaneko_10L_snow {
	ground {
		sprite: spr_kaneko_ground_snow (construction_state);
	}
	building {
		sprite: spr_kaneko_10L_snow(construction_state);
		yoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Norm or Snow
switch(FEAT_HOUSES, SELF, switch_kaneko_7L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_kaneko_7L_snow;
	sprlay_kaneko_7L_norm;
}

switch(FEAT_HOUSES, SELF, switch_kaneko_8L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_kaneko_8L_snow;
	sprlay_kaneko_8L_norm;
}

switch(FEAT_HOUSES, SELF, switch_kaneko_9L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_kaneko_9L_snow;
	sprlay_kaneko_9L_norm;
}

switch(FEAT_HOUSES, SELF, switch_kaneko_10L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_kaneko_10L_snow;
	sprlay_kaneko_10L_norm;
}
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/apartments/kimura/kimura.pnml" 1
// Spritesets

spriteset (spr_kimura_a_3L_norm, 				"src/houses/apartments/kimura/building_a.png") 				{template_house_80(1,1)}
spriteset (spr_kimura_a_3L_snow, 				"src/houses/apartments/kimura/building_a.png") 				{template_house_80(400,1)}

spriteset (spr_kimura_a_4L_norm, 				"src/houses/apartments/kimura/building_a.png") 				{template_house_80(1,82)}
spriteset (spr_kimura_a_4L_snow, 				"src/houses/apartments/kimura/building_a.png") 				{template_house_80(400,82)}

spriteset (spr_kimura_a_5L_norm, 				"src/houses/apartments/kimura/building_a.png") 				{template_house_80(1,163)}
spriteset (spr_kimura_a_5L_snow, 				"src/houses/apartments/kimura/building_a.png") 				{template_house_80(400,163)}

spriteset (spr_kimura_a_6L_norm, 				"src/houses/apartments/kimura/building_a.png") 				{template_house_80(1,244)}
spriteset (spr_kimura_a_6L_snow, 				"src/houses/apartments/kimura/building_a.png") 				{template_house_80(400,244)}

spriteset (spr_kimura_b_3L_norm, 				"src/houses/apartments/kimura/building_b.png") 				{template_house_80(1,1)}
spriteset (spr_kimura_b_3L_snow, 				"src/houses/apartments/kimura/building_b.png") 				{template_house_80(400,1)}

spriteset (spr_kimura_b_4L_norm, 				"src/houses/apartments/kimura/building_b.png") 				{template_house_80(1,82)}
spriteset (spr_kimura_b_4L_snow, 				"src/houses/apartments/kimura/building_b.png") 				{template_house_80(400,82)}

spriteset (spr_kimura_b_5L_norm, 				"src/houses/apartments/kimura/building_b.png") 				{template_house_80(1,163)}
spriteset (spr_kimura_b_5L_snow, 				"src/houses/apartments/kimura/building_b.png") 				{template_house_80(400,163)}

spriteset (spr_kimura_b_6L_norm, 				"src/houses/apartments/kimura/building_b.png") 				{template_house_80(1,244)}
spriteset (spr_kimura_b_6L_snow, 				"src/houses/apartments/kimura/building_b.png") 				{template_house_80(400,244)}

spriteset (spr_kimura_a_ground, 				"src/houses/apartments/kimura/ground_a.png") 				{template_ground(1,1)}
spriteset (spr_kimura_a_ground_snow, 			"src/houses/apartments/kimura/ground_a.png") 				{template_ground(1,33)}

spriteset (spr_kimura_b_ground, 				"src/houses/apartments/kimura/ground_b.png") 				{template_ground(1,1)}
spriteset (spr_kimura_b_ground_snow, 			"src/houses/apartments/kimura/ground_b.png") 				{template_ground(1,33)}


// Spritelayouts

// 3-story
// Norm Sprites
spritelayout sprlay_kimura_a_3L_norm {
	ground {
		sprite: spr_kimura_a_ground (construction_state);
	}
	building {
		sprite: spr_kimura_a_3L_norm (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_kimura_a_3L_snow {
	ground {
		sprite: spr_kimura_a_ground_snow (construction_state);
	}
	building {
		sprite: spr_kimura_a_3L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// 4-story
// Norm Sprites
spritelayout sprlay_kimura_a_4L_norm {
	ground {
		sprite: spr_kimura_a_ground (construction_state);
	}
	building {
		sprite: spr_kimura_a_4L_norm (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_kimura_a_4L_snow {
	ground {
		sprite: spr_kimura_a_ground_snow (construction_state);
	}
	building {
		sprite: spr_kimura_a_4L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// 5-story
// Norm Sprites
spritelayout sprlay_kimura_a_5L_norm {
	ground {
		sprite: spr_kimura_a_ground (construction_state);
	}
	building {
		sprite: spr_kimura_a_5L_norm (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_kimura_a_5L_snow {
	ground {
		sprite: spr_kimura_a_ground_snow (construction_state);
	}
	building {
		sprite: spr_kimura_a_5L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// 6-story
// Norm Sprites
spritelayout sprlay_kimura_a_6L_norm {
	ground {
		sprite: spr_kimura_a_ground (construction_state);
	}
	building {
		sprite: spr_kimura_a_6L_norm (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_kimura_a_6L_snow {
	ground {
		sprite: spr_kimura_a_ground_snow (construction_state);
	}
	building {
		sprite: spr_kimura_a_6L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// 3-story
// Norm Sprites
spritelayout sprlay_kimura_b_3L_norm {
	ground {
		sprite: spr_kimura_b_ground (construction_state);
	}
	building {
		sprite: spr_kimura_b_3L_norm (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_kimura_b_3L_snow {
	ground {
		sprite: spr_kimura_b_ground_snow (construction_state);
	}
	building {
		sprite: spr_kimura_b_3L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// 4-story
// Norm Sprites
spritelayout sprlay_kimura_b_4L_norm {
	ground {
		sprite: spr_kimura_b_ground (construction_state);
	}
	building {
		sprite: spr_kimura_b_4L_norm (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_kimura_b_4L_snow {
	ground {
		sprite: spr_kimura_b_ground_snow (construction_state);
	}
	building {
		sprite: spr_kimura_b_4L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// 5-story
// Norm Sprites
spritelayout sprlay_kimura_b_5L_norm {
	ground {
		sprite: spr_kimura_b_ground (construction_state);
	}
	building {
		sprite: spr_kimura_b_5L_norm (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_kimura_b_5L_snow {
	ground {
		sprite: spr_kimura_b_ground_snow (construction_state);
	}
	building {
		sprite: spr_kimura_b_5L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// 6-story
// Norm Sprites
spritelayout sprlay_kimura_b_6L_norm {
	ground {
		sprite: spr_kimura_b_ground (construction_state);
	}
	building {
		sprite: spr_kimura_b_6L_norm (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_kimura_b_6L_snow {
	ground {
		sprite: spr_kimura_b_ground_snow (construction_state);
	}
	building {
		sprite: spr_kimura_b_6L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Norm or Snow
switch(FEAT_HOUSES, SELF, switch_kimura_a_3L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_kimura_a_3L_snow;
	sprlay_kimura_a_3L_norm;
}

switch(FEAT_HOUSES, SELF, switch_kimura_a_4L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_kimura_a_4L_snow;
	sprlay_kimura_a_4L_norm;
}

switch(FEAT_HOUSES, SELF, switch_kimura_a_5L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_kimura_a_5L_snow;
	sprlay_kimura_a_5L_norm;
}

switch(FEAT_HOUSES, SELF, switch_kimura_a_6L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_kimura_a_6L_snow;
	sprlay_kimura_a_6L_norm;
}

switch(FEAT_HOUSES, SELF, switch_kimura_b_3L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_kimura_b_3L_snow;
	sprlay_kimura_b_3L_norm;
}

switch(FEAT_HOUSES, SELF, switch_kimura_b_4L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_kimura_b_4L_snow;
	sprlay_kimura_b_4L_norm;
}

switch(FEAT_HOUSES, SELF, switch_kimura_b_5L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_kimura_b_5L_snow;
	sprlay_kimura_b_5L_norm;
}

switch(FEAT_HOUSES, SELF, switch_kimura_b_6L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_kimura_b_6L_snow;
	sprlay_kimura_b_6L_norm;
}

random_switch (FEAT_HOUSES, SELF, switch_kimura_3L_random) {
	1: switch_kimura_a_3L_snow;
	1: switch_kimura_b_3L_snow;
}

switch (FEAT_HOUSES, SELF, switch_kimura_3L_snow, SpriteDirections() ) {
	1: switch_kimura_a_3L_snow;
	2: switch_kimura_b_3L_snow;
	4: switch_kimura_a_3L_snow;
	5: switch_kimura_a_3L_snow;
	8: switch_kimura_b_3L_snow;
	10: switch_kimura_b_3L_snow;
	switch_kimura_3L_random;
}

random_switch (FEAT_HOUSES, SELF, switch_kimura_4L_random) {
	1: switch_kimura_a_4L_snow;
	1: switch_kimura_b_4L_snow;
}

switch (FEAT_HOUSES, SELF, switch_kimura_4L_snow, SpriteDirections() ) {
	1: switch_kimura_a_4L_snow;
	2: switch_kimura_b_4L_snow;
	4: switch_kimura_a_4L_snow;
	5: switch_kimura_a_4L_snow;
	8: switch_kimura_b_4L_snow;
	10: switch_kimura_b_4L_snow;
	switch_kimura_4L_random;
}

random_switch (FEAT_HOUSES, SELF, switch_kimura_5L_random) {
	1: switch_kimura_a_5L_snow;
	1: switch_kimura_b_5L_snow;
}

switch (FEAT_HOUSES, SELF, switch_kimura_5L_snow, SpriteDirections() ) {
	1: switch_kimura_a_5L_snow;
	2: switch_kimura_b_5L_snow;
	4: switch_kimura_a_5L_snow;
	5: switch_kimura_a_5L_snow;
	8: switch_kimura_b_5L_snow;
	10: switch_kimura_b_5L_snow;
	switch_kimura_5L_random;
}

random_switch (FEAT_HOUSES, SELF, switch_kimura_6L_random) {
	1: switch_kimura_a_6L_snow;
	1: switch_kimura_b_6L_snow;
}

switch (FEAT_HOUSES, SELF, switch_kimura_6L_snow, SpriteDirections() ) {
	1: switch_kimura_a_6L_snow;
	2: switch_kimura_b_6L_snow;
	4: switch_kimura_a_6L_snow;
	5: switch_kimura_a_6L_snow;
	8: switch_kimura_b_6L_snow;
	10: switch_kimura_b_6L_snow;
	switch_kimura_6L_random;
}
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/apartments/kono/kono.pnml" 1

// Kono Inspiration
// 1 Chome-18-6 Mori, Koto City, Tokyo 135-0001, Japan

// Spritesets

spriteset (spr_kono_6L, 						"src/houses/apartments/kono/building.png") 						{template_house_128(1,1)}
spriteset (spr_kono_6L_snow, 					"src/houses/apartments/kono/building.png") 						{template_house_128(400,1)}

spriteset (spr_kono_7L, 						"src/houses/apartments/kono/building.png") 						{template_house_128(1,130)}
spriteset (spr_kono_7L_snow, 					"src/houses/apartments/kono/building.png") 						{template_house_128(400,130)}

spriteset (spr_kono_8L, 						"src/houses/apartments/kono/building.png") 						{template_house_128(1,259)}
spriteset (spr_kono_8L_snow, 					"src/houses/apartments/kono/building.png") 						{template_house_128(400,259)}

spriteset (spr_kono_9L, 						"src/houses/apartments/kono/building.png") 						{template_house_128(1,388)}
spriteset (spr_kono_9L_snow, 					"src/houses/apartments/kono/building.png") 						{template_house_128(400,388)}

spriteset (spr_kono_ground, 					"src/houses/apartments/kono/ground.png") 						{template_ground(1,1)}
spriteset (spr_kono_ground_snow, 				"src/houses/apartments/kono/ground.png") 						{template_ground(1,33)}


// Spritelayouts

// Kono 6 Storey

// Normal Sprites
spritelayout sprlay_kono_6L_norm {
	ground {
		sprite: spr_kono_ground(construction_state);
	}
	building {
		sprite: spr_kono_6L (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_kono_6L_snow {
	ground {
		sprite: spr_kono_ground_snow(construction_state);
	}
	building {
		sprite: spr_kono_6L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Kono 7 Storey

// Normal Sprites
spritelayout sprlay_kono_7L_norm {
	ground {
		sprite: spr_kono_ground(construction_state);
	}
	building {
		sprite: spr_kono_7L (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_kono_7L_snow {
	ground {
		sprite: spr_kono_ground_snow(construction_state);
	}
	building {
		sprite: spr_kono_7L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Kono 8 Storey

// Normal Sprites
spritelayout sprlay_kono_8L_norm {
	ground {
		sprite: spr_kono_ground(construction_state);
	}
	building {
		sprite: spr_kono_8L (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_kono_8L_snow {
	ground {
		sprite: spr_kono_ground_snow(construction_state);
	}
	building {
		sprite: spr_kono_8L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Kono 9 Storey

// Normal Sprites
spritelayout sprlay_kono_9L_norm {
	ground {
		sprite: spr_kono_ground(construction_state);
	}
	building {
		sprite: spr_kono_9L (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_kono_9L_snow {
	ground {
		sprite: spr_kono_ground_snow(construction_state);
	}
	building {
		sprite: spr_kono_9L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_kono_6L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_kono_6L_snow;
	sprlay_kono_6L_norm;
}

switch(FEAT_HOUSES, SELF, switch_kono_7L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_kono_7L_snow;
	sprlay_kono_7L_norm;
}

switch(FEAT_HOUSES, SELF, switch_kono_8L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_kono_8L_snow;
	sprlay_kono_8L_norm;
}

switch(FEAT_HOUSES, SELF, switch_kono_9L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_kono_9L_snow;
	sprlay_kono_9L_norm;
}
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/apartments/osaka/osaka.pnml" 1
// Spritesets

// Building Sprites
spriteset (spr_build_osaka_a, 						"src/houses/apartments/osaka/building.png") 					{template_house_128(1,1)}
spriteset (spr_build_osaka_b, 						"src/houses/apartments/osaka/building.png") 					{template_house_128(1,130)}

spriteset (spr_build_osaka_a_snow, 					"src/houses/apartments/osaka/building.png") 					{template_house_128(400,1)}
spriteset (spr_build_osaka_b_snow, 					"src/houses/apartments/osaka/building.png") 					{template_house_128(400,130)}

// Ground Sprites
spriteset (spr_ground_osaka_a, 						"src/houses/apartments/osaka/ground.png") 						{template_ground(1,1)}
spriteset (spr_ground_osaka_a_snow, 				"src/houses/apartments/osaka/ground.png") 						{template_ground(1,33)}

spriteset (spr_ground_osaka_b, 						"src/houses/apartments/osaka/ground.png") 						{template_ground(261,1)}
spriteset (spr_ground_osaka_b_snow, 				"src/houses/apartments/osaka/ground.png") 						{template_ground(261,33)}

// Spritelayouts

// Normal Sprites
spritelayout sprlay_osaka_a {
	ground {
		sprite: spr_ground_osaka_a (construction_state);
	}
	building {
		sprite: spr_build_osaka_a (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_osaka_b {
	ground {
		sprite: spr_ground_osaka_b (construction_state);
	}
	building {
		sprite: spr_build_osaka_b (construction_state);
		yoffset:  2;
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_osaka_a_snow {
	ground {
		sprite: spr_ground_osaka_a_snow (construction_state);
	}
	building {
		sprite: spr_build_osaka_a_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_osaka_b_snow {
	ground {
		sprite: spr_ground_osaka_b_snow (construction_state);
	}
	building {
		sprite: spr_build_osaka_b_snow (construction_state);
		yoffset:  2;
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_osaka_a_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_osaka_a_snow;
	sprlay_osaka_a;
}
switch(FEAT_HOUSES, SELF, switch_osaka_b_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_osaka_b_snow;
	sprlay_osaka_b;
}
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/apartments/shibata/shibata.pnml" 1
// Spritesets

spriteset (spr_shibata_5L_norm, 					"src/houses/apartments/shibata/building.png") 				{template_house_80(1,1)}
spriteset (spr_shibata_5L_snow, 					"src/houses/apartments/shibata/building.png") 				{template_house_80(400,1)}

spriteset (spr_shibata_6L_norm, 					"src/houses/apartments/shibata/building.png") 				{template_house_80(1,82)}
spriteset (spr_shibata_6L_snow, 					"src/houses/apartments/shibata/building.png") 				{template_house_80(400,82)}

spriteset (spr_shibata_7L_norm, 					"src/houses/apartments/shibata/building.png") 				{template_house_80(1,163)}
spriteset (spr_shibata_7L_snow, 					"src/houses/apartments/shibata/building.png") 				{template_house_80(400,163)}

spriteset (spr_shibata_8L_norm, 					"src/houses/apartments/shibata/building.png") 				{template_house_80(1,244)}
spriteset (spr_shibata_8L_snow, 					"src/houses/apartments/shibata/building.png") 				{template_house_80(400,244)}

spriteset (spr_shibata_ground, 						"src/houses/apartments/shibata/ground.png") 					{template_ground(1,1)}
spriteset (spr_shibata_ground_snow, 				"src/houses/apartments/shibata/ground.png") 					{template_ground(1,33)}

// Spritelayouts

// 5-story
// Norm Sprites
spritelayout sprlay_shibata_5L_norm {
	ground {
		sprite: spr_shibata_ground (3);
	}
	building {
		sprite: spr_shibata_5L_norm (3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_shibata_5L_snow {
	ground {
		sprite: spr_shibata_ground_snow (3);
	}
	building {
		sprite: spr_shibata_5L_snow(3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// 6-story
// Norm Sprites
spritelayout sprlay_shibata_6L_norm {
	ground {
		sprite: spr_shibata_ground (3);
	}
	building {
		sprite: spr_shibata_6L_norm (3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_shibata_6L_snow {
	ground {
		sprite: spr_shibata_ground_snow (3);
	}
	building {
		sprite: spr_shibata_6L_snow(3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// 7-story
// Norm Sprites
spritelayout sprlay_shibata_7L_norm {
	ground {
		sprite: spr_shibata_ground (3);
	}
	building {
		sprite: spr_shibata_7L_norm (3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_shibata_7L_snow {
	ground {
		sprite: spr_shibata_ground_snow (3);
	}
	building {
		sprite: spr_shibata_7L_snow(3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// 8-story
// Norm Sprites
spritelayout sprlay_shibata_8L_norm {
	ground {
		sprite: spr_shibata_ground (3);
	}
	building {
		sprite: spr_shibata_8L_norm (3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_shibata_8L_snow {
	ground {
		sprite: spr_shibata_ground_snow (3);
	}
	building {
		sprite: spr_shibata_8L_snow(3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Norm or Snow
switch(FEAT_HOUSES, SELF, switch_shibata_5L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_shibata_5L_snow;
	sprlay_shibata_5L_norm;
}

switch(FEAT_HOUSES, SELF, switch_shibata_6L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_shibata_6L_snow;
	sprlay_shibata_6L_norm;
}

switch(FEAT_HOUSES, SELF, switch_shibata_7L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_shibata_7L_snow;
	sprlay_shibata_7L_norm;
}

switch(FEAT_HOUSES, SELF, switch_shibata_8L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_shibata_8L_snow;
	sprlay_shibata_8L_norm;
}
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/apartments/tetsui/tetsui.pnml" 1
// Spritesets

spriteset (spr_tetsui_5L_norm, 					"src/houses/apartments/tetsui/building.png") 				{template_house_80(1,1)}
spriteset (spr_tetsui_5L_snow, 					"src/houses/apartments/tetsui/building.png") 				{template_house_80(400,1)}

spriteset (spr_tetsui_6L_norm, 					"src/houses/apartments/tetsui/building.png") 				{template_house_80(1,82)}
spriteset (spr_tetsui_6L_snow, 					"src/houses/apartments/tetsui/building.png") 				{template_house_80(400,82)}

spriteset (spr_tetsui_7L_norm, 					"src/houses/apartments/tetsui/building.png") 				{template_house_80(1,163)}
spriteset (spr_tetsui_7L_snow, 					"src/houses/apartments/tetsui/building.png") 				{template_house_80(400,163)}

spriteset (spr_tetsui_8L_norm, 					"src/houses/apartments/tetsui/building.png") 				{template_house_80(1,244)}
spriteset (spr_tetsui_8L_snow, 					"src/houses/apartments/tetsui/building.png") 				{template_house_80(400,244)}

spriteset (spr_tetsui_ground, 					"src/houses/apartments/tetsui/ground.png") 					{template_ground(1,1)}
spriteset (spr_tetsui_ground_snow, 				"src/houses/apartments/tetsui/ground.png") 					{template_ground(1,33)}

// Spritelayouts

// 5-story
// Norm Sprites
spritelayout sprlay_tetsui_5L_norm {
	ground {
		sprite: spr_tetsui_ground (construction_state);
	}
	building {
		sprite: spr_tetsui_5L_norm (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_tetsui_5L_snow {
	ground {
		sprite: spr_tetsui_ground_snow (construction_state);
	}
	building {
		sprite: spr_tetsui_5L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// 6-story
// Norm Sprites
spritelayout sprlay_tetsui_6L_norm {
	ground {
		sprite: spr_tetsui_ground (construction_state);
	}
	building {
		sprite: spr_tetsui_6L_norm (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_tetsui_6L_snow {
	ground {
		sprite: spr_tetsui_ground_snow (construction_state);
	}
	building {
		sprite: spr_tetsui_6L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// 7-story
// Norm Sprites
spritelayout sprlay_tetsui_7L_norm {
	ground {
		sprite: spr_tetsui_ground (construction_state);
	}
	building {
		sprite: spr_tetsui_7L_norm (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_tetsui_7L_snow {
	ground {
		sprite: spr_tetsui_ground_snow (construction_state);
	}
	building {
		sprite: spr_tetsui_7L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// 8-story
// Norm Sprites
spritelayout sprlay_tetsui_8L_norm {
	ground {
		sprite: spr_tetsui_ground (construction_state);
	}
	building {
		sprite: spr_tetsui_8L_norm (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_tetsui_8L_snow {
	ground {
		sprite: spr_tetsui_ground_snow (construction_state);
	}
	building {
		sprite: spr_tetsui_8L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Norm or Snow
switch(FEAT_HOUSES, SELF, switch_tetsui_5L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_tetsui_5L_snow;
	sprlay_tetsui_5L_norm;
}

switch(FEAT_HOUSES, SELF, switch_tetsui_6L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_tetsui_6L_snow;
	sprlay_tetsui_6L_norm;
}

switch(FEAT_HOUSES, SELF, switch_tetsui_7L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_tetsui_7L_snow;
	sprlay_tetsui_7L_norm;
}

switch(FEAT_HOUSES, SELF, switch_tetsui_8L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_tetsui_8L_snow;
	sprlay_tetsui_8L_norm;
}
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/apartments/toki/toki.pnml" 1
// Spritesets

spriteset (spr_toki_5L, 						"src/houses/apartments/toki/building.png") 						{template_house_128(1,1)}
spriteset (spr_toki_5L_snow, 					"src/houses/apartments/toki/building.png") 						{template_house_128(400,1)}

spriteset (spr_toki_6L, 						"src/houses/apartments/toki/building.png") 						{template_house_128(1,130)}
spriteset (spr_toki_6L_snow, 					"src/houses/apartments/toki/building.png") 						{template_house_128(400,130)}

spriteset (spr_toki_7L, 						"src/houses/apartments/toki/building.png") 						{template_house_128(1,259)}
spriteset (spr_toki_7L_snow, 					"src/houses/apartments/toki/building.png") 						{template_house_128(400,259)}

spriteset (spr_toki_8L, 						"src/houses/apartments/toki/building.png") 						{template_house_128(1,388)}
spriteset (spr_toki_8L_snow, 					"src/houses/apartments/toki/building.png") 						{template_house_128(400,388)}

spriteset (spr_toki_ground, 					"src/houses/apartments/toki/ground.png") 						{template_ground(1,1)}
spriteset (spr_toki_ground_snow, 				"src/houses/apartments/toki/ground.png") 						{template_ground(1,33)}

// Spritelayouts

// Toki 5 Storey

// Normal Sprites
spritelayout sprlay_toki_5L_norm {
	ground {
		sprite: spr_toki_ground(construction_state);
	}
	building {
		sprite: spr_toki_5L (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_toki_5L_snow {
	ground {
		sprite: spr_toki_ground_snow(construction_state);
	}
	building {
		sprite: spr_toki_5L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Toki 6 Storey

// Normal Sprites
spritelayout sprlay_toki_6L_norm {
	ground {
		sprite: spr_toki_ground(construction_state);
	}
	building {
		sprite: spr_toki_6L (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_toki_6L_snow {
	ground {
		sprite: spr_toki_ground_snow(construction_state);
	}
	building {
		sprite: spr_toki_6L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Toki 7 Storey

// Normal Sprites
spritelayout sprlay_toki_7L_norm {
	ground {
		sprite: spr_toki_ground(construction_state);
	}
	building {
		sprite: spr_toki_7L (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_toki_7L_snow {
	ground {
		sprite: spr_toki_ground_snow(construction_state);
	}
	building {
		sprite: spr_toki_7L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Toki 8 Storey

// Normal Sprites
spritelayout sprlay_toki_8L_norm {
	ground {
		sprite: spr_toki_ground(construction_state);
	}
	building {
		sprite: spr_toki_8L (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_toki_8L_snow {
	ground {
		sprite: spr_toki_ground_snow(construction_state);
	}
	building {
		sprite: spr_toki_8L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_toki_5L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_toki_5L_snow;
	sprlay_toki_5L_norm;
}

switch(FEAT_HOUSES, SELF, switch_toki_6L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_toki_6L_snow;
	sprlay_toki_6L_norm;
}

switch(FEAT_HOUSES, SELF, switch_toki_7L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_toki_7L_snow;
	sprlay_toki_7L_norm;
}

switch(FEAT_HOUSES, SELF, switch_toki_8L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_toki_8L_snow;
	sprlay_toki_8L_norm;
}
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/apartments/tokyo/tokyo.pnml" 1
// Spritesets

// Building Sprites
spriteset (spr_build_tokyo_a, 						"src/houses/apartments/tokyo/building.png") 					{template_house_128(1,1)}
spriteset (spr_build_tokyo_b, 						"src/houses/apartments/tokyo/building.png") 					{template_house_128(1,130)}

spriteset (spr_build_tokyo_a_snow, 					"src/houses/apartments/tokyo/building.png") 					{template_house_128(400,1)}
spriteset (spr_build_tokyo_b_snow, 					"src/houses/apartments/tokyo/building.png") 					{template_house_128(400,130)}

// Ground Sprites
spriteset (spr_ground_tokyo_a, 						"src/houses/apartments/tokyo/ground.png") 						{template_ground(1,1)}
spriteset (spr_ground_tokyo_a_snow, 				"src/houses/apartments/tokyo/ground.png") 						{template_ground(261,1)}

spriteset (spr_ground_tokyo_b, 						"src/houses/apartments/tokyo/ground.png") 						{template_ground(1,33)}
spriteset (spr_ground_tokyo_b_snow, 				"src/houses/apartments/tokyo/ground.png") 						{template_ground(261,33)}

// Spritelayouts

// Normal Sprites
spritelayout sprlay_tokyo_a {
	ground {
		sprite: spr_ground_tokyo_a (construction_state);
	}
	building {
		sprite: spr_build_tokyo_a (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_tokyo_b {
	ground {
		sprite: spr_ground_tokyo_b (construction_state);
	}
	building {
		sprite: spr_build_tokyo_b (construction_state);
		yoffset:  2;
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_tokyo_a_snow {
	ground {
		sprite: spr_ground_tokyo_a_snow (construction_state);
	}
	building {
		sprite: spr_build_tokyo_a_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_tokyo_b_snow {
	ground {
		sprite: spr_ground_tokyo_b_snow (construction_state);
	}
	building {
		sprite: spr_build_tokyo_b_snow (construction_state);
		yoffset:  2;
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_tokyo_a_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_tokyo_a_snow;
	sprlay_tokyo_a;
}
switch(FEAT_HOUSES, SELF, switch_tokyo_b_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_tokyo_b_snow;
	sprlay_tokyo_b;
}

random_switch (FEAT_HOUSES, SELF, switch_tokyo_snow) {
	1: switch_tokyo_a_snow;
	1: switch_tokyo_b_snow;
}

random_switch (FEAT_HOUSES, SELF, switch_osaka_snow) {
	1: switch_osaka_a_snow;
	1: switch_osaka_b_snow;
}

random_switch (FEAT_HOUSES, SELF, switch_tokyosaka_random) {
	1: switch_tokyo_snow;
	1: switch_osaka_snow;
}

switch (FEAT_HOUSES, SELF, switch_tokyosaka_snow, SpriteDirections() ) {
	1: switch_osaka_snow;
	2: switch_tokyo_snow;
	4: switch_osaka_snow;
	5: switch_osaka_snow;
	8: switch_tokyo_snow;
	10: switch_tokyo_snow;
	switch_tokyosaka_random;
}
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/apartments/yano/yano.pnml" 1
// Spritesets

spriteset (spr_yano_norm, 						"src/houses/apartments/yano/building.png") 					{template_house_80(1,1)}
spriteset (spr_yano_snow, 						"src/houses/apartments/yano/building.png") 					{template_house_80(1,82)}

spriteset (spr_yano_ground, 					"src/houses/apartments/yano/ground.png") 					{template_ground(1,1)}
spriteset (spr_yano_ground_snow, 				"src/houses/apartments/yano/ground.png") 					{template_ground(1,33)}

// Spritelayouts

// Normal Sprites
spritelayout sprlay_yano_norm {
	ground {
		sprite: spr_yano_ground (construction_state);
	}
	building {
		sprite: spr_yano_norm (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_yano_snow {
	ground {
		sprite: spr_yano_ground_snow (construction_state);
	}
	building {
		sprite: spr_yano_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_yano_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_yano_snow;
	sprlay_yano_norm;
}
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/apartments/yanagi/yanagi.pnml" 1
// Spritesets

spriteset (spr_yanagi_5L_norm, 					"src/houses/apartments/yanagi/building.png") 				{template_house_80(1,1)}
spriteset (spr_yanagi_5L_snow, 					"src/houses/apartments/yanagi/building.png") 				{template_house_80(400,1)}

spriteset (spr_yanagi_6L_norm, 					"src/houses/apartments/yanagi/building.png") 				{template_house_80(1,82)}
spriteset (spr_yanagi_6L_snow, 					"src/houses/apartments/yanagi/building.png") 				{template_house_80(400,82)}

spriteset (spr_yanagi_7L_norm, 					"src/houses/apartments/yanagi/building.png") 				{template_house_80(1,163)}
spriteset (spr_yanagi_7L_snow, 					"src/houses/apartments/yanagi/building.png") 				{template_house_80(400,163)}

spriteset (spr_yanagi_8L_norm, 					"src/houses/apartments/yanagi/building.png") 				{template_house_80(1,244)}
spriteset (spr_yanagi_8L_snow, 					"src/houses/apartments/yanagi/building.png") 				{template_house_80(400,244)}

spriteset (spr_yanagi_ground, 					"src/houses/apartments/yanagi/ground.png") 					{template_ground(1,1)}
spriteset (spr_yanagi_ground_snow, 				"src/houses/apartments/yanagi/ground.png") 					{template_ground(1,33)}

// Spritelayouts

// 5-story
// Norm Sprites
spritelayout sprlay_yanagi_5L_norm {
	ground {
		sprite: spr_yanagi_ground (construction_state);
	}
	building {
		sprite: spr_yanagi_5L_norm (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_yanagi_5L_snow {
	ground {
		sprite: spr_yanagi_ground_snow (construction_state);
	}
	building {
		sprite: spr_yanagi_5L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// 6-story
// Norm Sprites
spritelayout sprlay_yanagi_6L_norm {
	ground {
		sprite: spr_yanagi_ground (construction_state);
	}
	building {
		sprite: spr_yanagi_6L_norm (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_yanagi_6L_snow {
	ground {
		sprite: spr_yanagi_ground_snow (construction_state);
	}
	building {
		sprite: spr_yanagi_6L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// 7-story
// Norm Sprites
spritelayout sprlay_yanagi_7L_norm {
	ground {
		sprite: spr_yanagi_ground (construction_state);
	}
	building {
		sprite: spr_yanagi_7L_norm (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_yanagi_7L_snow {
	ground {
		sprite: spr_yanagi_ground_snow (construction_state);
	}
	building {
		sprite: spr_yanagi_7L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// 8-story
// Norm Sprites
spritelayout sprlay_yanagi_8L_norm {
	ground {
		sprite: spr_yanagi_ground (construction_state);
	}
	building {
		sprite: spr_yanagi_8L_norm (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_yanagi_8L_snow {
	ground {
		sprite: spr_yanagi_ground_snow (construction_state);
	}
	building {
		sprite: spr_yanagi_8L_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Norm or Snow

switch(FEAT_HOUSES, SELF, switch_yanagi_5L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_yanagi_5L_snow;
	sprlay_yanagi_5L_norm;
}

switch(FEAT_HOUSES, SELF, switch_yanagi_6L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_yanagi_6L_snow;
	sprlay_yanagi_6L_norm;
}

switch(FEAT_HOUSES, SELF, switch_yanagi_7L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_yanagi_7L_snow;
	sprlay_yanagi_7L_norm;
}

switch(FEAT_HOUSES, SELF, switch_yanagi_8L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_yanagi_8L_snow;
	sprlay_yanagi_8L_norm;
}
# 1 "JPplusBuildings.pnml" 4

// House IDs
# 1 "src/houses/apartments/apartments_1945.pnml" 1
// Begin Apartments_1945

// Random selection of sprites
random_switch (FEAT_HOUSES, SELF, switch_apartments_1945_centre) {
	1: switch_hayashi_3L_snow;
	1: switch_hayashi_4L_snow;
	1: switch_hirata_3L_snow;
	1: switch_hirata_4L_snow;
	1: switch_kimura_3L_snow;
	1: switch_kimura_4L_snow;
	1: switch_murakami_3L_snow;
	1: switch_murakami_4L_snow;
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1945_centre_name) {
	dependent: switch_apartments_1945_centre;
	1: string(NAME_APARTMENTS_HAYASHI);
	1: string(NAME_APARTMENTS_HAYASHI);
	1: string(NAME_APARTMENTS_HIRATA);
	1: string(NAME_APARTMENTS_HIRATA);
	1: string(NAME_APARTMENTS_KIMURA);
	1: string(NAME_APARTMENTS_KIMURA);
	1: string(NAME_APARTMENTS_MURAKAMI);
	1: string(NAME_APARTMENTS_MURAKAMI);
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1945_inner) {
	1: switch_hayashi_3L_snow;
	1: switch_hirata_3L_snow;
	1: switch_kimura_3L_snow;
	1: switch_murakami_3L_snow;
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1945_inner_name) {
	dependent: switch_apartments_1945_inner;
	1: string(NAME_APARTMENTS_HAYASHI);
	1: string(NAME_APARTMENTS_HIRATA);
	1: string(NAME_APARTMENTS_KIMURA);
	1: string(NAME_APARTMENTS_MURAKAMI);
}

switch(FEAT_HOUSES, SELF, switch_apartments_1945_sprites, town_zone) {
	TOWNZONE_CENTRE: 		switch_apartments_1945_centre;
	//TOWNZONE_INNER_SUBURB:
	//TOWNZONE_OUTER_SUBURB: 
	switch_apartments_1945_inner;
}

switch(FEAT_HOUSES, SELF, switch_apartments_1945_name, town_zone) {
	TOWNZONE_CENTRE: 		switch_apartments_1945_centre_name;
	//TOWNZONE_INNER_SUBURB:  
	//TOWNZONE_OUTER_SUBURB: 
	switch_apartments_1945_inner_name;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_apartments_1945)
	{
		//1: PALETTE_CC_RED;			// too in your face
		2: PALETTE_CC_LIGHT_BLUE;
		//1: PALETTE_CC_PINK;			// too silly
		1: PALETTE_CC_DARK_BLUE;
		//1: PALETTE_CC_GREEN;			// nah
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_apartments_1945_con_check, 	
	FuncServicePASS() 				// Only build within the catchment area of a station which received passengers this month or last month
) {return;}	

item(FEAT_HOUSES, item_apartments_1945, 30, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						string(NAME_APARTMENTS_HARAKU);
		population: 				100;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1945,1949];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE,TOWNZONE_INNER_SUBURB,TOWNZONE_OUTER_SUBURB), ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
		building_class:				4;		
		}
	graphics {
		name:						switch_apartments_1945_name;
		default: 					switch_apartments_1945_sprites;
		construction_check: 		switch_apartments_1945_con_check;
		cargo_production: 			func_produce(13,4);
		colour: 					rand_recolor_apartments_1945;
	}
}

// End apartments_1945
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/apartments/apartments_1950.pnml" 1
// Begin Apartments_1950

// Random selection of sprites
random_switch (FEAT_HOUSES, SELF, switch_apartments_1950_centre) {
	1: switch_fukuda_6L_snow;
	1: switch_hayashi_5L_snow;
	1: switch_hayashi_4L_snow;
	1: switch_hirata_5L_snow;
	1: switch_hirata_4L_snow;
	1: switch_kimura_5L_snow;
	1: switch_kimura_4L_snow;
	1: switch_murakami_5L_snow;
	1: switch_murakami_4L_snow;
	1: switch_shibata_5L_snow;
	1: switch_tetsui_5L_snow;
	1: switch_toki_5L_snow;
	1: switch_yanagi_5L_snow;
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1950_centre_name) {
	dependent: switch_apartments_1950_centre;
	1: string(NAME_APARTMENTS_FUKUDA);
	1: string(NAME_APARTMENTS_HAYASHI);
	1: string(NAME_APARTMENTS_HAYASHI);
	1: string(NAME_APARTMENTS_HIRATA);
	1: string(NAME_APARTMENTS_HIRATA);
	1: string(NAME_APARTMENTS_KIMURA);
	1: string(NAME_APARTMENTS_KIMURA);
	1: string(NAME_APARTMENTS_MURAKAMI);
	1: string(NAME_APARTMENTS_MURAKAMI);
	1: string(NAME_APARTMENTS_SHIBATA);
	1: string(NAME_APARTMENTS_TETSUI);
	1: string(NAME_APARTMENTS_TOKI);
	1: string(NAME_APARTMENTS_YANAGI);
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1950_inner) {
	1: switch_hayashi_4L_snow;
	1: switch_hirata_4L_snow;
	1: switch_kimura_4L_snow;
	1: switch_murakami_4L_snow;
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1950_inner_name) {
	dependent: switch_apartments_1950_inner;
	1: string(NAME_APARTMENTS_HAYASHI);
	1: string(NAME_APARTMENTS_HIRATA);
	1: string(NAME_APARTMENTS_KIMURA);
	1: string(NAME_APARTMENTS_MURAKAMI);
}


random_switch (FEAT_HOUSES, SELF, switch_apartments_1950_outer) {
	1: switch_hayashi_3L_snow;
	1: switch_hirata_3L_snow;
	1: switch_kimura_3L_snow;
	1: switch_murakami_3L_snow;
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1950_outer_name) {
	dependent: switch_apartments_1950_outer;
	1: string(NAME_APARTMENTS_HAYASHI);
	1: string(NAME_APARTMENTS_HIRATA);
	1: string(NAME_APARTMENTS_KIMURA);
	1: string(NAME_APARTMENTS_MURAKAMI);
}

switch(FEAT_HOUSES, SELF, switch_apartments_1950_sprites, town_zone) {
	TOWNZONE_CENTRE: 		switch_apartments_1950_centre;
	TOWNZONE_INNER_SUBURB:  switch_apartments_1950_inner;
	switch_apartments_1950_outer;
}

switch(FEAT_HOUSES, SELF, switch_apartments_1950_name, town_zone) {
	TOWNZONE_CENTRE: 		switch_apartments_1950_centre_name;
	TOWNZONE_INNER_SUBURB:  switch_apartments_1950_inner_name;
	switch_apartments_1950_outer_name;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_apartments_1950)
	{
		//1: PALETTE_CC_RED;			// too in your face
		2: PALETTE_CC_LIGHT_BLUE;
		//1: PALETTE_CC_PINK;			// too silly
		1: PALETTE_CC_DARK_BLUE;
		//1: PALETTE_CC_GREEN;			// nah
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_apartments_1950_con_check, 	
	FuncServicePASS() 				// Only build within the catchment area of a station which received passengers this month or last month
) {return;}	

item(FEAT_HOUSES, item_apartments_1950, 45, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						string(NAME_APARTMENTS_HARAKU);
		population: 				150;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1950,1959];
		minimum_lifetime: 			5;
		availability_mask: 			[ALL_TOWNZONES & ~bitmask(TOWNZONE_EDGE), ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
		building_class:				4;		
		}
	graphics {
		name:						switch_apartments_1950_name;
		default: 					switch_apartments_1950_sprites;
		construction_check: 		switch_apartments_1950_con_check;
		cargo_production: 			func_produce(13,4);
		colour: 					rand_recolor_apartments_1950;
	}
}

// End apartments_1950
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/apartments/apartments_1960.pnml" 1
// Begin apartments_1960

// Random selection of sprites
random_switch (FEAT_HOUSES, SELF, switch_apartments_1960_centre) {
	1: switch_fukuda_7L_snow;
	1: switch_fukuda_6L_snow;
	1: switch_hayashi_6L_snow;
	1: switch_hayashi_5L_snow;
	1: switch_haraku_6L_snow;
	1: switch_hirata_6L_snow;
	1: switch_hirata_5L_snow;
	1: switch_kaneko_7L_snow;
	1: switch_kimura_6L_snow;
	1: switch_kimura_5L_snow;
	1: switch_kono_6L_snow;
	1: switch_murakami_6L_snow;
	1: switch_murakami_5L_snow;
	1: switch_shibata_6L_snow;
	1: switch_shibata_5L_snow;
	1: switch_tetsui_6L_snow;
	1: switch_tetsui_5L_snow;
	1: switch_toki_6L_snow;
	1: switch_toki_5L_snow;
	1: switch_tokyosaka_snow;
	1: switch_yanagi_6L_snow;
	1: switch_yanagi_5L_snow;
	1: switch_yano_snow;	
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1960_centre_name) {
	dependent: switch_apartments_1960_centre;
	1: string(NAME_APARTMENTS_FUKUDA);
	1: string(NAME_APARTMENTS_HAYASHI);
	1: string(NAME_APARTMENTS_HAYASHI);
	1: string(NAME_APARTMENTS_HARAKU);
	1: string(NAME_APARTMENTS_HIRATA);
	1: string(NAME_APARTMENTS_HIRATA);
	1: string(NAME_APARTMENTS_KANEKO);
	1: string(NAME_APARTMENTS_KIMURA);
	1: string(NAME_APARTMENTS_KIMURA);
	1: string(NAME_APARTMENTS_KONO);
	1: string(NAME_APARTMENTS_MURAKAMI);
	1: string(NAME_APARTMENTS_MURAKAMI);
	1: string(NAME_APARTMENTS_SHIBATA);
	1: string(NAME_APARTMENTS_SHIBATA);
	1: string(NAME_APARTMENTS_TETSUI);
	1: string(NAME_APARTMENTS_TETSUI);
	1: string(NAME_APARTMENTS_TOKI);
	1: string(NAME_APARTMENTS_TOKI);
	1: string(NAME_APARTMENTS_TOKYO);
	1: string(NAME_APARTMENTS_YANAGI);
	1: string(NAME_APARTMENTS_YANAGI);
	1: string(NAME_APARTMENTS_YANO);
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1960_inner) {
	1: switch_fukuda_6L_snow;
	1: switch_hayashi_5L_snow;
	1: switch_hayashi_4L_snow;
	1: switch_hirata_5L_snow;
	1: switch_hirata_4L_snow;
	1: switch_kimura_5L_snow;
	1: switch_kimura_4L_snow;
	1: switch_murakami_5L_snow;
	1: switch_murakami_4L_snow;
	1: switch_shibata_5L_snow;
	1: switch_tetsui_5L_snow;
	1: switch_toki_5L_snow;
	1: switch_tokyosaka_snow;
	1: switch_yanagi_5L_snow;
	1: switch_yano_snow;	
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1960_inner_name) {
	dependent: switch_apartments_1960_inner;
	1: string(NAME_APARTMENTS_FUKUDA);
	1: string(NAME_APARTMENTS_HAYASHI);
	1: string(NAME_APARTMENTS_HAYASHI);
	1: string(NAME_APARTMENTS_HIRATA);
	1: string(NAME_APARTMENTS_HIRATA);
	1: string(NAME_APARTMENTS_KIMURA);
	1: string(NAME_APARTMENTS_KIMURA);
	1: string(NAME_APARTMENTS_MURAKAMI);
	1: string(NAME_APARTMENTS_MURAKAMI);
	1: string(NAME_APARTMENTS_SHIBATA);
	1: string(NAME_APARTMENTS_TETSUI);
	1: string(NAME_APARTMENTS_TOKI);
	1: string(NAME_APARTMENTS_TOKYO);
	1: string(NAME_APARTMENTS_YANAGI);
	1: string(NAME_APARTMENTS_YANO);
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1960_outer) {
	1: switch_hayashi_4L_snow;
	1: switch_hirata_4L_snow;
	1: switch_kimura_4L_snow;
	1: switch_murakami_4L_snow;
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1960_outer_name) {
	dependent: switch_apartments_1960_outer;
	1: string(NAME_APARTMENTS_HAYASHI);
	1: string(NAME_APARTMENTS_HIRATA);
	1: string(NAME_APARTMENTS_KIMURA);
	1: string(NAME_APARTMENTS_MURAKAMI);
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1960_outskirt) {
	1: switch_hayashi_3L_snow;
	1: switch_hirata_3L_snow;
	1: switch_kimura_3L_snow;
	1: switch_murakami_3L_snow;
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1960_outskirt_name) {
	dependent: switch_apartments_1960_outskirt;
	1: string(NAME_APARTMENTS_HAYASHI);
	1: string(NAME_APARTMENTS_HIRATA);
	1: string(NAME_APARTMENTS_KIMURA);
	1: string(NAME_APARTMENTS_MURAKAMI);
}

switch(FEAT_HOUSES, SELF, switch_apartments_1960_sprites, town_zone) {
	TOWNZONE_CENTRE: 		switch_apartments_1960_centre;
	TOWNZONE_INNER_SUBURB:  switch_apartments_1960_inner;
	TOWNZONE_OUTER_SUBURB:	switch_apartments_1960_outer;
	switch_apartments_1960_outskirt;
}

switch(FEAT_HOUSES, SELF, switch_apartments_1960_name, town_zone) {
	TOWNZONE_CENTRE: 		switch_apartments_1960_centre_name;
	TOWNZONE_INNER_SUBURB:  switch_apartments_1960_inner_name;
	TOWNZONE_OUTER_SUBURB:	switch_apartments_1960_outer_name;
	switch_apartments_1960_outskirt_name;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_switch_recolor_apartments_1960)
	{
		//1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		//1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_apartments_1960_con_check, 	
	FuncServicePASS() 				// Only build within the catchment area of a station which received passengers this month or last month
	) {return;}	

item(FEAT_HOUSES, item_apartments_1960, 27, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						string(NAME_APARTMENTS_YANO);
		population: 				150;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1960,1969];
		minimum_lifetime: 			5;
		availability_mask: 			[ALL_TOWNZONES, ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
		building_class:				4;
				
		}
	graphics {
		name:						switch_apartments_1960_name;
		default: 					switch_apartments_1960_sprites;
		construction_check: 		switch_apartments_1960_con_check;
		cargo_production: 			func_produce(13,4);
		colour: 					rand_switch_recolor_apartments_1960;
	}
}
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/apartments/apartments_1970.pnml" 1
// Begin apartments_1970

// Random selection of sprites
random_switch (FEAT_HOUSES, SELF, switch_apartments_1970_centre) {
	1: switch_fukuda_9L_snow;
	1: switch_fukuda_8L_snow;
	1: switch_haraku_7L_snow;
	1: switch_haraku_6L_snow;
	1: switch_kaneko_8L_snow;
	1: switch_kaneko_7L_snow;
	1: switch_kono_7L_snow;
	1: switch_kono_6L_snow;
	1: switch_shibata_7L_snow;
	1: switch_shibata_6L_snow;
	1: switch_tetsui_7L_snow;
	1: switch_tetsui_6L_snow;
	1: switch_toki_7L_snow;
	1: switch_toki_6L_snow;
	1: switch_tokyosaka_snow;
	1: switch_yanagi_7L_snow;
	1: switch_yanagi_6L_snow;
	1: switch_yano_snow;
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1970_centre_name) {
	dependent: switch_apartments_1970_centre;
	1: string(NAME_APARTMENTS_FUKUDA);
	1: string(NAME_APARTMENTS_FUKUDA);
	1: string(NAME_APARTMENTS_HARAKU);
	1: string(NAME_APARTMENTS_HARAKU);
	1: string(NAME_APARTMENTS_KANEKO);
	1: string(NAME_APARTMENTS_KANEKO);
	1: string(NAME_APARTMENTS_KONO);
	1: string(NAME_APARTMENTS_KONO);
	1: string(NAME_APARTMENTS_SHIBATA);
	1: string(NAME_APARTMENTS_SHIBATA);
	1: string(NAME_APARTMENTS_TETSUI);
	1: string(NAME_APARTMENTS_TETSUI);
	1: string(NAME_APARTMENTS_TOKI);
	1: string(NAME_APARTMENTS_TOKI);
	1: string(NAME_APARTMENTS_TOKYO);
	1: string(NAME_APARTMENTS_YANAGI);
	1: string(NAME_APARTMENTS_YANAGI);
	1: string(NAME_APARTMENTS_YANO);	
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1970_inner) {
	1: switch_fukuda_7L_snow;
	1: switch_fukuda_6L_snow;
	1: switch_hayashi_6L_snow;
	1: switch_hayashi_5L_snow;
	1: switch_haraku_6L_snow;
	1: switch_hirata_6L_snow;
	1: switch_hirata_5L_snow;
	1: switch_kimura_6L_snow;
	1: switch_kimura_5L_snow;
	1: switch_kono_6L_snow;
	1: switch_murakami_6L_snow;
	1: switch_murakami_5L_snow;
	1: switch_shibata_6L_snow;
	1: switch_shibata_5L_snow;
	1: switch_tetsui_6L_snow;
	1: switch_tetsui_5L_snow;
	1: switch_toki_6L_snow;
	1: switch_toki_5L_snow;
	1: switch_tokyosaka_snow;
	1: switch_yanagi_6L_snow;
	1: switch_yanagi_5L_snow;
	1: switch_yano_snow;
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1970_inner_name) {
	dependent: switch_apartments_1970_inner;
	1: string(NAME_APARTMENTS_FUKUDA);
	1: string(NAME_APARTMENTS_FUKUDA);
	1: string(NAME_APARTMENTS_HAYASHI);
	1: string(NAME_APARTMENTS_HAYASHI);
	1: string(NAME_APARTMENTS_HARAKU);
	1: string(NAME_APARTMENTS_HIRATA);
	1: string(NAME_APARTMENTS_HIRATA);
	1: string(NAME_APARTMENTS_KIMURA);
	1: string(NAME_APARTMENTS_KIMURA);
	1: string(NAME_APARTMENTS_KONO);
	1: string(NAME_APARTMENTS_MURAKAMI);
	1: string(NAME_APARTMENTS_MURAKAMI);
	1: string(NAME_APARTMENTS_SHIBATA);
	1: string(NAME_APARTMENTS_SHIBATA);
	1: string(NAME_APARTMENTS_TETSUI);
	1: string(NAME_APARTMENTS_TETSUI);
	1: string(NAME_APARTMENTS_TOKI);
	1: string(NAME_APARTMENTS_TOKI);
	1: string(NAME_APARTMENTS_TOKYO);
	1: string(NAME_APARTMENTS_YANAGI);
	1: string(NAME_APARTMENTS_YANAGI);
	1: string(NAME_APARTMENTS_YANO);	
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1970_outer) {
	1: switch_fukuda_6L_snow;
	1: switch_hayashi_5L_snow;
	1: switch_hayashi_4L_snow;
	1: switch_hirata_5L_snow;
	1: switch_hirata_4L_snow;
	1: switch_kimura_5L_snow;
	1: switch_kimura_4L_snow;
	1: switch_murakami_5L_snow;
	1: switch_murakami_4L_snow;
	1: switch_shibata_5L_snow;
	1: switch_tetsui_5L_snow;
	1: switch_toki_5L_snow;
	1: switch_yanagi_5L_snow;
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1970_outer_name) {
	dependent: switch_apartments_1970_outer;
	1: string(NAME_APARTMENTS_FUKUDA);
	1: string(NAME_APARTMENTS_HAYASHI);
	1: string(NAME_APARTMENTS_HAYASHI);
	1: string(NAME_APARTMENTS_HIRATA);
	1: string(NAME_APARTMENTS_HIRATA);
	1: string(NAME_APARTMENTS_KIMURA);
	1: string(NAME_APARTMENTS_KIMURA);
	1: string(NAME_APARTMENTS_MURAKAMI);
	1: string(NAME_APARTMENTS_MURAKAMI);
	1: string(NAME_APARTMENTS_SHIBATA);
	1: string(NAME_APARTMENTS_TETSUI);
	1: string(NAME_APARTMENTS_TOKI);
	1: string(NAME_APARTMENTS_YANAGI);
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1970_outskirt) {
	1: switch_hayashi_4L_snow;
	1: switch_hayashi_3L_snow;
	1: switch_hirata_4L_snow;
	1: switch_hirata_3L_snow;
	1: switch_kimura_4L_snow;
	1: switch_kimura_3L_snow;
	1: switch_murakami_4L_snow;
	1: switch_murakami_3L_snow;
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1970_outskirt_name) {
	dependent: switch_apartments_1970_outskirt;
	1: string(NAME_APARTMENTS_HAYASHI);
	1: string(NAME_APARTMENTS_HAYASHI);
	1: string(NAME_APARTMENTS_HIRATA);
	1: string(NAME_APARTMENTS_HIRATA);
	1: string(NAME_APARTMENTS_KIMURA);
	1: string(NAME_APARTMENTS_KIMURA);
	1: string(NAME_APARTMENTS_MURAKAMI);
	1: string(NAME_APARTMENTS_MURAKAMI);
}

switch(FEAT_HOUSES, SELF, switch_apartments_1970_sprites, town_zone) {
	TOWNZONE_CENTRE: 		switch_apartments_1970_centre;
	TOWNZONE_INNER_SUBURB:  switch_apartments_1970_inner;
	TOWNZONE_OUTER_SUBURB:	switch_apartments_1970_outer;
	//TOWNZONE_OUTSKIRT:
	//TOWNZONE_EDGE:
	switch_apartments_1970_outskirt;
}

switch(FEAT_HOUSES, SELF, switch_apartments_1970_name, town_zone) {
	TOWNZONE_CENTRE: 		switch_apartments_1970_centre_name;
	TOWNZONE_INNER_SUBURB:  switch_apartments_1970_inner_name;
	TOWNZONE_OUTER_SUBURB:	switch_apartments_1970_outer_name;
	//TOWNZONE_OUTSKIRT:
	//TOWNZONE_EDGE:
	switch_apartments_1970_outskirt_name;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_switch_recolor_apartments_1970)
	{
		//1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		//1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_apartments_1970_con_check, 	
	FuncServicePASS() 				// Only build within the catchment area of a station which received passengers this month or last month
	) {return;}	

item(FEAT_HOUSES, item_apartments_1970, 46, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						string(NAME_APARTMENTS_YANO);
		population: 				150;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1970,1979];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE,TOWNZONE_INNER_SUBURB,TOWNZONE_OUTER_SUBURB, TOWNZONE_OUTSKIRT), ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
		building_class:				4;
				
		}
	graphics {
		name:						switch_apartments_1970_name;
		default: 					switch_apartments_1970_sprites;
		construction_check: 		switch_apartments_1970_con_check;
		cargo_production: 			func_produce(13,4);
		colour: 					rand_switch_recolor_apartments_1970;
	}
}
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/apartments/apartments_1980.pnml" 1
// Begin apartments_1980

// Random selection of sprites
random_switch (FEAT_HOUSES, SELF, switch_apartments_1980_centre) {
	1: switch_haraku_8L_snow;
	1: switch_haraku_7L_snow;
	1: switch_kaneko_9L_snow;
	1: switch_kaneko_8L_snow;
	1: switch_kono_8L_snow;
	1: switch_kono_7L_snow;
	1: switch_shibata_8L_snow;
	1: switch_shibata_7L_snow;
	1: switch_tetsui_8L_snow;
	1: switch_tetsui_7L_snow;
	1: switch_toki_8L_snow;
	1: switch_toki_7L_snow;
	1: switch_yanagi_8L_snow;
	1: switch_yanagi_7L_snow;
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1980_centre_name) {
	dependent: switch_apartments_1980_centre;
	1: string(NAME_APARTMENTS_HARAKU);
	1: string(NAME_APARTMENTS_HARAKU);
	1: string(NAME_APARTMENTS_KANEKO);
	1: string(NAME_APARTMENTS_KANEKO);
	1: string(NAME_APARTMENTS_KONO);
	1: string(NAME_APARTMENTS_KONO);
	1: string(NAME_APARTMENTS_SHIBATA);
	1: string(NAME_APARTMENTS_SHIBATA);
	1: string(NAME_APARTMENTS_TETSUI);
	1: string(NAME_APARTMENTS_TETSUI);
	1: string(NAME_APARTMENTS_TOKI);
	1: string(NAME_APARTMENTS_TOKI);
	1: string(NAME_APARTMENTS_YANAGI);
	1: string(NAME_APARTMENTS_YANAGI);
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1980_inner) {
	1: switch_haraku_7L_snow;
	1: switch_haraku_6L_snow;
	1: switch_kaneko_7L_snow;
	1: switch_kono_7L_snow;
	1: switch_kono_6L_snow;
	1: switch_shibata_7L_snow;
	1: switch_shibata_6L_snow;
	1: switch_tetsui_7L_snow;
	1: switch_tetsui_6L_snow;
	1: switch_toki_7L_snow;
	1: switch_toki_6L_snow;
	1: switch_tokyosaka_snow;
	1: switch_yanagi_7L_snow;
	1: switch_yanagi_6L_snow;
	1: switch_yano_snow;
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1980_inner_name) {
	dependent: switch_apartments_1980_inner;
	1: string(NAME_APARTMENTS_HARAKU);
	1: string(NAME_APARTMENTS_HARAKU);
	1: string(NAME_APARTMENTS_KANEKO);
	1: string(NAME_APARTMENTS_KONO);
	1: string(NAME_APARTMENTS_KONO);
	1: string(NAME_APARTMENTS_SHIBATA);
	1: string(NAME_APARTMENTS_SHIBATA);
	1: string(NAME_APARTMENTS_TETSUI);
	1: string(NAME_APARTMENTS_TETSUI);
	1: string(NAME_APARTMENTS_TOKI);
	1: string(NAME_APARTMENTS_TOKI);
	1: string(NAME_APARTMENTS_TOKYO);
	1: string(NAME_APARTMENTS_YANAGI);
	1: string(NAME_APARTMENTS_YANAGI);
	1: string(NAME_APARTMENTS_YANO);	
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1980_outer) {
	1: switch_fukuda_9L_snow;
	1: switch_fukuda_8L_snow;
	1: switch_hayashi_6L_snow;
	1: switch_hayashi_5L_snow;
	1: switch_hirata_6L_snow;
	1: switch_hirata_5L_snow;
	1: switch_kimura_6L_snow;
	1: switch_kimura_5L_snow;
	1: switch_murakami_6L_snow;
	1: switch_murakami_5L_snow;
	1: switch_shibata_6L_snow;
	1: switch_shibata_5L_snow;
	1: switch_tetsui_6L_snow;
	1: switch_tetsui_5L_snow;
	1: switch_toki_6L_snow;
	1: switch_toki_5L_snow;
	1: switch_tokyosaka_snow;
	1: switch_yanagi_6L_snow;
	1: switch_yanagi_5L_snow;
	1: switch_yano_snow;
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1980_outer_name) {
	dependent: switch_apartments_1980_outer;
	1: string(NAME_APARTMENTS_FUKUDA);
	1: string(NAME_APARTMENTS_FUKUDA);
	1: string(NAME_APARTMENTS_HAYASHI);
	1: string(NAME_APARTMENTS_HAYASHI);
	1: string(NAME_APARTMENTS_HIRATA);
	1: string(NAME_APARTMENTS_HIRATA);
	1: string(NAME_APARTMENTS_KIMURA);
	1: string(NAME_APARTMENTS_KIMURA);
	1: string(NAME_APARTMENTS_MURAKAMI);
	1: string(NAME_APARTMENTS_MURAKAMI);
	1: string(NAME_APARTMENTS_SHIBATA);
	1: string(NAME_APARTMENTS_SHIBATA);
	1: string(NAME_APARTMENTS_TETSUI);
	1: string(NAME_APARTMENTS_TETSUI);
	1: string(NAME_APARTMENTS_TOKI);
	1: string(NAME_APARTMENTS_TOKI);
	1: string(NAME_APARTMENTS_TOKYO);
	1: string(NAME_APARTMENTS_YANAGI);
	1: string(NAME_APARTMENTS_YANAGI);
	1: string(NAME_APARTMENTS_YANO);
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1980_outskirt) {
	1: switch_fukuda_7L_snow;
	1: switch_fukuda_6L_snow;
	1: switch_hayashi_5L_snow;
	1: switch_hayashi_4L_snow;
	1: switch_hirata_5L_snow;
	1: switch_hirata_4L_snow;
	1: switch_kimura_5L_snow;
	1: switch_kimura_4L_snow;
	1: switch_murakami_5L_snow;
	1: switch_murakami_4L_snow;
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1980_outskirt_name) {
	dependent: switch_apartments_1980_outskirt;
	1: string(NAME_APARTMENTS_FUKUDA);
	1: string(NAME_APARTMENTS_FUKUDA);
	1: string(NAME_APARTMENTS_HAYASHI);
	1: string(NAME_APARTMENTS_HAYASHI);
	1: string(NAME_APARTMENTS_HIRATA);
	1: string(NAME_APARTMENTS_HIRATA);
	1: string(NAME_APARTMENTS_KIMURA);
	1: string(NAME_APARTMENTS_KIMURA);
	1: string(NAME_APARTMENTS_MURAKAMI);
	1: string(NAME_APARTMENTS_MURAKAMI);
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1980_edge) {
	1: switch_hayashi_4L_snow;
	1: switch_hayashi_3L_snow;
	1: switch_hirata_4L_snow;
	1: switch_hirata_3L_snow;
	1: switch_kimura_4L_snow;
	1: switch_kimura_3L_snow;
	1: switch_murakami_4L_snow;
	1: switch_murakami_3L_snow;
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1980_edge_name) {
	dependent: switch_apartments_1980_edge;
	1: string(NAME_APARTMENTS_HAYASHI);
	1: string(NAME_APARTMENTS_HAYASHI);
	1: string(NAME_APARTMENTS_HIRATA);
	1: string(NAME_APARTMENTS_HIRATA);
	1: string(NAME_APARTMENTS_KIMURA);
	1: string(NAME_APARTMENTS_KIMURA);
	1: string(NAME_APARTMENTS_MURAKAMI);
	1: string(NAME_APARTMENTS_MURAKAMI);
}

switch(FEAT_HOUSES, SELF, switch_apartments_1980_sprites, town_zone) {
	TOWNZONE_CENTRE: 		switch_apartments_1980_centre;
	TOWNZONE_INNER_SUBURB:  switch_apartments_1980_inner;
	TOWNZONE_OUTER_SUBURB:	switch_apartments_1980_outer;
	TOWNZONE_OUTSKIRT:		switch_apartments_1980_outskirt;
	//TOWNZONE_EDGE:
	switch_apartments_1980_edge;
}

switch(FEAT_HOUSES, SELF, switch_apartments_1980_name, town_zone) {
	TOWNZONE_CENTRE: 		switch_apartments_1980_centre_name;
	TOWNZONE_INNER_SUBURB:  switch_apartments_1980_inner_name;
	TOWNZONE_OUTER_SUBURB:	switch_apartments_1980_outer_name;
	TOWNZONE_OUTSKIRT:		switch_apartments_1980_outskirt_name;
	//TOWNZONE_EDGE:
	switch_apartments_1980_edge_name;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_switch_recolor_apartments_1980)
	{
		//1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		//1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_apartments_1980_con_check, 	
	FuncServicePASS() 				// Only build within the catchment area of a station which received passengers this month or last month
	) {return;}	

item(FEAT_HOUSES, item_apartments_1980, 35, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						string(NAME_APARTMENTS_YANO);
		population: 				150;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1980,1989];
		minimum_lifetime: 			5;
		availability_mask: 			[ALL_TOWNZONES, ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
		building_class:				4;
				
		}
	graphics {
		name:						switch_apartments_1980_name;
		default: 					switch_apartments_1980_sprites;
		construction_check: 		switch_apartments_1980_con_check;
		cargo_production: 			func_produce(13,4);
		colour: 					rand_switch_recolor_apartments_1980;
	}
}
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/apartments/apartments_1990.pnml" 1
// Begin apartments_1990

// Random selection of sprites
random_switch (FEAT_HOUSES, SELF, switch_apartments_1990_centre) {
	1: switch_haraku_9L_snow;
	1: switch_haraku_8L_snow;
	1: switch_kaneko_10L_snow;
	1: switch_kaneko_9L_snow;
	1: switch_kono_9L_snow;
	1: switch_kono_8L_snow;
	1: switch_shibata_8L_snow;
	1: switch_tetsui_8L_snow;
	1: switch_toki_8L_snow;
	1: switch_yanagi_8L_snow;
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1990_centre_name) {
	dependent: switch_apartments_1990_centre;
	1: string(NAME_APARTMENTS_HARAKU);
	1: string(NAME_APARTMENTS_HARAKU);
	1: string(NAME_APARTMENTS_KANEKO);
	1: string(NAME_APARTMENTS_KANEKO);
	1: string(NAME_APARTMENTS_KONO);
	1: string(NAME_APARTMENTS_KONO);
	1: string(NAME_APARTMENTS_SHIBATA);
	1: string(NAME_APARTMENTS_TETSUI);
	1: string(NAME_APARTMENTS_TOKI);
	1: string(NAME_APARTMENTS_YANAGI);
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1990_inner) {
	1: switch_haraku_8L_snow;
	1: switch_haraku_7L_snow;
	1: switch_kaneko_8L_snow;
	1: switch_kaneko_7L_snow;
	1: switch_kono_8L_snow;
	1: switch_kono_7L_snow;
	1: switch_shibata_8L_snow;
	1: switch_shibata_7L_snow;
	1: switch_tetsui_8L_snow;
	1: switch_tetsui_7L_snow;
	1: switch_toki_8L_snow;
	1: switch_toki_7L_snow;
	1: switch_yanagi_8L_snow;
	1: switch_yanagi_7L_snow;
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1990_inner_name) {
	dependent: switch_apartments_1990_inner;
	1: string(NAME_APARTMENTS_HARAKU);
	1: string(NAME_APARTMENTS_HARAKU);
	1: string(NAME_APARTMENTS_KANEKO);
	1: string(NAME_APARTMENTS_KANEKO);
	1: string(NAME_APARTMENTS_KONO);
	1: string(NAME_APARTMENTS_KONO);
	1: string(NAME_APARTMENTS_SHIBATA);
	1: string(NAME_APARTMENTS_SHIBATA);
	1: string(NAME_APARTMENTS_TETSUI);
	1: string(NAME_APARTMENTS_TETSUI);
	1: string(NAME_APARTMENTS_TOKI);
	1: string(NAME_APARTMENTS_TOKI);
	1: string(NAME_APARTMENTS_YANAGI);
	1: string(NAME_APARTMENTS_YANAGI);
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1990_outer) {
	1: switch_haraku_7L_snow;
	1: switch_haraku_6L_snow;
	1: switch_kono_7L_snow;
	1: switch_kono_6L_snow;
	1: switch_shibata_7L_snow;
	1: switch_shibata_6L_snow;
	1: switch_tetsui_7L_snow;
	1: switch_tetsui_6L_snow;
	1: switch_toki_7L_snow;
	1: switch_toki_6L_snow;
	1: switch_tokyosaka_snow;
	1: switch_yanagi_7L_snow;
	1: switch_yanagi_6L_snow;
	1: switch_yano_snow;
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1990_outer_name) {
	dependent: switch_apartments_1990_outer;
	1: string(NAME_APARTMENTS_HARAKU);
	1: string(NAME_APARTMENTS_HARAKU);
	1: string(NAME_APARTMENTS_KONO);
	1: string(NAME_APARTMENTS_KONO);
	1: string(NAME_APARTMENTS_SHIBATA);
	1: string(NAME_APARTMENTS_SHIBATA);
	1: string(NAME_APARTMENTS_TETSUI);
	1: string(NAME_APARTMENTS_TETSUI);
	1: string(NAME_APARTMENTS_TOKI);
	1: string(NAME_APARTMENTS_TOKI);
	1: string(NAME_APARTMENTS_TOKYO);
	1: string(NAME_APARTMENTS_YANAGI);
	1: string(NAME_APARTMENTS_YANAGI);
	1: string(NAME_APARTMENTS_YANO);	
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1990_outskirt) {
	1: switch_hayashi_6L_snow;
	1: switch_hayashi_5L_snow;
	1: switch_hirata_6L_snow;
	1: switch_hirata_5L_snow;
	1: switch_kimura_6L_snow;
	1: switch_kimura_5L_snow;
	1: switch_murakami_6L_snow;
	1: switch_murakami_5L_snow;
	1: switch_shibata_6L_snow;
	1: switch_shibata_5L_snow;
	1: switch_tetsui_6L_snow;
	1: switch_tetsui_5L_snow;
	1: switch_toki_6L_snow;
	1: switch_toki_5L_snow;
	1: switch_tokyosaka_snow;
	1: switch_yanagi_6L_snow;
	1: switch_yanagi_5L_snow;
	1: switch_yano_snow;
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1990_outskirt_name) {
	dependent: switch_apartments_1990_outskirt;
	1: string(NAME_APARTMENTS_HAYASHI);
	1: string(NAME_APARTMENTS_HAYASHI);
	1: string(NAME_APARTMENTS_HIRATA);
	1: string(NAME_APARTMENTS_HIRATA);
	1: string(NAME_APARTMENTS_KIMURA);
	1: string(NAME_APARTMENTS_KIMURA);
	1: string(NAME_APARTMENTS_MURAKAMI);
	1: string(NAME_APARTMENTS_MURAKAMI);
	1: string(NAME_APARTMENTS_SHIBATA);
	1: string(NAME_APARTMENTS_SHIBATA);
	1: string(NAME_APARTMENTS_TETSUI);
	1: string(NAME_APARTMENTS_TETSUI);
	1: string(NAME_APARTMENTS_TOKI);
	1: string(NAME_APARTMENTS_TOKI);
	1: string(NAME_APARTMENTS_TOKYO);
	1: string(NAME_APARTMENTS_YANAGI);
	1: string(NAME_APARTMENTS_YANAGI);
	1: string(NAME_APARTMENTS_YANO);
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1990_edge) {
	1: switch_hayashi_4L_snow;
	1: switch_hayashi_3L_snow;
	1: switch_hirata_4L_snow;
	1: switch_hirata_3L_snow;
	1: switch_kimura_4L_snow;
	1: switch_kimura_3L_snow;
	1: switch_murakami_4L_snow;
	1: switch_murakami_3L_snow;
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_1990_edge_name) {
	dependent: switch_apartments_1990_edge;
	1: string(NAME_APARTMENTS_HAYASHI);
	1: string(NAME_APARTMENTS_HAYASHI);
	1: string(NAME_APARTMENTS_HIRATA);
	1: string(NAME_APARTMENTS_HIRATA);
	1: string(NAME_APARTMENTS_KIMURA);
	1: string(NAME_APARTMENTS_KIMURA);
	1: string(NAME_APARTMENTS_MURAKAMI);
	1: string(NAME_APARTMENTS_MURAKAMI);
}

switch(FEAT_HOUSES, SELF, switch_apartments_1990_sprites, town_zone) {
	TOWNZONE_CENTRE: 		switch_apartments_1990_centre;
	TOWNZONE_INNER_SUBURB:  switch_apartments_1990_inner;
	TOWNZONE_OUTER_SUBURB:	switch_apartments_1990_outer;
	TOWNZONE_OUTSKIRT:		switch_apartments_1990_outskirt;
	//TOWNZONE_EDGE:
	switch_apartments_1990_edge;
}

switch(FEAT_HOUSES, SELF, switch_apartments_1990_name, town_zone) {
	TOWNZONE_CENTRE: 		switch_apartments_1990_centre_name;
	TOWNZONE_INNER_SUBURB:  switch_apartments_1990_inner_name;
	TOWNZONE_OUTER_SUBURB:	switch_apartments_1990_outer_name;
	TOWNZONE_OUTSKIRT:		switch_apartments_1990_outskirt_name;
	//TOWNZONE_EDGE:
	switch_apartments_1990_edge_name;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_switch_recolor_apartments_1990)
	{
		//1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		//1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_apartments_1990_con_check, 	
	FuncServicePASS() 				// Only build within the catchment area of a station which received passengers this month or last month
	) {return;}	

item(FEAT_HOUSES, item_apartments_1990, 31, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						string(NAME_APARTMENTS_YANO);
		population: 				150;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1990,1999];
		minimum_lifetime: 			5;
		availability_mask: 			[ALL_TOWNZONES, ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
		building_class:				4;
				
		}
	graphics {
		name:						switch_apartments_1990_name;
		default: 					switch_apartments_1990_sprites;
		construction_check: 		switch_apartments_1990_con_check;
		cargo_production: 			func_produce(13,4);
		colour: 					rand_switch_recolor_apartments_1990;
	}
}
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/apartments/apartments_nakayama.pnml" 1
// Begin apartments_04

// Building Sprites
spriteset (spr_build_apartments_04_north, 				"src/houses/apartments/nakayama/building.png") 				{template_house_128(1,1)}
spriteset (spr_build_apartments_04_west, 				"src/houses/apartments/nakayama/building.png") 				{template_house_128(261,1)}

spriteset (spr_build_apartments_04_north_snow, 			"src/houses/apartments/nakayama/building.png") 				{template_house_128(1,130)}
spriteset (spr_build_apartments_04_west_snow, 			"src/houses/apartments/nakayama/building.png") 				{template_house_128(261,130)}
// Ground Sprites
spriteset (spr_ground_apartments_04, 					"src/houses/apartments/nakayama/ground.png") 				{template_house_128(1,1)}
spriteset (spr_ground_apartments_04_snow, 				"src/houses/apartments/nakayama/ground.png") 				{template_house_128(1,130)}

// Normal Sprites
spritelayout sprlay_apartments_04_north {
	ground {
		sprite: spr_ground_apartments_04(construction_state);
	}
	building {
		sprite: spr_build_apartments_04_north(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_apartments_04_west {
	ground {
		sprite: spr_ground_apartments_04(construction_state);
	}
	building {
		sprite: spr_build_apartments_04_west(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_apartments_04_snow_north {
	ground {
		sprite: spr_ground_apartments_04_snow(construction_state);
	}
	building {
		sprite: spr_build_apartments_04_north_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_apartments_04_snow_west {
	ground {
		sprite: spr_ground_apartments_04_snow(construction_state);
	}
	building {
		sprite: spr_build_apartments_04_west_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_apartments_04_north,terrain_type) {
	TILETYPE_SNOW: sprlay_apartments_04_snow_north;
	sprlay_apartments_04_north;
}
switch(FEAT_HOUSES, SELF, switch_apartments_04_west,terrain_type) {
	TILETYPE_SNOW: sprlay_apartments_04_snow_west;
	sprlay_apartments_04_west;
}


// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_apartments_04)
	{
		1: PALETTE_CC_RED;			// too in your face
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;			// too silly
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_apartments_04_con_check, 	
	FuncServicePASS() 				// Only build within the catchment area of a station which received passengers this month or last month
) {return;}	

item(FEAT_HOUSES, item_apartments_04, 56, HOUSE_SIZE_2X1){
	property {
		substitute: 				76; 													
		name: 						string(NAME_APARTMENTS_04);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED);
		population: 				100;
		accepted_cargos: 			[[PASS, 8],[MAIL, 4],[GOOD, 4]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1960,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE,TOWNZONE_INNER_SUBURB,TOWNZONE_OUTER_SUBURB), ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
		building_class:				4;	
		}
	graphics {
		graphics_north: 			switch_apartments_04_north;
		graphics_west: 				switch_apartments_04_west;
		construction_check: 		switch_apartments_04_con_check; 	
		cargo_production: 			func_produce(13,4);
		colour: 					rand_recolor_apartments_04;
	} 					
}

// End apartments_04
# 1 "JPplusBuildings.pnml" 4

// COMMERCIAL
// Buildings
# 1 "src/houses/commercial/takada/takada.pnml" 1
// Spritesets

spriteset (spr_takada_norm, 					"src/houses/commercial/takada/building.png") 				{template_house_200(1,1)}
spriteset (spr_takada_snow, 					"src/houses/commercial/takada/building.png") 				{template_house_200(400,1)}

spriteset (spr_takada_ground, 					"src/houses/commercial/takada/ground.png") 					{template_ground(1,1)}
spriteset (spr_takada_ground_snow, 				"src/houses/commercial/takada/ground.png") 					{template_ground(1,33)}

// Spritelayouts

// Normal Sprites
spritelayout sprlay_takada_norm {
	ground {
		sprite: spr_takada_ground (3);
	}
	building {
		sprite: spr_takada_norm (3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_takada_snow {
	ground {
		sprite: spr_takada_ground_snow (3);
	}
	building {
		sprite: spr_takada_snow(3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_takada_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_takada_snow;
	sprlay_takada_norm;
}
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/commercial/tbuilding/tbuilding.pnml" 1

// Spritesets

spriteset (spr_tbuilding_norm, 						"src/houses/commercial/tbuilding/building.png") 					{template_house_150_wide(1,1)}
spriteset (spr_tbuilding_snow, 						"src/houses/commercial/tbuilding/building.png") 					{template_house_150_wide(1,152)}

spriteset (spr_tbuilding_ground, 					"src/houses/commercial/tbuilding/ground.png") 						{template_ground(1,1)}
spriteset (spr_tbuilding_ground_snow, 				"src/houses/commercial/tbuilding/ground.png") 						{template_ground(1,33)}

// Spritelayouts

spritelayout sprlay_tbuilding_norm {
	ground {
		sprite: 		spr_tbuilding_ground(construction_state);
	}
	building {
		sprite: 		spr_tbuilding_norm(construction_state);
		//recolour_mode: 	RECOLOUR_REMAP; 
		//palette: 		PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_tbuilding_snow {
	ground {
		sprite: 		spr_tbuilding_ground_snow(construction_state);
	}
	building {
		sprite: 		spr_tbuilding_snow(construction_state);
		//recolour_mode: 	RECOLOUR_REMAP; 
		//palette: 		PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_tbuilding_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_tbuilding_snow;
	sprlay_tbuilding_norm;
}
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/commercial/xbuilding/xbuilding.pnml" 1

// Spritesets

spriteset (spr_xbuilding_norm, 						"src/houses/commercial/xbuilding/building.png") 					{template_house_128(1,1)}
spriteset (spr_xbuilding_snow, 					    "src/houses/commercial/xbuilding/building.png") 					{template_house_128(1,130)}

spriteset (spr_xbuilding_ground, 					"src/houses/commercial/xbuilding/ground.png") 						{template_ground(1,1)}
spriteset (spr_xbuilding_ground_snow, 				"src/houses/commercial/xbuilding/ground.png") 						{template_ground(1,33)}

// Spritelayouts

spritelayout sprlay_xbuilding_norm {
	ground {
		sprite: spr_xbuilding_ground(3);
	}
	building {
		sprite: spr_xbuilding_norm(3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_xbuilding_snow {
	ground {
		sprite: spr_xbuilding_ground_snow(3);
	}
	building {
		sprite: spr_xbuilding_snow(3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_xbuilding_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_xbuilding_snow;
	sprlay_xbuilding_norm;
}
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/commercial/yamada/yamada.pnml" 1
// Spritesets

spriteset (spr_yamada_11L, 						"src/houses/commercial/yamada/building.png") 					{template_house_128(1,1)}
spriteset (spr_yamada_11L_snow, 				"src/houses/commercial/yamada/building.png") 					{template_house_128(400,1)}

spriteset (spr_yamada_12L, 						"src/houses/commercial/yamada/building.png") 					{template_house_128(1,130)}
spriteset (spr_yamada_12L_snow, 				"src/houses/commercial/yamada/building.png") 					{template_house_128(400,130)}

spriteset (spr_yamada_13L, 						"src/houses/commercial/yamada/building.png") 					{template_house_128(1,259)}
spriteset (spr_yamada_13L_snow, 				"src/houses/commercial/yamada/building.png") 					{template_house_128(400,259)}

spriteset (spr_yamada_14L, 						"src/houses/commercial/yamada/building.png") 					{template_house_128(1,388)}
spriteset (spr_yamada_14L_snow, 				"src/houses/commercial/yamada/building.png") 					{template_house_128(400,388)}

spriteset (spr_yamada_ground, 					"src/houses/commercial/yamada/ground.png") 						{template_ground(1,1)}
spriteset (spr_yamada_ground_snow, 				"src/houses/commercial/yamada/ground.png") 						{template_ground(1,33)}

// Spritelayouts

// Yamada 11 Storey

// Normal Sprites
spritelayout sprlay_yamada_11L_norm {
	ground {
		sprite: spr_yamada_ground(3);
	}
	building {
		sprite: spr_yamada_11L (3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_yamada_11L_snow {
	ground {
		sprite: spr_yamada_ground_snow(3);
	}
	building {
		sprite: spr_yamada_11L_snow(3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Yamada 12 Storey

// Normal Sprites
spritelayout sprlay_yamada_12L_norm {
	ground {
		sprite: spr_yamada_ground(3);
	}
	building {
		sprite: spr_yamada_12L (3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_yamada_12L_snow {
	ground {
		sprite: spr_yamada_ground_snow(3);
	}
	building {
		sprite: spr_yamada_12L_snow(3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Yamada 13 Storey

// Normal Sprites
spritelayout sprlay_yamada_13L_norm {
	ground {
		sprite: spr_yamada_ground(3);
	}
	building {
		sprite: spr_yamada_13L (3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_yamada_13L_snow {
	ground {
		sprite: spr_yamada_ground_snow(3);
	}
	building {
		sprite: spr_yamada_13L_snow(3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Yamada 14 Storey

// Normal Sprites
spritelayout sprlay_yamada_14L_norm {
	ground {
		sprite: spr_yamada_ground(3);
	}
	building {
		sprite: spr_yamada_14L (3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_yamada_14L_snow {
	ground {
		sprite: spr_yamada_ground_snow(3);
	}
	building {
		sprite: spr_yamada_14L_snow(3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_yamada_11L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_yamada_11L_snow;
	sprlay_yamada_11L_norm;
}

switch(FEAT_HOUSES, SELF, switch_yamada_12L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_yamada_12L_snow;
	sprlay_yamada_12L_norm;
}

switch(FEAT_HOUSES, SELF, switch_yamada_13L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_yamada_13L_snow;
	sprlay_yamada_13L_norm;
}

switch(FEAT_HOUSES, SELF, switch_yamada_14L_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_yamada_14L_snow;
	sprlay_yamada_14L_norm;
}
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/commercial/ybuilding/ybuilding.pnml" 1
// Spritesets

spriteset (spr_ybuilding_norm, 					"src/houses/commercial/ybuilding/building.png") 				{template_house_150_wide(1,1)}
spriteset (spr_ybuilding_snow, 					"src/houses/commercial/ybuilding/building.png") 				{template_house_150_wide(400,1)}

spriteset (spr_ybuilding_ground, 				"src/houses/commercial/ybuilding/ground.png") 					{template_ground(1,1)}
spriteset (spr_ybuilding_ground_snow, 			"src/houses/commercial/ybuilding/ground.png") 					{template_ground(1,33)}

// Spritelayouts

// Normal Sprites
spritelayout sprlay_ybuilding_norm {
	ground {
		sprite: spr_ybuilding_ground (construction_state);
	}
	building {
		sprite: spr_ybuilding_norm (construction_state);
		xoffset: 2;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_ybuilding_snow {
	ground {
		sprite: spr_ybuilding_ground_snow (construction_state);
	}
	building {
		sprite: spr_ybuilding_snow(construction_state);
		xoffset: 2;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_ybuilding_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_ybuilding_snow;
	sprlay_ybuilding_norm;
}
# 1 "JPplusBuildings.pnml" 4

// House IDs
# 1 "src/houses/commercial/commercial_1970.pnml" 1
// Begin Commercial_1970

// Random selection of sprites
random_switch (FEAT_HOUSES, SELF, switch_commercial_1970_sprites) {
	1: switch_tbuilding_sprites;
	1: switch_xbuilding_sprites;
	1: switch_yamada_11L_snow;
	1: switch_yamada_12L_snow;
	1: switch_yamada_13L_snow;
	1: switch_yamada_14L_snow;
}

random_switch (FEAT_HOUSES, SELF, switch_commercial_1970_name) {
	dependent: switch_commercial_1970_sprites;
	1: string(NAME_TBUILDING);
	1: string(NAME_XBUILDING);
	1: string(NAME_YAMADA);
	1: string(NAME_YAMADA);
	1: string(NAME_YAMADA);
	1: string(NAME_YAMADA);
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_commercial_1970)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_commercial_1970_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	CommercialCargoes() &&			// Commerical Cargo Requirement as per parameter
	Class2PopCheck() &&				// Is there population to allow another Class 2?
	ClusterBuildingClass()			// Must be within two tiles of the same building class
) {return;}	

item(FEAT_HOUSES, item_commercial_1970, 39, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						string(NAME_XBUILDING);
		population: 				150;
		accepted_cargos: 			[[PASS, 4],[MAIL, 4],[GOOD, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				5;
		years_available: 			[1970,1989];
		minimum_lifetime: 			8;
		availability_mask: 			[ALL_TOWNZONES, bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class: 			2;
		}
	graphics {
		name:						switch_commercial_1970_name;
		default: 					switch_commercial_1970_sprites;
		construction_check: 		switch_commercial_1970_con_check; 	
		cargo_production: 			func_produce(13,4);
		colour: 					rand_recolor_commercial_1970;
	}
}

// End X-Building
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/commercial/commercial_1990.pnml" 1
// Begin Commercial_1990

// Random selection of sprites
random_switch (FEAT_HOUSES, SELF, switch_commercial_1990_sprites) {
	1: switch_takada_snow;
	1: switch_ybuilding_snow;
}

random_switch (FEAT_HOUSES, SELF, switch_commercial_1990_name) {
	dependent: switch_commercial_1990_sprites;
	1: string(NAME_TAKADA);
	1: string(NAME_YBUILDING);
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_commercial_1990)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_commercial_1990_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	CommercialCargoes() &&			// Commerical Cargo Requirement as per parameter
	Class2PopCheck() &&				// Is there population to allow another Class 2?
	ClusterBuildingClass()			// Must be within two tiles of the same building class
) {return;}	

item(FEAT_HOUSES, item_commercial_1990, 90, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						string(NAME_XBUILDING);
		population: 				150;
		accepted_cargos: 			[[PASS, 4],[MAIL, 4],[GOOD, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				5;
		years_available: 			[1990,1999];
		minimum_lifetime: 			8;
		availability_mask: 			[ALL_TOWNZONES, bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class: 			2;
		}
	graphics {
		name:						switch_commercial_1990_name;
		default: 					switch_commercial_1990_sprites;
		construction_check: 		switch_commercial_1990_con_check; 	
		cargo_production: 			func_produce(13,4);
		colour: 					rand_recolor_commercial_1990;
	}
}

// End X-Building
# 1 "JPplusBuildings.pnml" 4

// SHOPS AND OFFICES

// SHOPS
# 1 "src/houses/shops/convini_01.pnml" 1
// Begin convini_01

// Building Sprites
spriteset (spr_build_convini_01, 							"src/gfx/shops/convini_01/building.png") 					{template_house_80(1,1)}
spriteset (spr_build_convini_01_snow, 						"src/gfx/shops/convini_01/building.png") 					{template_house_80(1,82)}

// Ground Sprites
spriteset (spr_ground_convini_01, 							"src/gfx/shops/convini_01/ground.png") 						{template_ground(1,1)}
spriteset (spr_ground_convini_01_snow, 						"src/gfx/shops/convini_01/ground.png") 						{template_ground(1,33)}

// Normal Sprites
spritelayout sprlay_convini_01 {
	ground {
		sprite: spr_ground_convini_01 (construction_state);
	}
	building {
		sprite: spr_build_convini_01 (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_convini_01_snow {
	ground {
		sprite: spr_ground_convini_01_snow (construction_state);
	}
	building {
		sprite: spr_build_convini_01_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_convini_01,terrain_type) {
	TILETYPE_SNOW: sprlay_convini_01_snow;
	sprlay_convini_01;
}

// Recolouring

random_switch (FEAT_HOUSES, SELF, rand_recolor_convini_01)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
	}


// Construction Check
switch (FEAT_HOUSES, SELF, switch_convini_01_con_check, 
	HasRoadAdjacentSW() &&		// Must have road to the SW
	ThirtyTileGap()				// Can't appear within 30 tiles of another
) {return;}	

// Protection Check
switch (FEAT_HOUSES, SELF, switch_convini_01_pro_check, 
	FuncServicePASS() 	&&		// Must have PASS delivered
	(FuncServiceFOOD()	||		// Must have either FOOD delivered
	FuncServiceEOIL()	||		// or Edible Oil
	FuncServiceFISH()   )		// or Fish	
	) {return;}	

item(FEAT_HOUSES, item_convini_01, 95, HOUSE_SIZE_1X1){
	property {
		substitute: 				29; 													
		name: 						string(NAME_CONVINI_01);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED);		// Want flat land
		population: 				50;									// Agreed to JPS
		accepted_cargos: 			[
										[PASS, 4],[MAIL, 2],			// Of course
										[FOOD, 8],						// Food in general
										[JAVA ,8],						// Coffee
										[EOIL, 8],						// Oil for cooking
										[LVST, 8],						// Meat for restaurant
										[FISH, 8],						// It's a sushi restuarant!
									];							
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[1950,0xFFFF];	
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(
										TOWNZONE_INNER_SUBURB,
										TOWNZONE_OUTER_SUBURB,
										TOWNZONE_OUTSKIRT
										), 
									bitmask(
										CLIMATE_TEMPERATE, 
										CLIMATE_ARCTIC, 
										ABOVE_SNOWLINE
										)];
		//building_class:			2;	
		}
	graphics {
		default: 					switch_convini_01;
		construction_check:			switch_convini_01_con_check;
		protection:					switch_convini_01_pro_check;
		cargo_production: 			func_produce(5,3);
		colour: 					rand_recolor_convini_01;
	}
}

// End convini_01
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/shops/onsen_01.pnml" 1
// Begin onsen_01

// Building Sprites
spriteset (spr_build_onsen_01, 							"src/gfx/shops/onsen_01/building.png") 					{template_house_100_wide(1,1)}
spriteset (spr_build_onsen_01_snow, 					"src/gfx/shops/onsen_01/building.png") 					{template_house_100_wide(1,102)}

// Ground Sprites
spriteset (spr_ground_onsen_01, 						"src/gfx/shops/onsen_01/ground.png") 					{template_ground(1,1)}
spriteset (spr_ground_onsen_01_snow, 					"src/gfx/shops/onsen_01/ground.png") 					{template_ground(1,33)}

// Normal Sprites
spritelayout sprlay_onsen_01 {
	ground {
		sprite: spr_ground_onsen_01(construction_state);
	}
	building {
		sprite: spr_build_onsen_01(construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_onsen_01_snow {
	ground {
		sprite: spr_ground_onsen_01_snow(construction_state);
	}
	building {
		sprite: spr_build_onsen_01_snow(construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_onsen_01,terrain_type) {
	TILETYPE_SNOW: sprlay_onsen_01_snow;
	sprlay_onsen_01;
}

// Recolouring
/*
random_switch (FEAT_HOUSES, SELF, rand_recolor_onsen_01)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
	}
*/

// Construction Check
switch (FEAT_HOUSES, SELF, switch_onsen_01_con_check, 
	HasRoadAdjacentSW() &&		// Must have road to the SW
	ThirtyTileGap()				// Can't appear within 30 tiles of another
) {return;}	

// Protection Check
switch (FEAT_HOUSES, SELF, switch_onsen_01_pro_check, 
	FuncServicePASS() 	&&		// Must have PASS delivered
	(FuncServiceFOOD()	||		// Must have either FOOD delivered
	FuncServiceEOIL()	||		// or Edible Oil
	FuncServiceFISH()   )		// or Fish	
	) {return;}	

item(FEAT_HOUSES, item_onsen_01, 93, HOUSE_SIZE_1X1){
	property {
		substitute: 				29; 													
		name: 						string(NAME_ONSEN_01);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED);		// Want flat land
		population: 				40;									// Agreed to JPS
		accepted_cargos: 			[[PASS, 8],[MAIL, 1]];							
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[1870,0xFFFF];	
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(
										TOWNZONE_INNER_SUBURB,		// 3
										TOWNZONE_OUTER_SUBURB,		// 2
										TOWNZONE_OUTSKIRT			// 1
										//TOWNZONE_EDGE				// 0
										), 
									bitmask(
										CLIMATE_TEMPERATE, 
										CLIMATE_ARCTIC, 
										ABOVE_SNOWLINE
										)];
		//building_class:			2;	
		}
	graphics {
		default: 					switch_onsen_01;
		construction_check:			switch_onsen_01_con_check;
		protection:					switch_onsen_01_pro_check;
		cargo_production: 			func_produce(20,5);
		//colour: 					rand_recolor_onsen_01;
	}
}

// End onsen_01
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/shops/shotengai_01.pnml" 1
// Begin shotengai_01

// Buildings
spriteset (spr_shotengai_01_a, 						"src/gfx/shops/shotengai_01/building_a.png") 					{template_house_80_wide(1,1)}
spriteset (spr_shotengai_01_a_snow, 				"src/gfx/shops/shotengai_01/building_a.png") 					{template_house_80_wide(1,82)}

spriteset (spr_shotengai_01_b, 						"src/gfx/shops/shotengai_01/building_b.png") 					{template_house_80_wide(1,1)}
spriteset (spr_shotengai_01_b_snow, 				"src/gfx/shops/shotengai_01/building_b.png") 					{template_house_80_wide(1,82)}

spriteset (spr_shotengai_01_c, 						"src/gfx/shops/shotengai_01/building_c.png") 					{template_house_80_wide(1,1)}
spriteset (spr_shotengai_01_c_snow, 				"src/gfx/shops/shotengai_01/building_c.png") 					{template_house_80_wide(1,82)}

spriteset (spr_shotengai_01_d, 						"src/gfx/shops/shotengai_01/building_d.png") 					{template_house_80_wide(1,1)}
spriteset (spr_shotengai_01_d_snow, 				"src/gfx/shops/shotengai_01/building_d.png") 					{template_house_80_wide(1,82)}

spriteset (spr_shotengai_01_e, 						"src/gfx/shops/shotengai_01/building_e.png") 					{template_house_80_wide(1,1)}
spriteset (spr_shotengai_01_e_snow, 				"src/gfx/shops/shotengai_01/building_e.png") 					{template_house_80_wide(1,82)}

spriteset (spr_shotengai_01_f, 						"src/gfx/shops/shotengai_01/building_f.png") 					{template_house_80_wide(1,1)}
spriteset (spr_shotengai_01_f_snow, 				"src/gfx/shops/shotengai_01/building_f.png") 					{template_house_80_wide(1,82)}

spriteset (spr_shotengai_01_g, 						"src/gfx/shops/shotengai_01/building_g.png") 					{template_house_80_wide(1,1)}
spriteset (spr_shotengai_01_g_snow, 				"src/gfx/shops/shotengai_01/building_g.png") 					{template_house_80_wide(1,82)}

spriteset (spr_shotengai_01_h, 						"src/gfx/shops/shotengai_01/building_h.png") 					{template_house_80_wide(1,1)}
spriteset (spr_shotengai_01_h_snow, 				"src/gfx/shops/shotengai_01/building_h.png") 					{template_house_80_wide(1,82)}

spriteset (spr_shotengai_01_i, 						"src/gfx/shops/shotengai_01/building_i.png") 					{template_house_80_wide(1,1)}
spriteset (spr_shotengai_01_i_snow, 				"src/gfx/shops/shotengai_01/building_i.png") 					{template_house_80_wide(1,82)}

spriteset (spr_shotengai_01_j, 						"src/gfx/shops/shotengai_01/building_j.png") 					{template_house_80_wide(1,1)}
spriteset (spr_shotengai_01_j_snow, 				"src/gfx/shops/shotengai_01/building_j.png") 					{template_house_80_wide(1,82)}

spriteset (spr_shotengai_01_k, 						"src/gfx/shops/shotengai_01/building_k.png") 					{template_house_80_wide(1,1)}
spriteset (spr_shotengai_01_k_snow, 				"src/gfx/shops/shotengai_01/building_k.png") 					{template_house_80_wide(1,82)}

spriteset (spr_shotengai_01_l, 						"src/gfx/shops/shotengai_01/building_l.png") 					{template_house_80_wide(1,1)}
spriteset (spr_shotengai_01_l_snow, 				"src/gfx/shops/shotengai_01/building_l.png") 					{template_house_80_wide(1,82)}

// Spritelayouts

// OLD (concrete ground tiles)
spritelayout sprlay_shotengai_01_a {
	ground {
		sprite: spr_ground_concrete (construction_state);
	}
	building {
		sprite: spr_shotengai_01_a (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_a_snow {
	ground {
		sprite: spr_ground_concrete (construction_state);
	}
	building {
		sprite: spr_shotengai_01_a_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_b {
	ground {
		sprite: spr_ground_concrete (construction_state);
	}
	building {
		sprite: spr_shotengai_01_b (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_b_snow {
	ground {
		sprite: spr_ground_concrete (construction_state);
	}
	building {
		sprite: spr_shotengai_01_b_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_c {
	ground {
		sprite: spr_ground_concrete (construction_state);
	}
	building {
		sprite: spr_shotengai_01_c (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_c_snow {
	ground {
		sprite: spr_ground_concrete (construction_state);
	}
	building {
		sprite: spr_shotengai_01_c_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_d {
	ground {
		sprite: spr_ground_concrete (construction_state);
	}
	building {
		sprite: spr_shotengai_01_d (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_d_snow {
	ground {
		sprite: spr_ground_concrete (construction_state);
	}
	building {
		sprite: spr_shotengai_01_d_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_e {
	ground {
		sprite: spr_ground_concrete (construction_state);
	}
	building {
		sprite: spr_shotengai_01_e(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_e_snow {
	ground {
		sprite: spr_ground_concrete (construction_state);
	}
	building {
		sprite: spr_shotengai_01_e_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_f {
	ground {
		sprite: spr_ground_concrete (construction_state);
	}
	building {
		sprite: spr_shotengai_01_f (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_f_snow {
	ground {
		sprite: spr_ground_concrete (construction_state);
	}
	building {
		sprite: spr_shotengai_01_f_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_g {
	ground {
		sprite: spr_ground_concrete (construction_state);
	}
	building {
		sprite: spr_shotengai_01_g (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_g_snow {
	ground {
		sprite: spr_ground_concrete (construction_state);
	}
	building {
		sprite: spr_shotengai_01_g_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_h {
	ground {
		sprite: spr_ground_concrete (construction_state);
	}
	building {
		sprite: spr_shotengai_01_h (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_h_snow {
	ground {
		sprite: spr_ground_concrete (construction_state);
	}
	building {
		sprite: spr_shotengai_01_h_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_i {
	ground {
		sprite: spr_ground_concrete (construction_state);
	}
	building {
		sprite: spr_shotengai_01_i (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_i_snow {
	ground {
		sprite: spr_ground_concrete (construction_state);
	}
	building {
		sprite: spr_shotengai_01_i_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_j {
	ground {
		sprite: spr_ground_concrete (construction_state);
	}
	building {
		sprite: spr_shotengai_01_j (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_j_snow {
	ground {
		sprite: spr_ground_concrete (construction_state);
	}
	building {
		sprite: spr_shotengai_01_j_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_k {
	ground {
		sprite: spr_ground_concrete (construction_state);
	}
	building {
		sprite: spr_shotengai_01_k (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_k_snow {
	ground {
		sprite: spr_ground_concrete (construction_state);
	}
	building {
		sprite: spr_shotengai_01_k_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_l {
	ground {
		sprite: spr_ground_concrete (construction_state);
	}
	building {
		sprite: spr_shotengai_01_l (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_l_snow {
	ground {
		sprite: spr_ground_concrete (construction_state);
	}
	building {
		sprite: spr_shotengai_01_l_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// NEW (grass ground tiles)
spritelayout sprlay_shotengai_01_new_a {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_shotengai_01_a (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_new_a_snow {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_shotengai_01_a_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_new_b {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_shotengai_01_b (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_new_b_snow {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_shotengai_01_b_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_new_c {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_shotengai_01_c (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_new_c_snow {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_shotengai_01_c_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_new_d {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_shotengai_01_d (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_new_d_snow {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_shotengai_01_d_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_new_e {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_shotengai_01_e(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_new_e_snow {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_shotengai_01_e_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_new_f {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_shotengai_01_f (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_new_f_snow {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_shotengai_01_f_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_new_g {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_shotengai_01_g (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_new_g_snow {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_shotengai_01_g_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_new_h {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_shotengai_01_h (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_new_h_snow {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_shotengai_01_h_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_new_i {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_shotengai_01_i (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_new_i_snow {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_shotengai_01_i_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_new_j {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_shotengai_01_j (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_new_j_snow {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_shotengai_01_j_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_new_k {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_shotengai_01_k (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_new_k_snow {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_shotengai_01_k_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_new_l {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_shotengai_01_l (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shotengai_01_new_l_snow {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_shotengai_01_l_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites

// OLD
switch(FEAT_HOUSES, SELF, switch_shotengai_01_a,terrain_type) {
	TILETYPE_SNOW: sprlay_shotengai_01_a_snow;
	sprlay_shotengai_01_a;
}

switch(FEAT_HOUSES, SELF, switch_shotengai_01_b,terrain_type) {
	TILETYPE_SNOW: sprlay_shotengai_01_b_snow;
	sprlay_shotengai_01_b;
}

switch(FEAT_HOUSES, SELF, switch_shotengai_01_c,terrain_type) {
	TILETYPE_SNOW: sprlay_shotengai_01_c_snow;
	sprlay_shotengai_01_c;
}

switch(FEAT_HOUSES, SELF, switch_shotengai_01_d,terrain_type) {
	TILETYPE_SNOW: sprlay_shotengai_01_d_snow;
	sprlay_shotengai_01_d;
}

switch(FEAT_HOUSES, SELF, switch_shotengai_01_e,terrain_type) {
	TILETYPE_SNOW: sprlay_shotengai_01_e_snow;
	sprlay_shotengai_01_e;
}

switch(FEAT_HOUSES, SELF, switch_shotengai_01_f,terrain_type) {
	TILETYPE_SNOW: sprlay_shotengai_01_f_snow;
	sprlay_shotengai_01_f;
}

switch(FEAT_HOUSES, SELF, switch_shotengai_01_g,terrain_type) {
	TILETYPE_SNOW: sprlay_shotengai_01_g_snow;
	sprlay_shotengai_01_g;
}

switch(FEAT_HOUSES, SELF, switch_shotengai_01_h,terrain_type) {
	TILETYPE_SNOW: sprlay_shotengai_01_h_snow;
	sprlay_shotengai_01_h;
}

switch(FEAT_HOUSES, SELF, switch_shotengai_01_i,terrain_type) {
	TILETYPE_SNOW: sprlay_shotengai_01_i_snow;
	sprlay_shotengai_01_i;
}

switch(FEAT_HOUSES, SELF, switch_shotengai_01_j,terrain_type) {
	TILETYPE_SNOW: sprlay_shotengai_01_j_snow;
	sprlay_shotengai_01_j;
}

switch(FEAT_HOUSES, SELF, switch_shotengai_01_k,terrain_type) {
	TILETYPE_SNOW: sprlay_shotengai_01_k_snow;
	sprlay_shotengai_01_k;
}

switch(FEAT_HOUSES, SELF, switch_shotengai_01_l,terrain_type) {
	TILETYPE_SNOW: sprlay_shotengai_01_l_snow;
	sprlay_shotengai_01_l;
}

// NEW
switch(FEAT_HOUSES, SELF, switch_shotengai_01_new_a,terrain_type) {
	TILETYPE_SNOW: sprlay_shotengai_01_new_a_snow;
	sprlay_shotengai_01_new_a;
}

switch(FEAT_HOUSES, SELF, switch_shotengai_01_new_b,terrain_type) {
	TILETYPE_SNOW: sprlay_shotengai_01_new_b_snow;
	sprlay_shotengai_01_new_b;
}

switch(FEAT_HOUSES, SELF, switch_shotengai_01_new_c,terrain_type) {
	TILETYPE_SNOW: sprlay_shotengai_01_new_c_snow;
	sprlay_shotengai_01_new_c;
}

switch(FEAT_HOUSES, SELF, switch_shotengai_01_new_d,terrain_type) {
	TILETYPE_SNOW: sprlay_shotengai_01_new_d_snow;
	sprlay_shotengai_01_new_d;
}

switch(FEAT_HOUSES, SELF, switch_shotengai_01_new_e,terrain_type) {
	TILETYPE_SNOW: sprlay_shotengai_01_new_e_snow;
	sprlay_shotengai_01_new_e;
}

switch(FEAT_HOUSES, SELF, switch_shotengai_01_new_f,terrain_type) {
	TILETYPE_SNOW: sprlay_shotengai_01_new_f_snow;
	sprlay_shotengai_01_new_f;
}

switch(FEAT_HOUSES, SELF, switch_shotengai_01_new_g,terrain_type) {
	TILETYPE_SNOW: sprlay_shotengai_01_new_g_snow;
	sprlay_shotengai_01_new_g;
}

switch(FEAT_HOUSES, SELF, switch_shotengai_01_new_h,terrain_type) {
	TILETYPE_SNOW: sprlay_shotengai_01_new_h_snow;
	sprlay_shotengai_01_new_h;
}

switch(FEAT_HOUSES, SELF, switch_shotengai_01_new_i,terrain_type) {
	TILETYPE_SNOW: sprlay_shotengai_01_new_i_snow;
	sprlay_shotengai_01_new_i;
}

switch(FEAT_HOUSES, SELF, switch_shotengai_01_new_j,terrain_type) {
	TILETYPE_SNOW: sprlay_shotengai_01_new_j_snow;
	sprlay_shotengai_01_new_j;
}

switch(FEAT_HOUSES, SELF, switch_shotengai_01_new_k,terrain_type) {
	TILETYPE_SNOW: sprlay_shotengai_01_new_k_snow;
	sprlay_shotengai_01_new_k;
}

switch(FEAT_HOUSES, SELF, switch_shotengai_01_new_l,terrain_type) {
	TILETYPE_SNOW: sprlay_shotengai_01_new_l_snow;
	sprlay_shotengai_01_new_l;
}

// Random selection of sprites
random_switch (FEAT_HOUSES, SELF, switch_shotengai_01_old_sprites) {
	1: switch_shotengai_01_a;
	1: switch_shotengai_01_b;
	1: switch_shotengai_01_c;
	1: switch_shotengai_01_d;
	1: switch_shotengai_01_e;
	1: switch_shotengai_01_f;
	1: switch_shotengai_01_g;
	1: switch_shotengai_01_h;
	1: switch_shotengai_01_i;
	1: switch_shotengai_01_j;
	1: switch_shotengai_01_k;
	1: switch_shotengai_01_l;
}

random_switch (FEAT_HOUSES, SELF, switch_shotengai_01_new_sprites) {
	1: switch_shotengai_01_new_a;
	1: switch_shotengai_01_new_b;
	1: switch_shotengai_01_new_c;
	1: switch_shotengai_01_new_d;
	1: switch_shotengai_01_new_e;
	1: switch_shotengai_01_new_f;
	1: switch_shotengai_01_new_g;
	1: switch_shotengai_01_new_h;
	1: switch_shotengai_01_new_i;
	1: switch_shotengai_01_new_j;
	1: switch_shotengai_01_new_k;
	1: switch_shotengai_01_new_l;
}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_shotengai_01_old_con_check, 
	FuncServicePASS() &&			// Must have PASS service
	CommercialCargoes() &&			// Commerical Cargo Requirement as per parameter
	Class2PopCheck() &&				// Residential population is sufficient for another Skyscraper
	ClusterBuildingClass()			// Build beside a commercial building
) {return;}	

switch (FEAT_HOUSES, SELF, switch_shotengai_01_new_con_check, 
	FuncServicePASS() &&			// Must have PASS service
	CommercialCargoes() &&			// Commerical Cargo Requirement as per parameter
	HouseOfficeGap() &&				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
	ClusterBuildingClass()			// Build beside a commercial building
) {return;}	

item(FEAT_HOUSES, item_shotengai_01_old, 00, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_SHOTENGAI_01);
		population: 				50;										
		accepted_cargos: 			[[PASS, 4],[MAIL, 2],[GOOD, 4]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				5;
		years_available: 			[1700,1959];							
		minimum_lifetime: 			5;										
		availability_mask: 			[bitmask(								
										TOWNZONE_CENTRE,			// 4
										TOWNZONE_INNER_SUBURB,		// 3
										TOWNZONE_OUTER_SUBURB		// 2
										//TOWNZONE_OUTSKIRT,		// 1
										//TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				2;									
		
		}
	graphics {
		default: 					switch_shotengai_01_old_sprites;
		construction_check: 		switch_shotengai_01_old_con_check;
		protection:					ProtectClassTwoUntil1959;
		cargo_production: 			func_produce(2,1);						// 
		//colour: 					rand_recolor_shotengai_01;
	}
}

item(FEAT_HOUSES, item_shotengai_01_new, 26, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_SHOTENGAI_01);
		population: 				50;										// Agreed to JPS
		accepted_cargos: 			[[PASS, 4],[MAIL, 2],[GOOD, 4]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1960,0xFFFF];							// Agreed to JPS
		minimum_lifetime: 			5;										
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										TOWNZONE_INNER_SUBURB,		// 3
										TOWNZONE_OUTER_SUBURB,		// 2
										TOWNZONE_OUTSKIRT			// 1
										//TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				1;									
		
		}
	graphics {
		default: 					switch_shotengai_01_new_sprites;
		construction_check: 		switch_shotengai_01_new_con_check;
		cargo_production: 			func_produce(2,1);						// 
		//colour: 					rand_recolor_shotengai_01;
	}
}

// End shotengai_01
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/shops/takemaru_shopping_centre.pnml" 1
// Begin takemaru_shopping_centre

// Building Sprites
spriteset (spr_takemaru_shopping_centre, 							"src/gfx/shops/takemaru_shopping_centre/building.png") 						{template_house_100(1,1)}
spriteset (spr_takemaru_shopping_centre_snow, 						"src/gfx/shops/takemaru_shopping_centre/building.png") 						{template_house_100(1,102)}

// Ground Tiles
spriteset (spr_takemaru_shopping_centre_ground, 					"src/gfx/shops/takemaru_shopping_centre/ground.png") 						{template_house_100(1,1)}
spriteset (spr_takemaru_shopping_centre_ground_snow, 				"src/gfx/shops/takemaru_shopping_centre/ground.png") 						{template_house_100(1,102)}

spritelayout sprlay_takemaru_shopping_centre_norm {
	ground {
		sprite: spr_takemaru_shopping_centre_ground(construction_state);
	}
	building {
		sprite: spr_takemaru_shopping_centre(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_takemaru_shopping_centre_snow {
	ground {
		sprite: spr_takemaru_shopping_centre_ground_snow(construction_state);
	}
	building {
		sprite: spr_takemaru_shopping_centre_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_takemaru_shopping_centre_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_takemaru_shopping_centre_snow;
	sprlay_takemaru_shopping_centre_norm;
}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_takemaru_shopping_centre_con_check, 
	FuncServicePASS() &&			// Only build within the catchment area of a station which received passengers this month or last month
	CommercialCargoes() &&			// Commerical Cargo Requirement as per parameter
	HasRoadAdjacentSW() && 
	HasRoadAdjacentSE() && 
	Class2PopCheck() &&				// Is there population to allow another Class 2
	ClusterBuildingClass()			// Must be within two tiles of the same building class
) {return;}	

// Recolouring
random_switch (FEAT_HOUSES, SELF, random_recolour_takemaru_shopping_centre) {
	1:	return PALETTE_CC_DARK_BLUE;
	1:	return PALETTE_CC_GREY;
	1:	return PALETTE_CC_BROWN;
	1:	return PALETTE_CC_MAUVE;
	1:	return PALETTE_CC_WHITE;
	1:	return PALETTE_CC_DARK_GREEN;
}

item(FEAT_HOUSES, item_takemaru_shopping_centre, 48, HOUSE_SIZE_1X1) {
	property {
		substitute: 				30;
		name: 						string(NAME_TAKEMARU_SHOPPING_CENTRE );
		population: 				180;
		mail_multiplier: 			75;
		accepted_cargos: 			[[PASS, 8],[MAIL,8],[GOOD, 8]];
		local_authority_impact: 	180;
		removal_cost_multiplier: 	155;
		probability: 				5;
		years_available: 			[1970,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];	// JPSet Zones 4,3
		building_class: 			2;
	}
	graphics {
		default: 					switch_takemaru_shopping_centre_sprites;
		construction_check: 		switch_takemaru_shopping_centre_con_check;
		colour: 					random_recolour_takemaru_shopping_centre;
		cargo_production: 			func_produce(24,10);
	}
}
// End takemaru_shopping_centre
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/shops/yamada_electronics_centre.pnml" 1
// Begin yamada_electronics_centre

// Building Sprites
spriteset (spr_yamada_electronics_centre, 							"src/gfx/shops/yamada_electronics_centre/building.png") 					{template_house_128(1,1)}
spriteset (spr_yamada_electronics_centre_snow, 						"src/gfx/shops/yamada_electronics_centre/building.png") 					{template_house_128(1,130)}

// Ground Tiles
spriteset (spr_yamada_electronics_centre_ground, 					"src/gfx/shops/yamada_electronics_centre/ground.png") 						{template_house_128(1,1)}
//spriteset (spr_yamada_electronics_centre_ground_snow, 			"src/gfx/shops/yamada_electronics_centre/ground.png") 						{template_house_128(1,1)}

spritelayout sprlay_yamada_electronics_centre_norm {
	ground {
		sprite: spr_yamada_electronics_centre_ground(construction_state);
	}
	building {
		sprite: spr_yamada_electronics_centre(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_yamada_electronics_centre_snow {
	ground {
		sprite: spr_yamada_electronics_centre_ground(construction_state);
	}
	building {
		sprite: spr_yamada_electronics_centre_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_yamada_electronics_centre_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_yamada_electronics_centre_snow;
	sprlay_yamada_electronics_centre_norm;
}


// Recolouring
random_switch (FEAT_HOUSES, SELF, random_recolour_yamada_electronics_centre) {
	1:	return PALETTE_CC_DARK_BLUE;
	1:	return PALETTE_CC_GREY;
	1:	return PALETTE_CC_BROWN;
	1:	return PALETTE_CC_MAUVE;
	1:	return PALETTE_CC_WHITE;
	1:	return PALETTE_CC_DARK_GREEN;
}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_yamada_electronics_centre_con_check, 
	FuncServicePASS() &&			// Only build within the catchment area of a station which received passengers this month or last month
	CommercialCargoes() &&			// Commerical Cargo Requirement as per parameter
	Class2PopCheck() &&				// Is there population to allow another Class 2
	ClusterBuildingClass()			// Must be within two tiles of the same building class
) {return;}	

item(FEAT_HOUSES, item_yamada_electronics_centre, 47, HOUSE_SIZE_1X1) {
	property {
		substitute: 				30;
		name: 						string(NAME_YAMADA_ELECTRONICS_CENTRE);
		population: 				140;
		mail_multiplier: 			75;
		accepted_cargos: 			[[PASS, 8],[MAIL,8],[GOOD, 8]];
		local_authority_impact: 	180;
		removal_cost_multiplier: 	155;
		probability: 				5;
		years_available: 			[1970,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class: 			2;
	}
	graphics {
		default: 					switch_yamada_electronics_centre_sprites;
		construction_check: 		switch_yamada_electronics_centre_con_check;
		colour: 					random_recolour_yamada_electronics_centre;
		cargo_production: 			func_produce(24,10);
	}
}
// End yamada_electronics_centre
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/shops/tsuzumi_electronics_centre.pnml" 1
// Begin tsuzumi_electronics_centre

// Building Sprites
spriteset (spr_tsuzumi_electronics_centre_a, 						"src/gfx/shops/tsuzumi_electronics_centre/building_a.png") 					{template_house_128_wide(1,1)}
spriteset (spr_tsuzumi_electronics_centre_a_snow, 					"src/gfx/shops/tsuzumi_electronics_centre/building_a.png") 					{template_house_128_wide(1,130)}

spriteset (spr_tsuzumi_electronics_centre_b, 						"src/gfx/shops/tsuzumi_electronics_centre/building_b.png") 					{template_house_128_wide(1,1)}
spriteset (spr_tsuzumi_electronics_centre_b_snow, 					"src/gfx/shops/tsuzumi_electronics_centre/building_b.png") 					{template_house_128_wide(1,130)}

spriteset (spr_tsuzumi_electronics_centre_c, 						"src/gfx/shops/tsuzumi_electronics_centre/building_c.png") 					{template_house_128_wide(1,1)}
spriteset (spr_tsuzumi_electronics_centre_c_snow, 					"src/gfx/shops/tsuzumi_electronics_centre/building_c.png") 					{template_house_128_wide(1,130)}

spriteset (spr_tsuzumi_electronics_centre_d, 						"src/gfx/shops/tsuzumi_electronics_centre/building_d.png") 					{template_house_128_wide(1,1)}
spriteset (spr_tsuzumi_electronics_centre_d_snow, 					"src/gfx/shops/tsuzumi_electronics_centre/building_d.png") 					{template_house_128_wide(1,130)}

// Ground Tiles
spriteset (spr_tsuzumi_electronics_centre_ground, 					"src/gfx/shops/tsuzumi_electronics_centre/ground.png") 						{template_ground(1,1)}
spriteset (spr_tsuzumi_electronics_centre_ground_snow, 				"src/gfx/shops/tsuzumi_electronics_centre/ground.png") 						{template_ground(1,33)}

// Spritelayouts
spritelayout sprlay_tsuzumi_electronics_centre_a_norm {
	ground {
		sprite: spr_tsuzumi_electronics_centre_ground (construction_state);
	}
	building {
		sprite: spr_tsuzumi_electronics_centre_a (construction_state);
		xoffset: 2;
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_tsuzumi_electronics_centre_a_snow {
	ground {
		sprite: spr_tsuzumi_electronics_centre_ground_snow (construction_state);
	}
	building {
		sprite: spr_tsuzumi_electronics_centre_a_snow (construction_state);
		xoffset: 2;
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_tsuzumi_electronics_centre_b_norm {
	ground {
		sprite: spr_tsuzumi_electronics_centre_ground (construction_state);
	}
	building {
		sprite: spr_tsuzumi_electronics_centre_b (construction_state);
		xoffset: 2;
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_tsuzumi_electronics_centre_b_snow {
	ground {
		sprite: spr_tsuzumi_electronics_centre_ground_snow (construction_state);
	}
	building {
		sprite: spr_tsuzumi_electronics_centre_b_snow (construction_state);
		xoffset: 2;
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_tsuzumi_electronics_centre_c_norm {
	ground {
		sprite: spr_tsuzumi_electronics_centre_ground (construction_state);
	}
	building {
		sprite: spr_tsuzumi_electronics_centre_c (construction_state);
		xoffset: 2;
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_tsuzumi_electronics_centre_c_snow {
	ground {
		sprite: spr_tsuzumi_electronics_centre_ground_snow (construction_state);
	}
	building {
		sprite: spr_tsuzumi_electronics_centre_c_snow (construction_state);
		xoffset: 2;
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_tsuzumi_electronics_centre_d_norm {
	ground {
		sprite: spr_tsuzumi_electronics_centre_ground (construction_state);
	}
	building {
		sprite: spr_tsuzumi_electronics_centre_d (construction_state);
		xoffset: 2;
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_tsuzumi_electronics_centre_d_snow {
	ground {
		sprite: spr_tsuzumi_electronics_centre_ground_snow (construction_state);
	}
	building {
		sprite: spr_tsuzumi_electronics_centre_d_snow (construction_state);
		xoffset: 2;
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_tsuzumi_electronics_centre_a_sprites, terrain_type) {
	TILETYPE_SNOW: sprlay_tsuzumi_electronics_centre_a_snow;
	sprlay_tsuzumi_electronics_centre_a_norm;
}

switch(FEAT_HOUSES, SELF, switch_tsuzumi_electronics_centre_b_sprites, terrain_type) {
	TILETYPE_SNOW: sprlay_tsuzumi_electronics_centre_b_snow;
	sprlay_tsuzumi_electronics_centre_b_norm;
}

switch(FEAT_HOUSES, SELF, switch_tsuzumi_electronics_centre_c_sprites, terrain_type) {
	TILETYPE_SNOW: sprlay_tsuzumi_electronics_centre_c_snow;
	sprlay_tsuzumi_electronics_centre_c_norm;
}

switch(FEAT_HOUSES, SELF, switch_tsuzumi_electronics_centre_d_sprites, terrain_type) {
	TILETYPE_SNOW: sprlay_tsuzumi_electronics_centre_d_snow;
	sprlay_tsuzumi_electronics_centre_d_norm;
}

// Random Switch
random_switch (FEAT_HOUSES, SELF, switch_tsuzumi_electronics_centre_sprites) {
	1: switch_tsuzumi_electronics_centre_a_sprites;				
	1: switch_tsuzumi_electronics_centre_b_sprites;
	1: switch_tsuzumi_electronics_centre_c_sprites;
	1: switch_tsuzumi_electronics_centre_d_sprites;				
}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_tsuzumi_electronics_centre_con_check, 
	FuncServicePASS() &&			// Only build within the catchment area of a station which received passengers this month or last month
	CommercialCargoes() &&			// Commerical Cargo Requirement as per parameter
	HasRoadAdjacentSW() && 
	HasRoadAdjacentSE() && 
	Class2PopCheck() &&				// Is there population to allow another Class 2
	ClusterBuildingClass()			// Must be within two tiles of the same building class
) {return;}	

// Recolouring
/*
random_switch (FEAT_HOUSES, SELF, random_recolour_tsuzumi_electronics_centre) {
	1:	return PALETTE_CC_DARK_BLUE;
	1:	return PALETTE_CC_GREY;
	1:	return PALETTE_CC_BROWN;
	1:	return PALETTE_CC_MAUVE;
	1:	return PALETTE_CC_WHITE;
	1:	return PALETTE_CC_DARK_GREEN;
}
*/

item(FEAT_HOUSES, item_tsuzumi_electronics_centre, 65, HOUSE_SIZE_1X1) {
	property {
		substitute: 				30;
		name: 						string(NAME_TSUZUMI_ELECTRONICS_CENTRE);
		population: 				160;
		mail_multiplier: 			75;
		accepted_cargos: 			[[PASS, 8],[MAIL, 4],[GOOD, 8]];
		local_authority_impact: 	180;
		removal_cost_multiplier: 	155;
		probability: 				5;
		years_available: 			[1970,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];	// JPSet Zones 4,3
		building_class: 			2;
	}
	graphics {
		default: 					switch_tsuzumi_electronics_centre_sprites;
		construction_check: 		switch_tsuzumi_electronics_centre_con_check;
		//colour: 					random_recolour_tsuzumi_electronics_centre;
		cargo_production: 			func_produce(24,10);
	}
}
// End tsuzumi_electronics_centre
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/shops/cinema.pnml" 1
// Begin cinema

// Building Sprites
spriteset (spr_cinema, 							"src/gfx/shops/cinema/building.png") 						{template_house_80(1,1)}
spriteset (spr_cinema_snow, 						"src/gfx/shops/cinema/building.png") 						{template_house_80(1,82)}

// Ground Tiles
spriteset (spr_cinema_ground, 					"src/gfx/shops/cinema/ground.png") 						{template_ground(1,1)}
spriteset (spr_cinema_ground_snow, 				"src/gfx/shops/cinema/ground.png") 						{template_ground(1,33)}

// Spritelayouts
spritelayout sprlay_cinema_norm {
	ground {
		sprite: spr_cinema_ground(construction_state);
	}
	building {
		sprite: spr_cinema(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_cinema_snow {
	ground {
		sprite: spr_cinema_ground(construction_state);
	}
	building {
		sprite: spr_cinema_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_cinema_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_cinema_snow;
	sprlay_cinema_norm;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, random_recolour_cinema) {
	1:	return PALETTE_CC_DARK_BLUE;
	1:	return PALETTE_CC_GREY;
	1:	return PALETTE_CC_BROWN;
	1:	return PALETTE_CC_MAUVE;
	1:	return PALETTE_CC_WHITE;
	1:	return PALETTE_CC_DARK_GREEN;
}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_cinema_con_check, 
	FuncServicePASS() &&			// Only build within the catchment area of a station which received passengers this month or last month
	CommercialCargoes() &&			// Commerical Cargo Requirement as per parameter
	Class2PopCheck() &&				// Is there population to allow another Class 2
	ClusterBuildingClass()			// Must be within two tiles of the same building class
) {return;}	

item(FEAT_HOUSES, item_cinema, 101, HOUSE_SIZE_1X1) {
	property {
		substitute: 				30;
		name: 						string(NAME_CINEMA);
		population: 				60;
		mail_multiplier: 			75;
		accepted_cargos: 			[[PASS, 8],[MAIL,2],[FOOD, 2]];
		local_authority_impact: 	180;
		removal_cost_multiplier: 	155;
		probability: 				5;
		years_available: 			[1950,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class: 			2;
	}
	graphics {
		default: 					switch_cinema_sprites;
		construction_check: 		switch_cinema_con_check;
		colour: 					random_recolour_cinema;
		cargo_production: 			func_produce(24,10);
	}
}

// End cinema
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/shops/petrol_station_01.pnml" 1
// Begin petrol_station_01

// Building Sprites
spriteset (spr_build_petrol_station_01, 							"src/gfx/shops/petrol_station_01/building.png") 						{template_house_80(1,1)}
spriteset (spr_build_petrol_station_01_snow, 						"src/gfx/shops/petrol_station_01/building.png") 						{template_house_80(1,82)}

// Ground Sprites
spriteset (spr_ground_petrol_station_01, 							"src/gfx/shops/petrol_station_01/ground.png") 						{template_house_80(1,1)}
spriteset (spr_ground_petrol_station_01_snow, 						"src/gfx/shops/petrol_station_01/ground.png") 						{template_house_80(1,82)}

// Normal Sprites
spritelayout sprlay_petrol_station_01_north {
	ground {
		sprite: spr_ground_petrol_station_01(0);
	}
	building {
		sprite: spr_build_petrol_station_01(0);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_petrol_station_01_east {
	ground {
		sprite: spr_ground_petrol_station_01(1);
	}
	building {
		sprite: spr_build_petrol_station_01(1);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_petrol_station_01_snow_north {
	ground {
		sprite: spr_ground_petrol_station_01_snow(0);
	}
	building {
		sprite: spr_build_petrol_station_01_snow(0);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_petrol_station_01_snow_east {
	ground {
		sprite: spr_ground_petrol_station_01_snow(1);
	}
	building {
		sprite: spr_build_petrol_station_01_snow(1);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_petrol_station_01_north,terrain_type) {
	TILETYPE_SNOW: sprlay_petrol_station_01_snow_north;
	sprlay_petrol_station_01_north;
}
switch(FEAT_HOUSES, SELF, switch_petrol_station_01_east,terrain_type) {
	TILETYPE_SNOW: sprlay_petrol_station_01_snow_east;
	sprlay_petrol_station_01_east;
}

// Recolouring

random_switch (FEAT_HOUSES, SELF, rand_recolor_petrol_station_01)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
	}


// Construction Check
switch (FEAT_HOUSES, SELF, switch_petrol_station_01_con_check, 
	HasRoadAdjacentSW() &&		// Must have road to the SW
	ThirtyTileGap()				// Can't appear within 30 tiles of another
) {return;}	

// Protection Check
switch (FEAT_HOUSES, SELF, switch_petrol_station_01_pro_check, 
	HasRoadAdjacentSW() &&		// Must have road to the SW
	FuncServicePETR()			// Must have PETR delivered
	) {return;}	

item(FEAT_HOUSES, item_petrol_station_01, 50, HOUSE_SIZE_1X2){
	property {
		substitute: 				7; 													
		name: 						string(NAME_PETROL_STATION_01);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED,HOUSE_FLAG_PROTECTED);	// Want flat land
		population: 				80;														// Agreed to JPS
		accepted_cargos: 			[[PASS, 4],[MAIL, 2],[GOOD, 2],[PETR,8]];				// Agreed to JPS and added Petrol
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[1970,0xFFFF];	
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(
										TOWNZONE_OUTER_SUBURB,
										TOWNZONE_OUTSKIRT,
										TOWNZONE_EDGE
										), 
									bitmask(
										CLIMATE_TEMPERATE, 
										CLIMATE_ARCTIC, 
										ABOVE_SNOWLINE
										)];
		//building_class:			2;	
		}
	graphics {
		graphics_north: 			switch_petrol_station_01_north;
		graphics_east: 				switch_petrol_station_01_east;
		construction_check:			switch_petrol_station_01_con_check;
		protection:					switch_petrol_station_01_pro_check;
		cargo_production: 			func_produce(20,5);
		colour: 					rand_recolor_petrol_station_01;
	}
}

// End petrol_station_01
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/shops/petrol_station_02.pnml" 1
// Begin petrol_station_02

// Building Sprites
spriteset (spr_build_petrol_station_02, 				"src/gfx/shops/petrol_station_02/building.png") 		{template_house_80(1,1)}
spriteset (spr_build_petrol_station_02_snow, 			"src/gfx/shops/petrol_station_02/building.png") 		{template_house_80(1,82)}

// Ground Sprites
spriteset (spr_ground_petrol_station_02, 				"src/gfx/shops/petrol_station_02/ground.png") 			{template_ground(1,1)}
spriteset (spr_ground_petrol_station_02_snow, 			"src/gfx/shops/petrol_station_02/ground.png") 			{template_ground(1,33)}

// Normal Sprites
spritelayout sprlay_petrol_station_02 {
	ground {
		sprite: spr_ground_petrol_station_02 (3);
	}
	building {
		sprite: spr_build_petrol_station_02 (3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_petrol_station_02_snow {
	ground {
		sprite: spr_ground_petrol_station_02_snow (3);
	}
	building {
		sprite: spr_build_petrol_station_02_snow (3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_petrol_station_02,terrain_type) {
	TILETYPE_SNOW: sprlay_petrol_station_02_snow;
	sprlay_petrol_station_02;
}

// Recolouring

random_switch (FEAT_HOUSES, SELF, rand_recolor_petrol_station_02)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
	}


// Construction Check
switch (FEAT_HOUSES, SELF, switch_petrol_station_02_con_check, 
	HasRoadAdjacentSW() &&		// Must have road to the SW
	HasRoadAdjacentSE() &&		// Must have road to the SE
	ThirtyTileGap()				// Can't appear within 30 tiles of another
) {return;}	

// Protection Check
switch (FEAT_HOUSES, SELF, switch_petrol_station_02_pro_check, 
	HasRoadAdjacentSW() &&		// Must have road to the SW
	HasRoadAdjacentSE() &&		// Must have road to the SE
	FuncServicePETR()			// Must have PETR delivered
	) {return;}	

item(FEAT_HOUSES, item_petrol_station_02, 109, HOUSE_SIZE_1X1){
	property {
		substitute: 				29; 													
		name: 						string(NAME_PETROL_STATION_02);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED);		// Want flat land
		population: 				40;									// Agreed to JPS
		accepted_cargos: 			[
										[PASS, 4],[MAIL, 2],			// Of course
										[GOOD, 2],[PETR, 8]				// Goods & Petrol
									];							
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[1950,0xFFFF];	
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(
										//TOWNZONE_CENTRE,
										//TOWNZONE_INNER_SUBURB,
										TOWNZONE_OUTER_SUBURB,
										TOWNZONE_OUTSKIRT,
										TOWNZONE_EDGE
										), 
									bitmask(
										CLIMATE_TEMPERATE, 
										CLIMATE_ARCTIC, 
										ABOVE_SNOWLINE
										)];
		//building_class:			2;	
		}
	graphics {
		default: 					switch_petrol_station_02;
		construction_check:			switch_petrol_station_02_con_check;
		protection:					switch_petrol_station_02_pro_check;
		cargo_production: 			func_produce(5,3);
		colour: 					rand_recolor_petrol_station_02;
	}
}

// End petrol_station_02
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/shops/petrol_station_03.pnml" 1
// Begin petrol_station_03

// Building Sprites
spriteset (spr_build_petrol_station_03, 			"src/gfx/shops/petrol_station_03/building.png") 			{template_house_80(1,1)}
spriteset (spr_build_petrol_station_03_snow, 		"src/gfx/shops/petrol_station_03/building.png") 			{template_house_80(1,82)}

// Ground Sprites
spriteset (spr_ground_petrol_station_03, 			"src/gfx/shops/petrol_station_03/ground.png") 				{template_ground(1,1)}
spriteset (spr_ground_petrol_station_03_snow, 		"src/gfx/shops/petrol_station_03/ground.png") 				{template_ground(1,33)}

// Normal Sprites
spritelayout sprlay_petrol_station_03_north {
	ground {
		sprite: spr_ground_petrol_station_03(0);
	}
	building {
		sprite: spr_build_petrol_station_03(0);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_petrol_station_03_west {
	ground {
		sprite: spr_ground_petrol_station_03(1);
	}
	building {
		sprite: spr_build_petrol_station_03(1);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_petrol_station_03_snow_north {
	ground {
		sprite: spr_ground_petrol_station_03_snow(0);
	}
	building {
		sprite: spr_build_petrol_station_03_snow(0);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_petrol_station_03_snow_west {
	ground {
		sprite: spr_ground_petrol_station_03_snow(1);
	}
	building {
		sprite: spr_build_petrol_station_03_snow(1);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_petrol_station_03_north,terrain_type) {
	TILETYPE_SNOW: sprlay_petrol_station_03_snow_north;
	sprlay_petrol_station_03_north;
}
switch(FEAT_HOUSES, SELF, switch_petrol_station_03_west,terrain_type) {
	TILETYPE_SNOW: sprlay_petrol_station_03_snow_west;
	sprlay_petrol_station_03_west;
}

// Recolouring

random_switch (FEAT_HOUSES, SELF, rand_recolor_petrol_station_03)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
	}


// Construction Check
switch (FEAT_HOUSES, SELF, switch_petrol_station_03_con_check, 
	HasRoadAdjacentSE() &&		// Must have road to the SW
	ThirtyTileGap()				// Can't appear within 30 tiles of another
) {return;}	

// Protection Check
switch (FEAT_HOUSES, SELF, switch_petrol_station_03_pro_check, 
	HasRoadAdjacentSE() &&		// Must have road to the SW
	FuncServicePETR()			// Must have PETR delivered
	) {return;}	

item(FEAT_HOUSES, item_petrol_station_03, 110, HOUSE_SIZE_2X1){
	property {
		substitute: 				76; 													
		name: 						string(NAME_PETROL_STATION_01);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED,HOUSE_FLAG_PROTECTED);	// Want flat land
		population: 				80;														// Agreed to JPS
		accepted_cargos: 			[[PASS, 4],[MAIL, 2],[GOOD, 2],[PETR, 8]];				// Agreed to JPS and added Petrol
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[1950,1989];	
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(
										//TOWNZONE_CENTRE,
										//TOWNZONE_INNER_SUBURB,
										TOWNZONE_OUTER_SUBURB,
										TOWNZONE_OUTSKIRT,
										TOWNZONE_EDGE
										), 
									bitmask(
										CLIMATE_TEMPERATE, 
										CLIMATE_ARCTIC, 
										ABOVE_SNOWLINE
										)];
		//building_class:			2;	
		}
	graphics {
		graphics_north: 			switch_petrol_station_03_north;
		graphics_west: 				switch_petrol_station_03_west;
		construction_check:			switch_petrol_station_03_con_check;
		protection:					switch_petrol_station_03_pro_check;
		cargo_production: 			func_produce(20,5);
		colour: 					rand_recolor_petrol_station_03;
	}
}

// End petrol_station_03
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/shops/yoshinoya_sushi_restaurant.pnml" 1
// Begin yoshinoya_sushi_restaurant

// Building Sprites
spriteset (spr_build_yoshinoya_sushi_restaurant, 							"src/gfx/shops/yoshinoya_sushi_restaurant/building.png") 					{template_house_80(1,1)}
spriteset (spr_build_yoshinoya_sushi_restaurant_snow, 						"src/gfx/shops/yoshinoya_sushi_restaurant/building.png") 					{template_house_80(1,82)}

// Ground Sprites
spriteset (spr_ground_yoshinoya_sushi_restaurant, 							"src/gfx/shops/yoshinoya_sushi_restaurant/ground.png") 						{template_house_80(1,1)}
spriteset (spr_ground_yoshinoya_sushi_restaurant_snow, 						"src/gfx/shops/yoshinoya_sushi_restaurant/ground.png") 						{template_house_80(1,82)}

// Normal Sprites
spritelayout sprlay_yoshinoya_sushi_restaurant {
	ground {
		sprite: spr_ground_yoshinoya_sushi_restaurant(construction_state);
	}
	building {
		sprite: spr_build_yoshinoya_sushi_restaurant(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_yoshinoya_sushi_restaurant_snow {
	ground {
		sprite: spr_ground_yoshinoya_sushi_restaurant_snow(construction_state);
	}
	building {
		sprite: spr_build_yoshinoya_sushi_restaurant_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_yoshinoya_sushi_restaurant,terrain_type) {
	TILETYPE_SNOW: sprlay_yoshinoya_sushi_restaurant_snow;
	sprlay_yoshinoya_sushi_restaurant;
}

// Recolouring

random_switch (FEAT_HOUSES, SELF, rand_recolor_yoshinoya_sushi_restaurant)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
	}


// Construction Check
switch (FEAT_HOUSES, SELF, switch_yoshinoya_sushi_restaurant_con_check, 
	HasRoadAdjacentSW() &&		// Must have road to the SW
	ThirtyTileGap()				// Can't appear within 30 tiles of another
) {return;}	

// Protection Check
switch (FEAT_HOUSES, SELF, switch_yoshinoya_sushi_restaurant_pro_check, 
	FuncServicePASS() 	&&		// Must have PASS delivered
	(FuncServiceFOOD()	||		// Must have either FOOD delivered
	FuncServiceEOIL()	||		// or Edible Oil
	FuncServiceFISH()   )		// or Fish	
	) {return;}	

item(FEAT_HOUSES, item_yoshinoya_sushi_restaurant, 64, HOUSE_SIZE_1X1){
	property {
		substitute: 				29; 													
		name: 						string(NAME_YOSHINOYA_SUSHI_RESTAURANT);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED);		// Want flat land
		population: 				50;									// Agreed to JPS
		accepted_cargos: 			[
										[PASS, 4],[MAIL, 2],			// Of course
										[FOOD, 8],						// Food in general
										[JAVA ,8],						// Coffee
										[EOIL, 8],						// Oil for cooking
										[LVST, 8],						// Meat for restaurant
										[FISH, 8],						// It's a sushi restuarant!
									];							
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[1950,0xFFFF];	
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(
										TOWNZONE_INNER_SUBURB,
										TOWNZONE_OUTER_SUBURB,
										TOWNZONE_OUTSKIRT
										), 
									bitmask(
										CLIMATE_TEMPERATE, 
										CLIMATE_ARCTIC, 
										ABOVE_SNOWLINE
										)];
		//building_class:			2;	
		}
	graphics {
		default: 					switch_yoshinoya_sushi_restaurant;
		construction_check:			switch_yoshinoya_sushi_restaurant_con_check;
		protection:					switch_yoshinoya_sushi_restaurant_pro_check;
		cargo_production: 			func_produce(20,5);
		colour: 					rand_recolor_yoshinoya_sushi_restaurant;
	}
}

// End yoshinoya_sushi_restaurant
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/shops/yoshinoya_restaurant.pnml" 1
// Begin yoshinoya_restaurant

// Building Sprites
spriteset (spr_build_yoshinoya_restaurant, 							"src/gfx/shops/yoshinoya_restaurant/building.png") 					{template_house_80_wide(1,1)}
spriteset (spr_build_yoshinoya_restaurant_snow, 					"src/gfx/shops/yoshinoya_restaurant/building.png") 					{template_house_80_wide(1,82)}

// Ground Sprites
spriteset (spr_ground_yoshinoya_restaurant, 						"src/gfx/shops/yoshinoya_restaurant/ground.png") 					{template_ground(1,1)}
spriteset (spr_ground_yoshinoya_restaurant_snow, 					"src/gfx/shops/yoshinoya_restaurant/ground.png") 					{template_ground(1,33)}

// Normal Sprites
spritelayout sprlay_yoshinoya_restaurant {
	ground {
		sprite: spr_ground_yoshinoya_restaurant(construction_state);
	}
	building {
		sprite: spr_build_yoshinoya_restaurant(construction_state);
		yoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_yoshinoya_restaurant_snow {
	ground {
		sprite: spr_ground_yoshinoya_restaurant_snow(construction_state);
	}
	building {
		sprite: spr_build_yoshinoya_restaurant_snow(construction_state);
		yoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_yoshinoya_restaurant,terrain_type) {
	TILETYPE_SNOW: sprlay_yoshinoya_restaurant_snow;
	sprlay_yoshinoya_restaurant;
}

// Recolouring

random_switch (FEAT_HOUSES, SELF, rand_recolor_yoshinoya_restaurant)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
	}


// Construction Check
switch (FEAT_HOUSES, SELF, switch_yoshinoya_restaurant_con_check, 
	HasRoadAdjacentSW() &&		// Must have road to the SW
	ThirtyTileGap()				// Can't appear within 30 tiles of another
) {return;}	

// Protection Check
switch (FEAT_HOUSES, SELF, switch_yoshinoya_restaurant_pro_check, 
	FuncServicePASS() 	&&		// Must have PASS delivered
	(FuncServiceFOOD()	||		// Must have either FOOD delivered
	FuncServiceEOIL()	||		// or Edible Oil
	FuncServiceFISH()   )		// or Fish	
	) {return;}	

item(FEAT_HOUSES, item_yoshinoya_restaurant, 96, HOUSE_SIZE_1X1){
	property {
		substitute: 				29; 													
		name: 						string(NAME_YOSHINOYA_RESTAURANT);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED);		// Want flat land
		population: 				60;									// Agreed to JPS
		accepted_cargos: 			[
										[PASS, 4],[MAIL, 2],			// Of course
										[FOOD, 8],						// Food in general
										[JAVA ,8],						// Coffee
										[EOIL, 8],						// Oil for cooking
										[LVST, 8],						// Meat for restaurant
										[FISH, 8],						// It's a sushi restuarant!
									];							
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[1955,0xFFFF];	
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(
										TOWNZONE_INNER_SUBURB,
										TOWNZONE_OUTER_SUBURB,
										TOWNZONE_OUTSKIRT
										), 
									bitmask(
										CLIMATE_TEMPERATE, 
										CLIMATE_ARCTIC, 
										ABOVE_SNOWLINE
										)];
		//building_class:			2;	
		}
	graphics {
		default: 					switch_yoshinoya_restaurant;
		construction_check:			switch_yoshinoya_restaurant_con_check;
		protection:					switch_yoshinoya_restaurant_pro_check;
		cargo_production: 			func_produce(20,5);
		colour: 					rand_recolor_yoshinoya_restaurant;
	}
}

// End yoshinoya_restaurant
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/shops/shops_small_01.pnml" 1
// Begin shops_small_01

// Building Sprites
spriteset (spr_build_shops_small_01, 							"src/gfx/shops/shops_small_01/building.png") 					{template_house_80(1,1)}
spriteset (spr_build_shops_small_01_snow, 						"src/gfx/shops/shops_small_01/building.png") 					{template_house_80(1,82)}

// Ground Sprites
spriteset (spr_ground_shops_small_01, 							"src/gfx/shops/shops_small_01/ground.png") 						{template_house_80(1,1)}
spriteset (spr_ground_shops_small_01_snow, 						"src/gfx/shops/shops_small_01/ground.png") 						{template_house_80(1,82)}

// Normal Sprites
spritelayout sprlay_shops_small_01 {
	ground {
		sprite: spr_ground_shops_small_01(construction_state);
	}
	building {
		sprite: spr_build_shops_small_01(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_shops_small_01_snow {
	ground {
		sprite: spr_ground_shops_small_01_snow(construction_state);
	}
	building {
		sprite: spr_build_shops_small_01_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_shops_small_01,terrain_type) {
	TILETYPE_SNOW: sprlay_shops_small_01_snow;
	sprlay_shops_small_01;
}

// Recolouring

random_switch (FEAT_HOUSES, SELF, rand_recolor_shops_small_01)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
	}


// Construction Check
switch (FEAT_HOUSES, SELF, switch_shops_small_01_con_check, 
	HasRoadAdjacentSW() &&		// Must have road to the SW
	TwentyTileGap()				// Can't appear within 20 tiles of another
) {return;}	

// Protection Check
switch (FEAT_HOUSES, SELF, switch_shops_small_01_pro_check, 
	FuncServicePASS() 	&&		// Must have PASS delivered
	(FuncServiceFOOD()	||		// Must have either FOOD delivered
	FuncServiceGOOD()	||		// or GOOD
	FuncServiceCASS()	||		// or CASS
	FuncServiceFRUT()   )		// or FRUT	
) {return;}	

item(FEAT_HOUSES, item_shops_small_01, 7, HOUSE_SIZE_1X1){
	property {
		substitute: 				29; 													
		name: 						string(NAME_SHOPS_SMALL_01);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED);		// Want flat land
		population: 				50;									// Agreed to JPS
		accepted_cargos: 			[
										[PASS, 4],[MAIL, 2],			// Of course
										[FOOD, 8],						// Food in general
										[GOOD, 8],						// Food in general
										[FRUT ,8],						// Fruit
										[LVST, 8],						// Meat
										[CASS, 8],						// Cassava
									];							
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[1930,0xFFFF];	
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(
										TOWNZONE_CENTRE,
										TOWNZONE_INNER_SUBURB,
										TOWNZONE_OUTER_SUBURB
										//TOWNZONE_OUTSKIRT
										), 
									bitmask(
										CLIMATE_TEMPERATE, 
										CLIMATE_ARCTIC, 
										ABOVE_SNOWLINE
										)];
		//building_class:			2;	
		}
	graphics {
		default: 					switch_shops_small_01;
		construction_check:			switch_shops_small_01_con_check;
		protection:					switch_shops_small_01_pro_check;
		cargo_production: 			func_produce(10,3);
		colour: 					rand_recolor_shops_small_01;
	}
}

// End shops_small_01
# 1 "JPplusBuildings.pnml" 4

// OFFICES
# 1 "src/houses/offices/yamaguchi_office.pnml" 1
// Begin yamaguchi_office

// Building Sprites
spriteset (spr_yamaguchi_office, 							"src/gfx/offices/yamaguchi_office/building.png") 						{template_house_128_1dir(1,1)}
spriteset (spr_yamaguchi_office_snow, 					"src/gfx/offices/yamaguchi_office/building.png") 						{template_house_128_1dir(1,130)}

// Ground Tiles
spriteset (spr_yamaguchi_office_ground, 					"src/gfx/offices/yamaguchi_office/ground.png") 						{template_ground(1,1)}
spriteset (spr_yamaguchi_office_ground_snow, 				"src/gfx/offices/yamaguchi_office/ground.png") 						{template_ground(1,33)}

spritelayout sprlay_yamaguchi_office_norm {
	ground {
		sprite: spr_yamaguchi_office_ground(3);
	}
	building {
		sprite: spr_yamaguchi_office(3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_yamaguchi_office_snow {
	ground {
		sprite: spr_yamaguchi_office_ground_snow(3);
	}
	building {
		sprite: spr_yamaguchi_office_snow(3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_yamaguchi_office_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_yamaguchi_office_snow;
	sprlay_yamaguchi_office_norm;
}


// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_yamaguchi_office)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		// 1: PALETTE_CC_PINK;		// Nah
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_yamaguchi_office_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	CommercialCargoes() &&			// Commerical Cargo Requirement as per parameter
	Class2PopCheck() &&				// Is there population to allow another Class 2?
	IsUniqueHouse()	&&				// Only one per city
	ClusterBuildingClass()			// Must be within two tiles of the same building class
) {return;}	

item(FEAT_HOUSES, item_yamaguchi_office, 36, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						string(NAME_YAMAGUCHI_OFFICE);
		population: 				30;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				5;
		years_available: 			[1945,0xFFFF];
		minimum_lifetime: 			8;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class: 			2;
		}
	graphics {
		default: 					switch_yamaguchi_office_sprites;
		construction_check: 		switch_yamaguchi_office_con_check; 	
		cargo_production: 			func_produce(13,4);
		colour: 					rand_recolor_yamaguchi_office;
	}
}

// End yamaguchi_office
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/offices/aoyama_office.pnml" 1
// Begin Aoyama Office Building

// Building Sprites
spriteset (spr_aoyama_office, 						"src/gfx/offices/aoyama_office/building.png") 						{template_house_128(1,1)}
spriteset (spr_aoyama_office_snow, 					"src/gfx/offices/aoyama_office/building.png") 						{template_house_128(1,130)}

// Ground Tiles
spriteset (spr_aoyama_office_ground, 				"src/gfx/offices/aoyama_office/ground.png") 						{template_ground(1,1)}
spriteset (spr_aoyama_office_ground_snow, 			"src/gfx/offices/aoyama_office/ground.png") 						{template_ground(1,33)}

spritelayout sprlay_aoyama_office_norm {
	ground {
		sprite: spr_aoyama_office_ground(construction_state);
	}
	building {
		sprite: spr_aoyama_office(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_aoyama_office_snow {
	ground {
		sprite: spr_aoyama_office_ground_snow(construction_state);
	}
	building {
		sprite: spr_aoyama_office_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_aoyama_office_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_aoyama_office_snow;
	sprlay_aoyama_office_norm;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_aoyama_office)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_aoyama_office_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	CommercialCargoes() &&			// Commerical Cargo Requirement as per parameter
	Class2PopCheck() &&				// Is there population to allow another Class 2?
	ClusterBuildingClass()			// Must be within two tiles of the same building class
) {return;}	

item(FEAT_HOUSES, item_aoyama_office, 37, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						string(NAME_AOYAMA_OFFICE);
		population: 				30;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				8;
		years_available: 			[1945,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class: 			2;
		}
	graphics {
		default: 					switch_aoyama_office_sprites;
		construction_check: 		switch_aoyama_office_con_check;
		protection:					ProtectClassTwo;	
		cargo_production: 			func_produce(13,4);
		colour: 					rand_recolor_aoyama_office;
	}
}

// End Aoyama Office Building
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/offices/aoki_office.pnml" 1
// Begin aoki_office

// Building Sprites
spriteset (spr_aoki_office, 							"src/gfx/offices/aoki_office/building.png") 						{template_house_100(1,1)}
spriteset (spr_aoki_office_snow, 						"src/gfx/offices/aoki_office/building.png") 						{template_house_100(1,102)}

// Ground Tiles
spriteset (spr_aoki_office_ground, 					"src/gfx/offices/aoki_office/ground.png") 						{template_house_100(1,1)}
spriteset (spr_aoki_office_ground_snow, 				"src/gfx/offices/aoki_office/ground.png") 						{template_house_100(1,102)}

spritelayout sprlay_aoki_office_norm {
	ground {
		sprite: spr_aoki_office_ground(construction_state);
	}
	building {
		sprite: spr_aoki_office(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_aoki_office_snow {
	ground {
		sprite: spr_aoki_office_ground_snow(construction_state);
	}
	building {
		sprite: spr_aoki_office_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_aoki_office_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_aoki_office_snow;
	sprlay_aoki_office_norm;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_aoki_office)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_aoki_office_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	CommercialCargoes() &&			// Commerical Cargo Requirement as per parameter
	Class2PopCheck() &&				// Is there population to allow another Class 2?
	ClusterBuildingClass()			// Must be within two tiles of the same building class
) {return;}	

item(FEAT_HOUSES, item_aoki_office, 49, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						string(NAME_AOKI_OFFICE);
		population: 				30;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				5;
		years_available: 			[1970,0xFFFF];
		minimum_lifetime: 			8;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE,TOWNZONE_INNER_SUBURB), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class: 			2;
		}
	graphics {
		default: 					switch_aoki_office_sprites;
		construction_check: 		switch_aoki_office_con_check; 	
		cargo_production: 			func_produce(13,4);
		colour: 					rand_recolor_aoki_office;
	}
}

// End aoki_office
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/offices/old_office_building.pnml" 1
// Begin old_office_building

// Building Sprites
spriteset (spr_old_office_building, 							"src/gfx/offices/old_office_building/building.png") 						{template_house_100(1,1)}
spriteset (spr_old_office_building_snow, 					"src/gfx/offices/old_office_building/building.png") 						{template_house_100(1,102)}

// Ground Tiles
spriteset (spr_old_office_building_ground, 					"src/gfx/offices/old_office_building/ground.png") 						{template_ground(1,1)}
spriteset (spr_old_office_building_ground_snow, 				"src/gfx/offices/old_office_building/ground.png") 						{template_ground(1,33)}

spritelayout sprlay_old_office_building_norm {
	ground {
		sprite: spr_old_office_building_ground(construction_state);
	}
	building {
		sprite: spr_old_office_building(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_old_office_building_snow {
	ground {
		sprite: spr_old_office_building_ground_snow(construction_state);
	}
	building {
		sprite: spr_old_office_building_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_old_office_building_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_old_office_building_snow;
	sprlay_old_office_building_norm;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_old_office_building)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_old_office_building_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	CommercialCargoes() &&			// Commerical Cargo Requirement as per parameter
	Class2PopCheck() &&				// Is there population to allow another Class 2?
	ClusterBuildingClass()			// Must be within two tiles of the same building class
) {return;}	

item(FEAT_HOUSES, item_old_office_building, 58, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						string(NAME_OLD_OFFICE_BUILDING);
		population: 				120;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				5;
		years_available: 			[1945,1979];
		minimum_lifetime: 			8;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE,TOWNZONE_INNER_SUBURB), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class: 			2;
		}
	graphics {
		default: 					switch_old_office_building_sprites;
		construction_check: 		switch_old_office_building_con_check; 	
		cargo_production: 			func_produce(13,4);
		colour: 					rand_recolor_old_office_building;
	}
}

// End old_office_building
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/offices/small_commercial_building.pnml" 1
// Begin small_commercial_building

// Building Sprites
spriteset (spr_small_commercial_building, 							"src/gfx/offices/small_commercial_building/building.png") 						{template_house_128(1,1)}
spriteset (spr_small_commercial_building_snow, 						"src/gfx/offices/small_commercial_building/building.png") 						{template_house_128(1,130)}

// Ground Tiles
spriteset (spr_small_commercial_building_ground, 					"src/gfx/offices/small_commercial_building/ground.png") 						{template_ground(1,1)}
spriteset (spr_small_commercial_building_ground_snow, 				"src/gfx/offices/small_commercial_building/ground.png") 						{template_ground(1,33)}

spritelayout sprlay_small_commercial_building_norm {
	ground {
		sprite: spr_small_commercial_building_ground(3);
	}
	building {
		sprite: spr_small_commercial_building(3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_small_commercial_building_snow {
	ground {
		sprite: spr_small_commercial_building_ground_snow(3);
	}
	building {
		sprite: spr_small_commercial_building_snow(3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_small_commercial_building_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_small_commercial_building_snow;
	sprlay_small_commercial_building_norm;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_small_commercial_building)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_small_commercial_building_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	CommercialCargoes() &&			// Commerical Cargo Requirement as per parameter
	Class2PopCheck() &&				// Is there population to allow another Class 2?
	ClusterBuildingClass()			// Must be within two tiles of the same building class
) {return;}	

item(FEAT_HOUSES, item_small_commercial_building, 59, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						string(NAME_SMALL_COMMERCIAL_BUILDING);
		population: 				120;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2],[GOOD, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				5;
		years_available: 			[1950,1989];
		minimum_lifetime: 			8;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class: 			2;
		}
	graphics {
		default: 					switch_small_commercial_building_sprites;
		construction_check: 		switch_small_commercial_building_con_check; 	
		cargo_production: 			func_produce(13,4);
		colour: 					rand_recolor_small_commercial_building;
	}
}

// End small_commercial_building
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/offices/obuilding.pnml" 1
// Begin O-Building

// Building Sprites
spriteset (spr_obuilding, 						"src/gfx/offices/obuilding/building.png") 						{template_house_128(1,1)}
spriteset (spr_obuilding_snow, 					"src/gfx/offices/obuilding/building.png") 						{template_house_128(1,130)}

// Ground Tiles
spriteset (spr_obuilding_ground, 				"src/gfx/offices/obuilding/ground.png") 						{template_ground(1,1)}
spriteset (spr_obuilding_ground_snow, 			"src/gfx/offices/obuilding/ground.png") 						{template_ground(1,33)}

// Spritelayouts
spritelayout sprlay_obuilding_norm {
	ground {
		sprite: spr_obuilding_ground(3);
	}
	building {
		sprite: spr_obuilding(3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_obuilding_snow {
	ground {
		sprite: spr_obuilding_ground_snow(3);
	}
	building {
		sprite: spr_obuilding_snow(3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_obuilding_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_obuilding_snow;
	sprlay_obuilding_norm;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_obuilding)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_obuilding_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	CommercialCargoes() &&			// Commerical Cargo Requirement as per parameter
	Class2PopCheck() &&				// Is there population to allow another Class 2?
	ClusterBuildingClass()			// Must be within two tiles of the same building class
) {return;}	

item(FEAT_HOUSES, item_obuilding, 38, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						string(NAME_OBUILDING);
		population: 				150;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2],[GOOD, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				5;
		years_available: 			[2000,0xFFFF];
		minimum_lifetime: 			8;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class: 			2;
		}
	graphics {
		default: 					switch_obuilding_sprites;
		construction_check: 		switch_obuilding_con_check;
		protection:					ProtectClassTwo;
		 	
		cargo_production: 			func_produce(13,4);
		colour: 					rand_recolor_obuilding;
	}
}

// End O-Building
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/offices/small_office_tower.pnml" 1
// Begin small_office_tower

// Building Sprites
spriteset (spr_small_office_tower_a, 						"src/gfx/offices/small_office_tower/building_a.png") 					{template_house_128(1,1)}
spriteset (spr_small_office_tower_a_snow, 					"src/gfx/offices/small_office_tower/building_a.png") 					{template_house_128(1,130)}

spriteset (spr_small_office_tower_b, 						"src/gfx/offices/small_office_tower/building_b.png") 					{template_house_128(1,1)}
spriteset (spr_small_office_tower_b_snow, 					"src/gfx/offices/small_office_tower/building_b.png") 					{template_house_128(1,130)}

// Ground Tiles
spriteset (spr_small_office_tower_ground, 					"src/gfx/offices/small_office_tower/ground.png") 						{template_ground(1,1)}
spriteset (spr_small_office_tower_ground_snow, 				"src/gfx/offices/small_office_tower/ground.png") 						{template_ground(1,33)}

// Spritelayouts
spritelayout sprlay_small_office_tower_a_norm {
	ground {
		sprite: spr_small_office_tower_ground (construction_state);
	}
	building {
		sprite: spr_small_office_tower_a (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_small_office_tower_a_snow {
	ground {
		sprite: spr_small_office_tower_ground_snow (construction_state);
	}
	building {
		sprite: spr_small_office_tower_a_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_small_office_tower_b_norm {
	ground {
		sprite: spr_small_office_tower_ground (construction_state);
	}
	building {
		sprite: spr_small_office_tower_b (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_small_office_tower_b_snow {
	ground {
		sprite: spr_small_office_tower_ground_snow (construction_state);
	}
	building {
		sprite: spr_small_office_tower_b_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_small_office_tower_a_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_small_office_tower_a_snow;
	sprlay_small_office_tower_a_norm;
}

switch(FEAT_HOUSES, SELF, switch_small_office_tower_b_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_small_office_tower_b_snow;
	sprlay_small_office_tower_b_norm;
}

// Random selection of sprites
random_switch (FEAT_HOUSES, SELF, switch_small_office_tower_sprites) {
	1: switch_small_office_tower_a_sprites;
	1: switch_small_office_tower_b_sprites;
}

// Recolouring
/*
random_switch (FEAT_HOUSES, SELF, rand_recolor_small_office_tower)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}
*/

// Construction Check
switch (FEAT_HOUSES, SELF, switch_small_office_tower_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	CommercialCargoes() &&			// Commerical Cargo Requirement as per parameter
	Class2PopCheck() &&				// Is there population to allow another Class 2?
	ClusterBuildingClass()			// Must be within two tiles of the same building class
) {return;}	

item(FEAT_HOUSES, item_small_office_tower, 88, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						string(NAME_SMALL_OFFICE_TOWER);
		population: 				120;
		accepted_cargos: 			[[PASS, 8],[MAIL, 4],[GOOD, 4]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				5;
		years_available: 			[1955,1969];
		minimum_lifetime: 			8;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class: 			2;
		}
	graphics {
		default: 					switch_small_office_tower_sprites;
		construction_check: 		switch_small_office_tower_con_check; 	
		cargo_production: 			func_produce(13,4);
		//colour: 					rand_recolor_small_office_tower;
	}
}

// End small_office_tower
# 1 "JPplusBuildings.pnml" 4
//#include "src/houses/offices/ybuilding.pnml"
# 1 "src/houses/offices/medium_office_tower.pnml" 1
// Begin medium_office_tower

// Building Sprites
spriteset (spr_medium_office_tower, 							"src/gfx/offices/medium_office_tower/building.png") 					{template_house_150(1,1)}
spriteset (spr_medium_office_tower_snow, 						"src/gfx/offices/medium_office_tower/building.png") 					{template_house_150(1,152)}

// Ground Tiles
spriteset (spr_medium_office_tower_ground, 						"src/gfx/offices/medium_office_tower/ground.png") 						{template_ground(1,1)}
spriteset (spr_medium_office_tower_ground_snow, 				"src/gfx/offices/medium_office_tower/ground.png") 						{template_ground(1,33)}

// Spritelayouts
spritelayout sprlay_medium_office_tower_norm {
	ground {
		sprite: spr_medium_office_tower_ground(3);
	}
	building {
		sprite: spr_medium_office_tower(3);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_medium_office_tower_snow {
	ground {
		sprite: spr_medium_office_tower_ground_snow(3);
	}
	building {
		sprite: spr_medium_office_tower_snow(3);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_medium_office_tower_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_medium_office_tower_snow;
	sprlay_medium_office_tower_norm;
}

// Recolouring
/*
random_switch (FEAT_HOUSES, SELF, rand_recolor_medium_office_tower)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}
*/

// Construction Check
switch (FEAT_HOUSES, SELF, switch_medium_office_tower_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	CommercialCargoes() &&			// Commerical Cargo Requirement as per parameter
	Class2PopCheck() &&				// Is there population to allow another Class 2?
	ClusterBuildingClass()			// Must be within two tiles of the same building class
) {return;}	

item(FEAT_HOUSES, item_medium_office_tower, 91, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						string(NAME_MEDIUM_OFFICE_TOWER);
		population: 				150;
		accepted_cargos: 			[[PASS, 4],[MAIL, 4],[GOOD, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				5;
		years_available: 			[1950,1989];
		minimum_lifetime: 			8;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class: 			2;
		}
	graphics {
		default: 					switch_medium_office_tower_sprites;
		construction_check: 		switch_medium_office_tower_con_check; 	
		cargo_production: 			func_produce(15,4);
		//colour: 					rand_recolor_medium_office_tower;
	}
}

// End medium_office_tower
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/offices/hashimoto_office_tower.pnml" 1
// Begin hashimoto_office_tower

// Building Sprites
spriteset (spr_hashimoto_office_tower_a, 						"src/gfx/offices/hashimoto_office_tower/building_a.png") 				{template_house_128(1,1)}
spriteset (spr_hashimoto_office_tower_a_snow, 					"src/gfx/offices/hashimoto_office_tower/building_a.png") 				{template_house_128(1,130)}

spriteset (spr_hashimoto_office_tower_b, 						"src/gfx/offices/hashimoto_office_tower/building_b.png") 				{template_house_128(1,1)}
spriteset (spr_hashimoto_office_tower_b_snow, 					"src/gfx/offices/hashimoto_office_tower/building_b.png") 				{template_house_128(1,130)}

// Ground Tiles
spriteset (spr_hashimoto_office_tower_ground, 					"src/gfx/offices/hashimoto_office_tower/ground.png") 					{template_ground(1,1)}
spriteset (spr_hashimoto_office_tower_ground_snow, 				"src/gfx/offices/hashimoto_office_tower/ground.png") 					{template_ground(1,33)}

// Normal Sprites
spritelayout sprlay_hashimoto_office_tower_a_norm {
	ground {
		sprite: spr_hashimoto_office_tower_ground (3);
	}
	building {
		sprite: 		spr_hashimoto_office_tower_a (3);
		//recolour_mode: 	RECOLOUR_REMAP; 
		//palette: 		PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_hashimoto_office_tower_b_norm {
	ground {
		sprite: spr_hashimoto_office_tower_ground (3);
	}
	building {
		sprite: 		spr_hashimoto_office_tower_b (3);
		//recolour_mode: 	RECOLOUR_REMAP; 
		//palette: 		PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_hashimoto_office_tower_a_snow {
	ground {
		sprite: 		spr_hashimoto_office_tower_ground_snow(3);
	}
	building {
		sprite: 		spr_hashimoto_office_tower_a_snow(3);
		//recolour_mode: 	RECOLOUR_REMAP; 
		//palette: 		PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_hashimoto_office_tower_b_snow {
	ground {
		sprite: 		spr_hashimoto_office_tower_ground_snow(3);
	}
	building {
		sprite: 		spr_hashimoto_office_tower_b_snow(3);
		//recolour_mode: 	RECOLOUR_REMAP; 
		//palette: 		PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_hashimoto_office_tower_a_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_hashimoto_office_tower_a_snow;
	sprlay_hashimoto_office_tower_a_norm;
}

switch(FEAT_HOUSES, SELF, switch_hashimoto_office_tower_b_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_hashimoto_office_tower_b_snow;
	sprlay_hashimoto_office_tower_b_norm;
}

// Random selection of sprites
random_switch (FEAT_HOUSES, SELF, switch_hashimoto_office_tower_sprites) {
	1: switch_hashimoto_office_tower_a_sprites;
	1: switch_hashimoto_office_tower_b_sprites;
}


// Recolouring
/*
random_switch (FEAT_HOUSES, SELF, rand_recolor_hashimoto_office_tower)
	{
		//1: PALETTE_CC_RED;			// too in your face
		2: PALETTE_CC_LIGHT_BLUE;
		//1: PALETTE_CC_PINK;			// too silly
		1: PALETTE_CC_DARK_BLUE;
		//1: PALETTE_CC_GREEN;			// nah
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}
*/
// Construction Check
switch (FEAT_HOUSES, SELF, switch_hashimoto_office_tower_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	CommercialCargoes() &&			// Commerical Cargo Requirement as per parameter
	Class2PopCheck() &&				// Is there population to allow another Class 2?
	ClusterBuildingClass()			// Must be within two tiles of the same building class
) {return;}	

item(FEAT_HOUSES, item_hashimoto_office_tower, 104, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						string(NAME_HASHIMOTO_OFFICE_TOWER);
		population: 				100;
		accepted_cargos: 			[[PASS, 4],[MAIL, 4],[GOOD, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1950,1989];
		minimum_lifetime: 			8;
		availability_mask: 			[bitmask(							// JPS Zones = 3 & 2, ITL = All Zones
										TOWNZONE_CENTRE				// 4
										//TOWNZONE_INNER_SUBURB,	// 3
										//TOWNZONE_OUTER_SUBURB		// 2
										//TOWNZONE_OUTSKIRT			// 1
										//TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				2;
		}
	graphics {
		default: 					switch_hashimoto_office_tower_sprites;
		construction_check: 		switch_hashimoto_office_tower_con_check;
		cargo_production: 			func_produce(15,4);
		//colour: 					rand_recolor_hashimoto_office_tower;
	}
}

// End hashimoto_office_tower
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/offices/hotel_grand.pnml" 1
// Begin hotel_grand

// Building Sprites
spriteset (spr_build_hotel_grand_north, 							"src/gfx/offices/hotel_grand/building.png") 					{template_house_200(1,1)}
spriteset (spr_build_hotel_grand_east, 							"src/gfx/offices/hotel_grand/building.png") 					{template_house_200(261,1)}

spriteset (spr_build_hotel_grand_north_snow, 						"src/gfx/offices/hotel_grand/building.png") 					{template_house_200(1,202)}
spriteset (spr_build_hotel_grand_east_snow, 						"src/gfx/offices/hotel_grand/building.png") 					{template_house_200(261,202)}

// Ground Sprites
spriteset (spr_ground_hotel_grand_north, 							"src/gfx/offices/hotel_grand/ground.png") 						{template_ground(1,1)}
spriteset (spr_ground_hotel_grand_east, 							"src/gfx/offices/hotel_grand/ground.png") 						{template_ground(261,1)}

spriteset (spr_ground_hotel_grand_north_snow, 						"src/gfx/offices/hotel_grand/ground.png") 						{template_ground(1,33)}
spriteset (spr_ground_hotel_grand_east_snow, 						"src/gfx/offices/hotel_grand/ground.png") 						{template_ground(261,33)}

// Normal Sprites
spritelayout sprlay_hotel_grand_north {
	ground {
		sprite: spr_ground_hotel_grand_north (construction_state);
	}
	building {
		sprite: spr_build_hotel_grand_north (construction_state);
		xoffset:  3;
		yoffset:  3;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_hotel_grand_east {
	ground {
		sprite: spr_ground_hotel_grand_east (construction_state);
	}
	building {
		sprite: spr_build_hotel_grand_east (construction_state);
		xoffset:  3;
		yoffset:  3;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_hotel_grand_snow_north {
	ground {
		sprite: spr_ground_hotel_grand_north_snow (construction_state);
	}
	building {
		sprite: spr_build_hotel_grand_north_snow (construction_state);
		xoffset:  3;
		yoffset:  3;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_hotel_grand_snow_east {
	ground {
		sprite: spr_ground_hotel_grand_east_snow (construction_state);
	}
	building {
		sprite: spr_build_hotel_grand_east_snow (construction_state);
		xoffset:  3;
		yoffset:  3;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_hotel_grand_north,terrain_type) {
	TILETYPE_SNOW: sprlay_hotel_grand_snow_north;
	sprlay_hotel_grand_north;
}
switch(FEAT_HOUSES, SELF, switch_hotel_grand_east,terrain_type) {
	TILETYPE_SNOW: sprlay_hotel_grand_snow_east;
	sprlay_hotel_grand_east;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_hotel_grand)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_hotel_grand_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	CommercialCargoes() &&			// Commerical Cargo Requirement as per parameter
	Class2PopCheck() &&				// Is there population to allow another Class 2
	ClusterBuildingClass() &&		// Must be within two tiles of the same building class
	PopOver10k()					// Population requirement !!! TBU !!!
) {return;}		
 

item(FEAT_HOUSES, item_hotel_grand, 74, HOUSE_SIZE_1X2){
	property {
		substitute: 				7; 													
		name: 						string(NAME_HOTEL_GRAND);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED);
		population: 				200;
		accepted_cargos: 			[[PASS, 8],[MAIL, 4],[FOOD, 8],[BEER, 8]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[2000,0xFFFF];
		minimum_lifetime: 			20;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class:				2;	
		}
	graphics {
		graphics_north: 			switch_hotel_grand_north;
		graphics_east: 				switch_hotel_grand_east;
		construction_check:			switch_hotel_grand_con_check;
		cargo_production: 			func_produce(24,10);
		colour: 					rand_recolor_hotel_grand;
	}
}

// End hotel_grand
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/offices/hotel.pnml" 1
// Begin hotel

// Building Sprites
spriteset (spr_build_hotel_north, 							"src/gfx/offices/hotel/building.png") 					{template_house_200(1,1)}
spriteset (spr_build_hotel_east, 							"src/gfx/offices/hotel/building.png") 					{template_house_200(261,1)}

spriteset (spr_build_hotel_north_snow, 						"src/gfx/offices/hotel/building.png") 					{template_house_200(1,202)}
spriteset (spr_build_hotel_east_snow, 						"src/gfx/offices/hotel/building.png") 					{template_house_200(261,202)}

// Ground Sprites
spriteset (spr_ground_hotel_north, 							"src/gfx/offices/hotel/ground.png") 						{template_ground(1,1)}
spriteset (spr_ground_hotel_east, 							"src/gfx/offices/hotel/ground.png") 						{template_ground(261,1)}

spriteset (spr_ground_hotel_north_snow, 						"src/gfx/offices/hotel/ground.png") 						{template_ground(1,33)}
spriteset (spr_ground_hotel_east_snow, 						"src/gfx/offices/hotel/ground.png") 						{template_ground(261,33)}

// Normal Sprites
spritelayout sprlay_hotel_north {
	ground {
		sprite: spr_ground_hotel_north (construction_state);
	}
	building {
		sprite: spr_build_hotel_north (construction_state);
		xoffset:  7;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_hotel_east {
	ground {
		sprite: spr_ground_hotel_east (construction_state);
	}
	building {
		sprite: spr_build_hotel_east (construction_state);
		yoffset:  3;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_hotel_snow_north {
	ground {
		sprite: spr_ground_hotel_north_snow (construction_state);
	}
	building {
		sprite: spr_build_hotel_north_snow (construction_state);
		xoffset:  7;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_hotel_snow_east {
	ground {
		sprite: spr_ground_hotel_east_snow (construction_state);
	}
	building {
		sprite: spr_build_hotel_east_snow (construction_state);
		yoffset:  3;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_hotel_north,terrain_type) {
	TILETYPE_SNOW: sprlay_hotel_snow_north;
	sprlay_hotel_north;
}
switch(FEAT_HOUSES, SELF, switch_hotel_east,terrain_type) {
	TILETYPE_SNOW: sprlay_hotel_snow_east;
	sprlay_hotel_east;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_hotel)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_hotel_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	CommercialCargoes() &&			// Commerical Cargo Requirement as per parameter
	Class2PopCheck() &&				// Is there population to allow another Class 2?
	ClusterBuildingClass() &&		// Must be within two tiles of the same building class
	PopOver10k()					// Population requirement !!! TBU !!!
) {return;}		
 

item(FEAT_HOUSES, item_hotel, 28, HOUSE_SIZE_1X2){
	property {
		substitute: 				7; 													
		name: 						string(NAME_HOTEL);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED);
		population: 				200;
		accepted_cargos: 			[[PASS, 8],[MAIL, 4],[FOOD, 8],[BEER, 8]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[1980,0xFFFF];
		minimum_lifetime: 			20;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class:				2;	
		}
	graphics {
		graphics_north: 			switch_hotel_north;
		graphics_east: 				switch_hotel_east;
		construction_check:			switch_hotel_con_check;
		cargo_production: 			func_produce(24,10);
		colour: 					rand_recolor_hotel;
	}
}

// End hotel
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/offices/hotel_old.pnml" 1
// Begin hotel_old

// Building Sprites
spriteset (spr_build_hotel_old_north, 							"src/gfx/offices/hotel_old/building.png") 					{template_house_128(1,1)}
spriteset (spr_build_hotel_old_east, 							"src/gfx/offices/hotel_old/building.png") 					{template_house_128(261,1)}

spriteset (spr_build_hotel_old_north_snow, 						"src/gfx/offices/hotel_old/building.png") 					{template_house_128(1,130)}
spriteset (spr_build_hotel_old_east_snow, 						"src/gfx/offices/hotel_old/building.png") 					{template_house_128(261,130)}

// Ground Sprites
spriteset (spr_ground_hotel_old_north, 							"src/gfx/offices/hotel_old/ground.png") 					{template_ground(1,1)}
spriteset (spr_ground_hotel_old_east, 							"src/gfx/offices/hotel_old/ground.png") 					{template_ground(261,1)}

spriteset (spr_ground_hotel_old_north_snow, 					"src/gfx/offices/hotel_old/ground.png") 					{template_ground(1,33)}
spriteset (spr_ground_hotel_old_east_snow, 						"src/gfx/offices/hotel_old/ground.png") 					{template_ground(261,33)}

// Normal Sprites
spritelayout sprlay_hotel_old_north {
	ground {
		sprite: spr_ground_hotel_old_north (construction_state);
	}
	building {
		sprite: spr_build_hotel_old_north (construction_state);
		xoffset:  5;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_hotel_old_east {
	ground {
		sprite: spr_ground_hotel_old_east (construction_state);
	}
	building {
		sprite: spr_build_hotel_old_east (construction_state);
		xoffset:  2;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_hotel_old_snow_north {
	ground {
		sprite: spr_ground_hotel_old_north_snow (construction_state);
	}
	building {
		sprite: spr_build_hotel_old_north_snow (construction_state);
		xoffset:  5;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_hotel_old_snow_east {
	ground {
		sprite: spr_ground_hotel_old_east_snow (construction_state);
	}
	building {
		sprite: spr_build_hotel_old_east_snow (construction_state);
		xoffset:  2;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_hotel_old_north,terrain_type) {
	TILETYPE_SNOW: sprlay_hotel_old_snow_north;
	sprlay_hotel_old_north;
}
switch(FEAT_HOUSES, SELF, switch_hotel_old_east,terrain_type) {
	TILETYPE_SNOW: sprlay_hotel_old_snow_east;
	sprlay_hotel_old_east;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_hotel_old)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_hotel_old_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	CommercialCargoes() &&			// Commerical Cargo Requirement as per parameter
	Class2PopCheck() &&				// Residential population is sufficient for another Skyscraper
	ClusterBuildingClass() &&		// Must be within two tiles of the same building class
	PopOver10k()					// Population requirement !!! TBU !!!
) {return;}		
 

item(FEAT_HOUSES, item_hotel_old, 115, HOUSE_SIZE_1X2){
	property {
		substitute: 				7; 													
		name: 						string(NAME_HOTEL_OLD);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED);
		population: 				200;
		accepted_cargos: 			[[PASS, 8],[MAIL, 4],[FOOD, 8],[BEER, 8]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[1955,1989];
		minimum_lifetime: 			20;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class:				2;	
		}
	graphics {
		graphics_north: 			switch_hotel_old_north;
		graphics_east: 				switch_hotel_old_east;
		construction_check:			switch_hotel_old_con_check;
		cargo_production: 			func_produce(24,10);
		colour: 					rand_recolor_hotel_old;
	}
}

// End hotel_old
# 1 "JPplusBuildings.pnml" 4

// SKYSCRAPERS
# 1 "src/houses/skyscrapers/tsuno_building.pnml" 1
// Begin tsuno_building

// Building Sprites
spriteset (spr_build_tsuno_building_north, 							"src/gfx/skyscrapers/tsuno_building/building.png") 						{template_house_250(261,1)}
spriteset (spr_build_tsuno_building_east, 							"src/gfx/skyscrapers/tsuno_building/building.png") 						{template_house_250(1,1)}

spriteset (spr_build_tsuno_building_north_snow, 					"src/gfx/skyscrapers/tsuno_building/building.png") 						{template_house_250(261,252)}
spriteset (spr_build_tsuno_building_east_snow, 						"src/gfx/skyscrapers/tsuno_building/building.png") 						{template_house_250(1,252)}

// Ground Sprites
spriteset (spr_ground_tsuno_building_north, 						"src/gfx/skyscrapers/tsuno_building/ground.png") 						{template_house_250(261,1)}
spriteset (spr_ground_tsuno_building_east, 							"src/gfx/skyscrapers/tsuno_building/ground.png") 						{template_house_250(1,1)}

spriteset (spr_ground_tsuno_building_north_snow, 					"src/gfx/skyscrapers/tsuno_building/ground.png") 						{template_house_250(261,252)}
spriteset (spr_ground_tsuno_building_east_snow, 					"src/gfx/skyscrapers/tsuno_building/ground.png") 						{template_house_250(1,252)}

// Normal Sprites
spritelayout sprlay_tsuno_building_north {
	ground {
		sprite: spr_ground_tsuno_building_north(construction_state);
	}
	building {
		sprite: spr_build_tsuno_building_north(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_tsuno_building_east {
	ground {
		sprite: spr_ground_tsuno_building_east(construction_state);
	}
	building {
		sprite: spr_build_tsuno_building_east(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_tsuno_building_snow_north {
	ground {
		sprite: spr_ground_tsuno_building_north_snow(construction_state);
	}
	building {
		sprite: spr_build_tsuno_building_north_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_tsuno_building_snow_east {
	ground {
		sprite: spr_ground_tsuno_building_east_snow(construction_state);
	}
	building {
		sprite: spr_build_tsuno_building_east_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_tsuno_building_north,terrain_type) {
	TILETYPE_SNOW: sprlay_tsuno_building_snow_north;
	sprlay_tsuno_building_north;
}
switch(FEAT_HOUSES, SELF, switch_tsuno_building_east,terrain_type) {
	TILETYPE_SNOW: sprlay_tsuno_building_snow_east;
	sprlay_tsuno_building_east;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_tsuno_building)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_tsuno_building_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	IsCity() && 					// Can only appear in cities
	IsUniqueHouse() &&				// Only one in city
	PopOver70k() &&					// Population of city check
	Class5PopCheck() &&				// Residential population is sufficient for another Skyscraper
	ClusterBuildingClass() &&		// Must be within two tiles of the same building class
	IfFirstSkyscraper() 			// If first skyscraper, it must build beside a Class 2
) {return;}		
 

item(FEAT_HOUSES, item_tsuno_building, 76, HOUSE_SIZE_1X2){
	property {
		substitute: 				7; 													
		name: 						string(NAME_TSUNO_BUILDING);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED,HOUSE_FLAG_PROTECTED);
		population: 				255;
		accepted_cargos: 			[[PASS, 8],[MAIL, 4],[GOOD, 4]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[2006,0xFFFF];
		minimum_lifetime: 			20;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class:				5;	
		}
	graphics {
		graphics_north: 			switch_tsuno_building_north;
		graphics_east: 				switch_tsuno_building_east;
		construction_check:			switch_tsuno_building_con_check;
		cargo_production: 			func_produce(24,10);
		colour: 					rand_recolor_tsuno_building;
	}
}

// End tsuno_building
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/skyscrapers/office_tower.pnml" 1
// Begin office_tower

// Building Sprites
spriteset (spr_build_office_tower, 							"src/gfx/skyscrapers/office_tower/building.png") 					{template_house_250(1,1)}
spriteset (spr_build_office_tower_snow, 					"src/gfx/skyscrapers/office_tower/building.png") 					{template_house_250(1,252)}

// Ground Sprites
spriteset (spr_ground_office_tower, 						"src/gfx/skyscrapers/office_tower/ground.png") 						{template_house_250(1,1)}
spriteset (spr_ground_office_tower_snow, 					"src/gfx/skyscrapers/office_tower/ground.png") 						{template_house_250(1,252)}

// Normal Sprites
spritelayout sprlay_office_tower {
	ground {
		sprite: spr_ground_office_tower(construction_state);
	}
	building {
		sprite: spr_build_office_tower(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_office_tower_snow {
	ground {
		sprite: spr_ground_office_tower_snow(construction_state);
	}
	building {
		sprite: spr_build_office_tower_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_office_tower,terrain_type) {
	TILETYPE_SNOW: sprlay_office_tower_snow;
	sprlay_office_tower;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_office_tower)
	{
		1: PALETTE_CC_RED;			
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;			
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_office_tower_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	IsCity() && 					// Can only appear in cities
	IsUniqueHouse() &&				// Only one in city
	PopOver50k() &&					// Population of city check
	Class5PopCheck() &&				// Residential population is sufficient for another Skyscraper
	ClusterBuildingClass() &&		// Must be within two tiles of the same building class
	IfFirstSkyscraper() 			// If first skyscraper, it must build beside a Class 2
) {return;}	

item(FEAT_HOUSES, item_office_tower, 78, HOUSE_SIZE_1X1){
	property {
		substitute: 				4; 													
		name: 						string(NAME_OFFICE_TOWER);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED,HOUSE_FLAG_PROTECTED);
		population: 				220;
		accepted_cargos: 			[[PASS, 8],[MAIL, 8],[GOOD, 8]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[2000,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class:				5;	
		}
	graphics {
		default: 					switch_office_tower;
		construction_check:			switch_office_tower_con_check;
		cargo_production: 			func_produce(24,10);
		colour: 					rand_recolor_office_tower; 						// No recolouring
	}
}

// End office_tower
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/skyscrapers/large_office_building.pnml" 1
// Begin large_office_building

// Building Sprites
spriteset (spr_build_large_office_building, 							"src/gfx/skyscrapers/large_office_building/building.png") 						{template_house_250_wide(1,1)}
spriteset (spr_build_large_office_building_snow, 						"src/gfx/skyscrapers/large_office_building/building.png") 						{template_house_250_wide(1,252)}

// Ground Sprites
spriteset (spr_ground_large_office_building, 							"src/gfx/skyscrapers/large_office_building/ground.png") 						{template_ground(1,1)}
spriteset (spr_ground_large_office_building_snow, 						"src/gfx/skyscrapers/large_office_building/ground.png") 						{template_ground(1,33)}

// Normal Sprites
spritelayout sprlay_large_office_building {
	ground {
		sprite: spr_ground_large_office_building(construction_state);
	}
	building {
		sprite: spr_build_large_office_building(construction_state);
		//xoffset: -1;
		//yoffset: -2;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_large_office_building_snow {
	ground {
		sprite: spr_ground_large_office_building_snow(construction_state);
	}
	building {
		sprite: spr_build_large_office_building_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_large_office_building,terrain_type) {
	TILETYPE_SNOW: sprlay_large_office_building_snow;
	sprlay_large_office_building;
}

// Recolouring
/*
random_switch (FEAT_HOUSES, SELF, rand_recolor_large_office_building)
	{
		1: PALETTE_CC_RED;			
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;			
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}
*/

// Construction Check
switch (FEAT_HOUSES, SELF, switch_large_office_building_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	IsCity() && 					// Can only appear in cities
	IsUniqueHouse() &&				// Only one in city
	PopOver70k() &&					// Population of city check
	Class5PopCheck() &&				// Residential population is sufficient for another Skyscraper
	ClusterBuildingClass() &&		// Must be within two tiles of the same building class
	IfFirstSkyscraper()				// If first skyscraper, it must build beside a Class 2
) {return;}	

item(FEAT_HOUSES, item_large_office_building, 79, HOUSE_SIZE_1X1){
	property {
		substitute: 				4; 													
		name: 						string(NAME_LARGE_OFFICE_TOWER);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED,HOUSE_FLAG_PROTECTED);
		population: 				220;
		accepted_cargos: 			[[PASS, 8],[MAIL, 8],[GOOD, 8]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[2000,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class:				5;	
		}
	graphics {
		default: 					switch_large_office_building;
		construction_check:			switch_large_office_building_con_check;
		cargo_production: 			func_produce(24,10);
		//colour: 					rand_recolor_large_office_building; 
	}
}

// End large_office_building
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/skyscrapers/multimedia_offices.pnml" 1
// Begin multimedia_offices

// Building Sprites
spriteset (spr_build_multimedia_offices, 			"src/gfx/skyscrapers/multimedia_offices/building.png") 				{template_house_200_wide(1,1)}
spriteset (spr_build_multimedia_offices_snow, 		"src/gfx/skyscrapers/multimedia_offices/building.png") 				{template_house_200_wide(1,202)}

// Ground Sprites
spriteset (spr_ground_multimedia_offices, 			"src/gfx/skyscrapers/multimedia_offices/ground.png") 				{template_house_80(1,1)}
spriteset (spr_ground_multimedia_offices_snow, 		"src/gfx/skyscrapers/multimedia_offices/ground.png") 				{template_house_80(1,82)}

// Normal Sprites
spritelayout sprlay_multimedia_offices {
	ground {
		sprite: spr_ground_multimedia_offices(construction_state);
	}
	building {
		sprite: spr_build_multimedia_offices(construction_state);
		xoffset: 3;
		yoffset: 0;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_multimedia_offices_snow {
	ground {
		sprite: spr_ground_multimedia_offices_snow(construction_state);
	}
	building {
		sprite: spr_build_multimedia_offices_snow(construction_state);
		xoffset: 3;
		yoffset: 0;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_multimedia_offices,terrain_type) {
	TILETYPE_SNOW: sprlay_multimedia_offices_snow;
	sprlay_multimedia_offices;
}

// Recolouring
/*
random_switch (FEAT_HOUSES, SELF, rand_recolor_multimedia_offices)
	{
		1: PALETTE_CC_RED;			
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;			
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}
*/

// Construction Check
switch (FEAT_HOUSES, SELF, switch_multimedia_offices_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	IsCity() && 					// Can only appear in cities
	IsUniqueHouse() &&				// Only one in city
	PopOver50k() &&					// Population of city check
	Class5PopCheck() &&				// Residential population is sufficient for another Skyscraper
	ClusterBuildingClass() &&		// Must be within two tiles of the same building class
	IfFirstSkyscraper() 			// If first skyscraper, it must build beside a Class 2
) {return;}	

item(FEAT_HOUSES, item_multimedia_offices, 80, HOUSE_SIZE_1X1){
	property {
		substitute: 				4; 													
		name: 						string(NAME_MULTIMEDIA_OFFICES);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED,HOUSE_FLAG_PROTECTED);
		population: 				220;
		accepted_cargos: 			[[PASS, 8],[MAIL, 8],[GOOD, 8]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[1990,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class:				5;	
		}
	graphics {
		default: 					switch_multimedia_offices;
		construction_check:			switch_multimedia_offices_con_check;
		cargo_production: 			func_produce(24,10);
		//colour: 					rand_recolor_multimedia_offices; 
	}
}

// End multimedia_offices
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/skyscrapers/enterprise_tower.pnml" 1
// Begin enterprise_tower

// Building Sprites
spriteset (spr_build_enterprise_tower, 			"src/gfx/skyscrapers/enterprise_tower/building.png") 				{template_house_200_wide(1,1)}
spriteset (spr_build_enterprise_tower_snow, 	"src/gfx/skyscrapers/enterprise_tower/building.png") 				{template_house_200_wide(1,202)}

// Ground Sprites
spriteset (spr_ground_enterprise_tower, 		"src/gfx/skyscrapers/enterprise_tower/ground.png") 				{template_house_80(1,1)}
spriteset (spr_ground_enterprise_tower_snow, 	"src/gfx/skyscrapers/enterprise_tower/ground.png") 				{template_house_80(1,82)}

// Normal Sprites
spritelayout sprlay_enterprise_tower {
	ground {
		sprite: spr_ground_enterprise_tower(construction_state);
	}
	building {
		sprite: spr_build_enterprise_tower(construction_state);
		xoffset:  0;
		yoffset:  3;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_enterprise_tower_snow {
	ground {
		sprite: spr_ground_enterprise_tower_snow(construction_state);
	}
	building {
		sprite: spr_build_enterprise_tower_snow(construction_state);
		xoffset:  0;
		yoffset:  3;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_enterprise_tower,terrain_type) {
	TILETYPE_SNOW: sprlay_enterprise_tower_snow;
	sprlay_enterprise_tower;
}

// Recolouring
/*
random_switch (FEAT_HOUSES, SELF, rand_recolor_enterprise_tower)
	{
		1: PALETTE_CC_RED;			
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;			
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}
*/

// Construction Check
switch (FEAT_HOUSES, SELF, switch_enterprise_tower_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	IsCity() && 					// Can only appear in cities
	IsUniqueHouse() &&				// Only one in city
	PopOver30k() &&					// Population of city check
	Class5PopCheck() &&				// Residential population is sufficient for another Skyscraper
	ClusterBuildingClass() &&		// Must be within two tiles of the same building class
	IfFirstSkyscraper() 			// If first skyscraper, it must build beside a Class 2
) {return;}	

item(FEAT_HOUSES, item_enterprise_tower, 81, HOUSE_SIZE_1X1){
	property {
		substitute: 				4; 													
		name: 						string(NAME_ENTERPRISE_TOWER);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED,HOUSE_FLAG_PROTECTED);
		population: 				220;
		accepted_cargos: 			[[PASS, 8],[MAIL, 8],[GOOD, 8]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[1990,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class:				5;	
		}
	graphics {
		default: 					switch_enterprise_tower;
		construction_check:			switch_enterprise_tower_con_check;
		cargo_production: 			func_produce(24,10);
		//colour: 					rand_recolor_enterprise_tower; 
	}
}

// End enterprise_tower
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/skyscrapers/insurance_tower.pnml" 1
// Begin insurance_tower

// Building Sprites
spriteset (spr_build_insurance_tower, 			"src/gfx/skyscrapers/insurance_tower/building.png") 				{template_house_200_wide(1,1)}
spriteset (spr_build_insurance_tower_snow, 		"src/gfx/skyscrapers/insurance_tower/building.png") 				{template_house_200_wide(1,202)}

// Ground Sprites
spriteset (spr_ground_insurance_tower, 			"src/gfx/skyscrapers/insurance_tower/ground.png") 				{template_house_80(1,1)}
spriteset (spr_ground_insurance_tower_snow, 	"src/gfx/skyscrapers/insurance_tower/ground.png") 				{template_house_80(1,82)}

// Normal Sprites
spritelayout sprlay_insurance_tower {
	ground {
		sprite: spr_ground_insurance_tower(construction_state);
	}
	building {
		sprite: spr_build_insurance_tower(construction_state);
		xoffset:  0;
		yoffset:  2;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_insurance_tower_snow {
	ground {
		sprite: spr_ground_insurance_tower_snow(construction_state);
	}
	building {
		sprite: spr_build_insurance_tower_snow(construction_state);
		xoffset:  0;
		yoffset:  2;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_insurance_tower,terrain_type) {
	TILETYPE_SNOW: sprlay_insurance_tower_snow;
	sprlay_insurance_tower;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_insurance_tower)
	{
		1: PALETTE_CC_RED;			
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;			
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_insurance_tower_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	IsCity() && 					// Can only appear in cities
	IsUniqueHouse() &&				// Only one in city
	PopOver30k() &&					// Population of city check
	Class5PopCheck() &&				// Residential population is sufficient for another Skyscraper
	ClusterBuildingClass() &&		// Must be within two tiles of the same building class
	IfFirstSkyscraper() 			// If first skyscraper, it must build beside a Class 2
) {return;}	

item(FEAT_HOUSES, item_insurance_tower, 82, HOUSE_SIZE_1X1){
	property {
		substitute: 				4; 													
		name: 						string(NAME_INSURANCE_TOWER);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED,HOUSE_FLAG_PROTECTED);
		population: 				200;
		accepted_cargos: 			[[PASS, 8],[MAIL, 8],[GOOD, 8]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[1960,0xFFFF];											// JPS=1989
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(
										TOWNZONE_CENTRE), 
									bitmask(
										CLIMATE_TEMPERATE, 
										CLIMATE_ARCTIC, ABOVE_SNOWLINE
									)];
		building_class:				5;	
		}
	graphics {
		default: 					switch_insurance_tower;
		construction_check:			switch_insurance_tower_con_check;
		cargo_production: 			func_produce(24,10);
		colour: 					rand_recolor_insurance_tower; 
	}
}

// End insurance_tower
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/skyscrapers/modern_office_tower.pnml" 1
// Begin modern_office_tower

// Building Sprites
spriteset (spr_build_modern_office_tower, 			"src/gfx/skyscrapers/modern_office_tower/building.png") 				{template_house_200_wide(1,1)}
spriteset (spr_build_modern_office_tower_snow, 		"src/gfx/skyscrapers/modern_office_tower/building.png") 				{template_house_200_wide(1,202)}

// Ground Sprites
spriteset (spr_ground_modern_office_tower, 			"src/gfx/skyscrapers/modern_office_tower/ground.png") 				{template_house_80(1,1)}
spriteset (spr_ground_modern_office_tower_snow, 		"src/gfx/skyscrapers/modern_office_tower/ground.png") 				{template_house_80(1,82)}

// Normal Sprites
spritelayout sprlay_modern_office_tower {
	ground {
		sprite: spr_ground_modern_office_tower(construction_state);
	}
	building {
		sprite: spr_build_modern_office_tower(construction_state);
		xoffset:  2;
		yoffset:  0;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_modern_office_tower_snow {
	ground {
		sprite: spr_ground_modern_office_tower_snow(construction_state);
	}
	building {
		sprite: spr_build_modern_office_tower_snow(construction_state);
		xoffset:  2;
		yoffset:  0;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_modern_office_tower,terrain_type) {
	TILETYPE_SNOW: sprlay_modern_office_tower_snow;
	sprlay_modern_office_tower;
}

// Recolouring

random_switch (FEAT_HOUSES, SELF, rand_recolor_modern_office_tower)
	{
		1: PALETTE_CC_RED;			
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;			
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}


// Construction Check
switch (FEAT_HOUSES, SELF, switch_modern_office_tower_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	IsCity() && 					// Can only appear in cities
	IsUniqueHouse() &&				// Only one in city
	PopOver50k() &&					// Population of city check
	Class5PopCheck() &&				// Residential population is sufficient for another Skyscraper
	ClusterBuildingClass() &&		// Must be within two tiles of the same building class
	IfFirstSkyscraper() 			// If first skyscraper, it must build beside a Class 2
) {return;}	

item(FEAT_HOUSES, item_modern_office_tower, 83, HOUSE_SIZE_1X1){
	property {
		substitute: 				4; 													
		name: 						string(NAME_MODERN_OFFICE_TOWER);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED,HOUSE_FLAG_PROTECTED);
		population: 				220;
		accepted_cargos: 			[[PASS, 8],[MAIL, 8],[GOOD, 8]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[2000,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class:				5;	
		}
	graphics {
		default: 					switch_modern_office_tower;
		construction_check:			switch_modern_office_tower_con_check;
		cargo_production: 			func_produce(24,10);
		colour: 					rand_recolor_modern_office_tower; 
	}
}

// End modern_office_tower
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/skyscrapers/sato_building.pnml" 1
// Begin sato_building

// Building Sprites
spriteset (spr_build_sato_building, 			"src/gfx/skyscrapers/sato_building/building.png") 				{template_house_200_wide(1,1)}
spriteset (spr_build_sato_building_snow, 		"src/gfx/skyscrapers/sato_building/building.png") 				{template_house_200_wide(1,202)}

// Ground Sprites
spriteset (spr_ground_sato_building, 			"src/gfx/skyscrapers/sato_building/ground.png") 				{template_ground(1,1)}
spriteset (spr_ground_sato_building_snow, 		"src/gfx/skyscrapers/sato_building/ground.png") 				{template_ground(1,33)}

// Normal Sprites
spritelayout sprlay_sato_building {
	ground {
		sprite: spr_ground_sato_building (construction_state);
	}
	building {
		sprite: spr_build_sato_building (construction_state);
		//xoffset:  2;
		//yoffset:  0;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_sato_building_snow {
	ground {
		sprite: spr_ground_sato_building_snow (construction_state);
	}
	building {
		sprite: spr_build_sato_building_snow (construction_state);
		//xoffset:  2;
		//yoffset:  0;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_sato_building,terrain_type) {
	TILETYPE_SNOW: sprlay_sato_building_snow;
	sprlay_sato_building;
}

// Recolouring

random_switch (FEAT_HOUSES, SELF, rand_recolor_sato_building)
	{
		1: PALETTE_CC_RED;			
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;			
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}


// Construction Check
switch (FEAT_HOUSES, SELF, switch_sato_building_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	IsCity() && 					// Can only appear in cities
	IsUniqueHouse() &&				// Only one in city
	PopOver10k() &&					// Population of city check
	Class5PopCheck() &&				// Residential population is sufficient for another Skyscraper
	ClusterBuildingClass() &&		// Must be within two tiles of the same building class
	IfFirstSkyscraper() 			// If first skyscraper, it must build beside a Class 2
) {return;}	

item(FEAT_HOUSES, item_sato_building, 84, HOUSE_SIZE_1X1){
	property {
		substitute: 				4; 													
		name: 						string(NAME_SATO_BUILDING);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED,HOUSE_FLAG_PROTECTED);
		population: 				200;
		accepted_cargos: 			[[PASS, 8],[MAIL, 8],[GOOD, 8]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[1960,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class:				5;	
		}
	graphics {
		default: 					switch_sato_building;
		construction_check:			switch_sato_building_con_check;
		cargo_production: 			func_produce(16,6);
		colour: 					rand_recolor_sato_building; 
	}
}

// End sato_building
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/skyscrapers/bank_building.pnml" 1
// Begin bank_building

// Building Sprites
spriteset (spr_build_bank_building, 			"src/gfx/skyscrapers/bank_building/building.png") 				{template_house_200(1,1)}
spriteset (spr_build_bank_building_snow, 		"src/gfx/skyscrapers/bank_building/building.png") 				{template_house_200(1,202)}

// Ground Sprites
spriteset (spr_ground_bank_building, 			"src/gfx/skyscrapers/bank_building/ground.png") 				{template_ground(1,1)}
spriteset (spr_ground_bank_building_snow, 		"src/gfx/skyscrapers/bank_building/ground.png") 				{template_ground(1,33)}

// Normal Sprites
spritelayout sprlay_bank_building {
	ground {
		sprite: spr_ground_bank_building (construction_state);
	}
	building {
		sprite: spr_build_bank_building (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_bank_building_snow {
	ground {
		sprite: spr_ground_bank_building_snow (construction_state);
	}
	building {
		sprite: spr_build_bank_building_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_bank_building,terrain_type) {
	TILETYPE_SNOW: sprlay_bank_building_snow;
	sprlay_bank_building;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_bank_building)
	{
		1: PALETTE_CC_RED;			
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;			
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}


// Construction Check
switch (FEAT_HOUSES, SELF, switch_bank_building_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	IsCity() && 					// Can only appear in cities
	IsUniqueHouse() &&				// Only one in city
	PopOver10k() &&					// Population of city check
	Class5PopCheck() &&				// Residential population is sufficient for another Skyscraper
	ClusterBuildingClass() &&		// Must be within two tiles of the same building class
	IfFirstSkyscraper() 			// If first skyscraper, it must build beside a Class 2
) {return;}	

item(FEAT_HOUSES, item_bank_building, 86, HOUSE_SIZE_1X1){
	property {
		substitute: 				4; 													
		name: 						string(NAME_BANK_BUILDING);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED,HOUSE_FLAG_PROTECTED);
		population: 				220;
		accepted_cargos: 			[[PASS, 8],[MAIL, 8],[GOOD, 8]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[1980,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class:				5;	
		}
	graphics {
		default: 					switch_bank_building;
		construction_check:			switch_bank_building_con_check;
		cargo_production: 			func_produce(16,6);
		colour: 					rand_recolor_bank_building; 
	}
}

// End bank_building
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/skyscrapers/tall_office_building.pnml" 1
// Begin tall_office_building

// Building Sprites
spriteset (spr_tall_office_building, 						"src/gfx/skyscrapers/tall_office_building/building.png") 						{template_house_150_wide(1,1)}
spriteset (spr_tall_office_building_snow, 					"src/gfx/skyscrapers/tall_office_building/building.png") 						{template_house_150_wide(1,152)}

// Ground Tiles
spriteset (spr_tall_office_building_ground, 				"src/gfx/skyscrapers/tall_office_building/ground.png") 						{template_ground(1,1)}
spriteset (spr_tall_office_building_ground_snow, 			"src/gfx/skyscrapers/tall_office_building/ground.png") 						{template_ground(1,33)}

spritelayout sprlay_tall_office_building_norm {
	ground {
		sprite: 		spr_tall_office_building_ground(3);
	}
	building {
		sprite: 		spr_tall_office_building(3);
		yoffset:  		-1;
		//recolour_mode: 	RECOLOUR_REMAP; 
		//palette: 		PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_tall_office_building_snow {
	ground {
		sprite: 		spr_tall_office_building_ground_snow(3);
	}
	building {
		sprite: 		spr_tall_office_building_snow(3);
		yoffset:  		-1;
		//recolour_mode: 	RECOLOUR_REMAP; 
		//palette: 		PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_tall_office_building_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_tall_office_building_snow;
	sprlay_tall_office_building_norm;
}

// Recolouring
/*
random_switch (FEAT_HOUSES, SELF, rand_recolor_tall_office_building)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}
*/
// Construction Check
switch (FEAT_HOUSES, SELF, switch_tall_office_building_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	IsCity() && 					// Can only appear in cities
	IsUniqueHouse() &&				// Only one in city
	PopOver10k() &&					// Population of city check
	Class5PopCheck() &&				// Residential population is sufficient for another Skyscraper
	ClusterBuildingClass() &&		// Must be within two tiles of the same building class
	IfFirstSkyscraper() 			// If first skyscraper, it must build beside a Class 2
) {return;}	


item(FEAT_HOUSES, item_tall_office_building, 87, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						string(NAME_TALL_OFFICE_BUILDING);
		population: 				200;
		accepted_cargos: 			[[PASS, 8],[MAIL, 8],[GOOD, 8]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				5;
		years_available: 			[1990,0xFFFF];
		minimum_lifetime: 			8;
		availability_mask: 			[bitmask(						
										TOWNZONE_CENTRE				// 4
										//TOWNZONE_INNER_SUBURB,	// 3
										//TOWNZONE_OUTER_SUBURB,	// 2
										//TOWNZONE_OUTSKIRT			// 1
										//TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class: 			2;
		}
	graphics {
		default: 					switch_tall_office_building_sprites;
		construction_check: 		switch_tall_office_building_con_check; 	
		cargo_production: 			func_produce(13,4);
		//colour: 					rand_recolor_tall_office_building;
	}
}

// End tall_office_building
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/skyscrapers/tall_office_block.pnml" 1
// Begin tall_office_block

// Building Sprites
spriteset (spr_build_tall_office_block, 			"src/gfx/skyscrapers/tall_office_block/building.png") 				{template_house_200_wide(1,1)}
spriteset (spr_build_tall_office_block_snow, 		"src/gfx/skyscrapers/tall_office_block/building.png") 				{template_house_200_wide(1,202)}

// Ground Sprites
spriteset (spr_ground_tall_office_block, 			"src/gfx/skyscrapers/tall_office_block/ground.png") 				{template_ground(1,1)}
spriteset (spr_ground_tall_office_block_snow, 		"src/gfx/skyscrapers/tall_office_block/ground.png") 				{template_ground(1,33)}

// Normal Sprites
spritelayout sprlay_tall_office_block {
	ground {
		sprite: spr_ground_tall_office_block (construction_state);
	}
	building {
		sprite: spr_build_tall_office_block (construction_state);
		//xoffset:  2;
		//yoffset:  0;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_tall_office_block_snow {
	ground {
		sprite: spr_ground_tall_office_block_snow (construction_state);
	}
	building {
		sprite: spr_build_tall_office_block_snow (construction_state);
		//xoffset:  2;
		//yoffset:  0;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_tall_office_block,terrain_type) {
	TILETYPE_SNOW: sprlay_tall_office_block_snow;
	sprlay_tall_office_block;
}

// Recolouring
/*
random_switch (FEAT_HOUSES, SELF, rand_recolor_tall_office_block)
	{
		1: PALETTE_CC_RED;			
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;			
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}
*/

// Construction Check
switch (FEAT_HOUSES, SELF, switch_tall_office_block_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	IsCity() && 					// Can only appear in cities
	IsUniqueHouse() &&				// Only one in city
	PopOver10k() &&					// Population of city check
	Class5PopCheck() &&				// Residential population is sufficient for another Skyscraper
	ClusterBuildingClass() &&		// Must be within two tiles of the same building class
	IfFirstSkyscraper() 			// If first skyscraper, it must build beside a Class 2
) {return;}	

item(FEAT_HOUSES, item_tall_office_block, 89, HOUSE_SIZE_1X1){
	property {
		substitute: 				4; 													
		name: 						string(NAME_TALL_OFFICE_BLOCK);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED,HOUSE_FLAG_PROTECTED);
		population: 				200;
		accepted_cargos: 			[[PASS, 8],[MAIL, 8],[GOOD, 8]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[1955,1989];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class:				5;	
		}
	graphics {
		default: 					switch_tall_office_block;
		construction_check:			switch_tall_office_block_con_check;
		cargo_production: 			func_produce(16,6);
		//colour: 					rand_recolor_tall_office_block; 
	}
}

// End tall_office_block
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/skyscrapers/yamashiro_office_building.pnml" 1
// Begin yamashiro_office_building

// Building Sprites
spriteset (spr_build_yamashiro_office_building_north, 				"src/gfx/skyscrapers/yamashiro_office_building/building.png") 			{template_house_200(1,1)}
spriteset (spr_build_yamashiro_office_building_east, 				"src/gfx/skyscrapers/yamashiro_office_building/building.png") 			{template_house_200(261,1)}

spriteset (spr_build_yamashiro_office_building_north_snow, 			"src/gfx/skyscrapers/yamashiro_office_building/building.png") 			{template_house_200(1,202)}
spriteset (spr_build_yamashiro_office_building_east_snow, 			"src/gfx/skyscrapers/yamashiro_office_building/building.png") 			{template_house_200(261,202)}

// Ground Sprites
spriteset (spr_ground_yamashiro_office_building_north, 				"src/gfx/skyscrapers/yamashiro_office_building/ground.png") 			{template_ground(1,1)}
spriteset (spr_ground_yamashiro_office_building_east, 				"src/gfx/skyscrapers/yamashiro_office_building/ground.png") 			{template_ground(261,1)}

spriteset (spr_ground_yamashiro_office_building_north_snow, 		"src/gfx/skyscrapers/yamashiro_office_building/ground.png") 			{template_ground(1,33)}
spriteset (spr_ground_yamashiro_office_building_east_snow, 			"src/gfx/skyscrapers/yamashiro_office_building/ground.png") 			{template_ground(261,33)}

// Normal Sprites
spritelayout sprlay_yamashiro_office_building_north {
	ground {
		sprite: spr_ground_yamashiro_office_building_north(construction_state);
	}
	building {
		sprite: spr_build_yamashiro_office_building_north(construction_state);
		xoffset: 2;
		yoffset: 2;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_yamashiro_office_building_east {
	ground {
		sprite: spr_ground_yamashiro_office_building_east(construction_state);
	}
	building {
		sprite: spr_build_yamashiro_office_building_east(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_yamashiro_office_building_snow_north {
	ground {
		sprite: spr_ground_yamashiro_office_building_north_snow(construction_state);
	}
	building {
		sprite: spr_build_yamashiro_office_building_north_snow(construction_state);
		xoffset: 2;
		yoffset: 2;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_yamashiro_office_building_snow_east {
	ground {
		sprite: spr_ground_yamashiro_office_building_east_snow(construction_state);
	}
	building {
		sprite: spr_build_yamashiro_office_building_east_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_yamashiro_office_building_north,terrain_type) {
	TILETYPE_SNOW: sprlay_yamashiro_office_building_snow_north;
	sprlay_yamashiro_office_building_north;
}
switch(FEAT_HOUSES, SELF, switch_yamashiro_office_building_east,terrain_type) {
	TILETYPE_SNOW: sprlay_yamashiro_office_building_snow_east;
	sprlay_yamashiro_office_building_east;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_yamashiro_office_building)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_yamashiro_office_building_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	IsCity() && 					// Can only appear in cities
	IsUniqueHouse() &&				// Only one in city
	PopOver50k() &&					// Population of city check
	Class5PopCheck() &&				// Residential population is sufficient for another Skyscraper
	ClusterBuildingClass() &&		// Must be within two tiles of the same building class
	IfFirstSkyscraper() 			// If first skyscraper, it must build beside a Class 2
) {return;}		
 

item(FEAT_HOUSES, item_yamashiro_office_building, 102, HOUSE_SIZE_1X2){
	property {
		substitute: 				7; 													
		name: 						string(NAME_YAMASHIRO_OFFICE_BUILDING);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED,HOUSE_FLAG_PROTECTED);
		population: 				255;
		accepted_cargos: 			[[PASS, 8],[MAIL, 4],[GOOD, 4]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[1990,0xFFFF];
		minimum_lifetime: 			20;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class:				5;	
		}
	graphics {
		graphics_north: 			switch_yamashiro_office_building_north;
		graphics_east: 				switch_yamashiro_office_building_east;
		construction_check:			switch_yamashiro_office_building_con_check;
		cargo_production: 			func_produce(24,10);
		colour: 					rand_recolor_yamashiro_office_building;
	}
}

// End yamashiro_office_building
# 1 "JPplusBuildings.pnml" 4

// LANDMARKS
# 1 "src/houses/landmarks/fire_station_01.pnml" 1
// Begin fire_station_01

// Building Sprites

// A
spriteset (spr_build_fire_station_01_north_a, 			"src/gfx/landmarks/fire_station_01/building_a.png") 		{template_house_80(1,1)}
spriteset (spr_build_fire_station_01_north_a_snow, 		"src/gfx/landmarks/fire_station_01/building_a.png") 		{template_house_80(1,82)}

spriteset (spr_build_fire_station_01_west_a, 			"src/gfx/landmarks/fire_station_01/building_a.png") 		{template_house_80(261,1)}
spriteset (spr_build_fire_station_01_west_a_snow, 		"src/gfx/landmarks/fire_station_01/building_a.png") 		{template_house_80(261,82)}

// B
spriteset (spr_build_fire_station_01_north_b, 			"src/gfx/landmarks/fire_station_01/building_b.png") 		{template_house_80(1,1)}
spriteset (spr_build_fire_station_01_north_b_snow, 		"src/gfx/landmarks/fire_station_01/building_b.png") 		{template_house_80(1,82)}

spriteset (spr_build_fire_station_01_west_b, 			"src/gfx/landmarks/fire_station_01/building_b.png") 		{template_house_80(261,1)}
spriteset (spr_build_fire_station_01_west_b_snow, 		"src/gfx/landmarks/fire_station_01/building_b.png") 		{template_house_80(261,82)}

// C
spriteset (spr_build_fire_station_01_north_c, 			"src/gfx/landmarks/fire_station_01/building_c.png") 		{template_house_80(1,1)}
spriteset (spr_build_fire_station_01_north_c_snow, 		"src/gfx/landmarks/fire_station_01/building_c.png") 		{template_house_80(1,82)}

spriteset (spr_build_fire_station_01_west_c, 			"src/gfx/landmarks/fire_station_01/building_c.png") 		{template_house_80(261,1)}
spriteset (spr_build_fire_station_01_west_c_snow, 		"src/gfx/landmarks/fire_station_01/building_c.png") 		{template_house_80(261,82)}

// D
spriteset (spr_build_fire_station_01_north_d, 			"src/gfx/landmarks/fire_station_01/building_d.png") 		{template_house_80(1,1)}
spriteset (spr_build_fire_station_01_north_d_snow, 		"src/gfx/landmarks/fire_station_01/building_d.png") 		{template_house_80(1,82)}

spriteset (spr_build_fire_station_01_west_d, 			"src/gfx/landmarks/fire_station_01/building_d.png") 		{template_house_80(261,1)}
spriteset (spr_build_fire_station_01_west_d_snow, 		"src/gfx/landmarks/fire_station_01/building_d.png") 		{template_house_80(261,82)}

// Ground Sprites
spriteset (spr_ground_fire_station_01_north, 			"src/gfx/landmarks/fire_station_01/ground.png") 			{template_ground(1,1)}
spriteset (spr_ground_fire_station_01_north_snow, 		"src/gfx/landmarks/fire_station_01/ground.png") 			{template_ground(1,33)}

spriteset (spr_ground_fire_station_01_west, 			"src/gfx/landmarks/fire_station_01/ground.png") 			{template_ground(261,1)}
spriteset (spr_ground_fire_station_01_west_snow, 		"src/gfx/landmarks/fire_station_01/ground.png") 			{template_ground(261,33)}

// Normal Sprites

// A
spritelayout sprlay_fire_station_01_north_a {
	ground {
		sprite: spr_ground_fire_station_01_north (construction_state);
	}
	building {
		sprite: spr_build_fire_station_01_north_a (construction_state);
		xoffset: 1;
		yoffset: 1;
	}
}

spritelayout sprlay_fire_station_01_west_a {
	ground {
		sprite: spr_ground_fire_station_01_west (construction_state);
	}
	building {
		sprite: spr_build_fire_station_01_west_a (construction_state);
		xoffset: 1;
		yoffset: 1;
	}
}

// B
spritelayout sprlay_fire_station_01_north_b {
	ground {
		sprite: spr_ground_fire_station_01_north (construction_state);
	}
	building {
		sprite: spr_build_fire_station_01_north_b (construction_state);
		xoffset: 1;
		yoffset: 1;
	}
}

spritelayout sprlay_fire_station_01_west_b {
	ground {
		sprite: spr_ground_fire_station_01_west (construction_state);
	}
	building {
		sprite: spr_build_fire_station_01_west_b (construction_state);
		xoffset: 1;
		yoffset: 1;
	}
}

// C
spritelayout sprlay_fire_station_01_north_c {
	ground {
		sprite: spr_ground_fire_station_01_north (construction_state);
	}
	building {
		sprite: spr_build_fire_station_01_north_c (construction_state);
		xoffset: 1;
		yoffset: 1;
	}
}

spritelayout sprlay_fire_station_01_west_c {
	ground {
		sprite: spr_ground_fire_station_01_west (construction_state);
	}
	building {
		sprite: spr_build_fire_station_01_west_c (construction_state);
		xoffset: 1;
		yoffset: 1;
	}
}

// D
spritelayout sprlay_fire_station_01_north_d {
	ground {
		sprite: spr_ground_fire_station_01_north (construction_state);
	}
	building {
		sprite: spr_build_fire_station_01_north_d (construction_state);
		xoffset: 1;
		yoffset: 1;
	}
}

spritelayout sprlay_fire_station_01_west_d {
	ground {
		sprite: spr_ground_fire_station_01_west (construction_state);
	}
	building {
		sprite: spr_build_fire_station_01_west_d (construction_state);
		xoffset: 1;
		yoffset: 1;
	}
}

// Snow Sprites

// A
spritelayout sprlay_fire_station_01_north_a_snow {
	ground {
		sprite: spr_ground_fire_station_01_north_snow (construction_state);
	}
	building {
		sprite: spr_build_fire_station_01_north_a_snow (construction_state);
		xoffset: 1;
		yoffset: 1;
	}
}

spritelayout sprlay_fire_station_01_west_a_snow {
	ground {
		sprite: spr_ground_fire_station_01_west_snow (construction_state);
	}
	building {
		sprite: spr_build_fire_station_01_west_a_snow (construction_state);
		xoffset: 1;
		yoffset: 1;
	}
}

// B
spritelayout sprlay_fire_station_01_north_b_snow {
	ground {
		sprite: spr_ground_fire_station_01_north_snow (construction_state);
	}
	building {
		sprite: spr_build_fire_station_01_north_b_snow (construction_state);
		xoffset: 1;
		yoffset: 1;
	}
}

spritelayout sprlay_fire_station_01_west_b_snow {
	ground {
		sprite: spr_ground_fire_station_01_west_snow (construction_state);
	}
	building {
		sprite: spr_build_fire_station_01_west_b_snow (construction_state);
		xoffset: 1;
		yoffset: 1;
	}
}

// C
spritelayout sprlay_fire_station_01_north_c_snow {
	ground {
		sprite: spr_ground_fire_station_01_north_snow (construction_state);
	}
	building {
		sprite: spr_build_fire_station_01_north_c_snow (construction_state);
		xoffset: 1;
		yoffset: 1;
	}
}

spritelayout sprlay_fire_station_01_west_c_snow {
	ground {
		sprite: spr_ground_fire_station_01_west_snow (construction_state);
	}
	building {
		sprite: spr_build_fire_station_01_west_c_snow (construction_state);
		xoffset: 1;
		yoffset: 1;
	}
}

// D
spritelayout sprlay_fire_station_01_north_d_snow {
	ground {
		sprite: spr_ground_fire_station_01_north_snow (construction_state);
	}
	building {
		sprite: spr_build_fire_station_01_north_d_snow (construction_state);
		xoffset: 1;
		yoffset: 1;
	}
}

spritelayout sprlay_fire_station_01_west_d_snow {
	ground {
		sprite: spr_ground_fire_station_01_west_snow (construction_state);
	}
	building {
		sprite: spr_build_fire_station_01_west_d_snow (construction_state);
		xoffset: 1;
		yoffset: 1;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_fire_station_01_north_a,terrain_type) {
	TILETYPE_SNOW: sprlay_fire_station_01_north_a_snow;
	sprlay_fire_station_01_north_a;
}
switch(FEAT_HOUSES, SELF, switch_fire_station_01_west_a,terrain_type) {
	TILETYPE_SNOW: sprlay_fire_station_01_west_a_snow;
	sprlay_fire_station_01_west_a;
}

switch(FEAT_HOUSES, SELF, switch_fire_station_01_north_b,terrain_type) {
	TILETYPE_SNOW: sprlay_fire_station_01_north_b_snow;
	sprlay_fire_station_01_north_b;
}
switch(FEAT_HOUSES, SELF, switch_fire_station_01_west_b,terrain_type) {
	TILETYPE_SNOW: sprlay_fire_station_01_west_b_snow;
	sprlay_fire_station_01_west_b;
}

switch(FEAT_HOUSES, SELF, switch_fire_station_01_north_c,terrain_type) {
	TILETYPE_SNOW: sprlay_fire_station_01_north_c_snow;
	sprlay_fire_station_01_north_c;
}
switch(FEAT_HOUSES, SELF, switch_fire_station_01_west_c,terrain_type) {
	TILETYPE_SNOW: sprlay_fire_station_01_west_c_snow;
	sprlay_fire_station_01_west_c;
}

switch(FEAT_HOUSES, SELF, switch_fire_station_01_north_d,terrain_type) {
	TILETYPE_SNOW: sprlay_fire_station_01_north_d_snow;
	sprlay_fire_station_01_north_d;
}
switch(FEAT_HOUSES, SELF, switch_fire_station_01_west_d,terrain_type) {
	TILETYPE_SNOW: sprlay_fire_station_01_west_d_snow;
	sprlay_fire_station_01_west_d;
}

// Random selection of sprites
random_switch (FEAT_HOUSES, SELF, switch_fire_station_01_north_sprites) {
	1: switch_fire_station_01_north_a;
	1: switch_fire_station_01_north_b;
	1: switch_fire_station_01_north_c;
	1: switch_fire_station_01_north_d;
}

random_switch (FEAT_HOUSES, SELF, switch_fire_station_01_west_sprites) {
	dependent: switch_fire_station_01_north_sprites;
	1: switch_fire_station_01_west_a;
	1: switch_fire_station_01_west_b;
	1: switch_fire_station_01_west_c;
	1: switch_fire_station_01_west_d;
}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_fire_station_01_con_check, 
	HasRoadAdjacentSE() &&			// Must have road to the SW
	PopOver10k() &&					// Population must be > 10k
	ThirtyTileGap()					// Can't appear within 30 tiles of another
) {return;}	

// Protection Check
switch (FEAT_HOUSES, SELF, switch_fire_station_01_pro_check, 
	HasRoadAdjacentSE()			// Must have road to the SW
	) {return;}	

item(FEAT_HOUSES, item_fire_station_01, 107, HOUSE_SIZE_2X1){
	property {
		substitute: 				76; 													
		name: 						string(NAME_FIRE_STATION_01);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED);						// Want flat land
		population: 				80;													// Agreed to JPS
		accepted_cargos: 			[[PASS, 4],[MAIL, 2],[GOOD, 2]];					// Agreed to JPS and added Petrol
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[1970,0xFFFF];	
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(
										TOWNZONE_OUTER_SUBURB,
										TOWNZONE_OUTSKIRT,
										TOWNZONE_EDGE
										), 
									bitmask(
										CLIMATE_TEMPERATE, 
										CLIMATE_ARCTIC, 
										ABOVE_SNOWLINE
										)];
		//building_class:			2;	
		}
	graphics {
		graphics_north: 			switch_fire_station_01_north_sprites;
		graphics_west: 				switch_fire_station_01_west_sprites;
		construction_check:			switch_fire_station_01_con_check;
		protection:					switch_fire_station_01_pro_check;
		cargo_production: 			func_produce(20,5);
		//colour: 					rand_recolor_fire_station_01;
	}
}

// End fire_station_01
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/landmarks/police_station_01.pnml" 1
// Begin police_station_01

// Building Sprites
spriteset (spr_build_police_station_01_north, 				"src/gfx/landmarks/police_station_01/building.png") 			{template_house_80(1,1)}
spriteset (spr_build_police_station_01_north_snow, 			"src/gfx/landmarks/police_station_01/building.png") 			{template_house_80(1,82)}

spriteset (spr_build_police_station_01_east, 				"src/gfx/landmarks/police_station_01/building.png") 			{template_house_80(261,1)}
spriteset (spr_build_police_station_01_east_snow, 			"src/gfx/landmarks/police_station_01/building.png") 			{template_house_80(261,82)}

// Ground Sprites
spriteset (spr_ground_police_station_01_north, 				"src/gfx/landmarks/police_station_01/ground.png") 				{template_ground(1,1)}
spriteset (spr_ground_police_station_01_north_snow, 		"src/gfx/landmarks/police_station_01/ground.png") 				{template_ground(1,33)}

spriteset (spr_ground_police_station_01_east, 				"src/gfx/landmarks/police_station_01/ground.png") 				{template_ground(261,1)}
spriteset (spr_ground_police_station_01_east_snow, 			"src/gfx/landmarks/police_station_01/ground.png") 				{template_ground(261,33)}

// Normal Sprites
spritelayout sprlay_police_station_01_north {
	ground {
		sprite: spr_ground_police_station_01_north (construction_state);
	}
	building {
		sprite: spr_build_police_station_01_north (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_police_station_01_east {
	ground {
		sprite: spr_ground_police_station_01_east (construction_state);
	}
	building {
		sprite: spr_build_police_station_01_east (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_police_station_01_snow_north {
	ground {
		sprite: spr_ground_police_station_01_north_snow (construction_state);
	}
	building {
		sprite: spr_build_police_station_01_north_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_police_station_01_snow_east {
	ground {
		sprite: spr_ground_police_station_01_east_snow (construction_state);
	}
	building {
		sprite: spr_build_police_station_01_east_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_police_station_01_north,terrain_type) {
	TILETYPE_SNOW: sprlay_police_station_01_snow_north;
	sprlay_police_station_01_north;
}
switch(FEAT_HOUSES, SELF, switch_police_station_01_east,terrain_type) {
	TILETYPE_SNOW: sprlay_police_station_01_snow_east;
	sprlay_police_station_01_east;
}

// Recolouring
/*
random_switch (FEAT_HOUSES, SELF, rand_recolor_police_station_01)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
	}
*/

// Construction Check
switch (FEAT_HOUSES, SELF, switch_police_station_01_con_check, 
	HasRoadAdjacentSW() &&			// Must have road to the SW
	PopOver10k() &&					// Population must be > 10k
	ThirtyTileGap()					// Can't appear within 30 tiles of another
) {return;}	

// Protection Check
switch (FEAT_HOUSES, SELF, switch_police_station_01_pro_check, 
	HasRoadAdjacentSW()			// Must have road to the SW
	) {return;}	

item(FEAT_HOUSES, item_police_station_01, 105, HOUSE_SIZE_1X2){
	property {
		substitute: 				7; 													
		name: 						string(NAME_POLICE_STATION_01);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED);						// Want flat land
		population: 				80;													// Agreed to JPS
		accepted_cargos: 			[[PASS, 4],[MAIL, 2],[GOOD, 2]];					// Agreed to JPS and added Petrol
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[1970,0xFFFF];	
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(
										TOWNZONE_OUTER_SUBURB,
										TOWNZONE_OUTSKIRT,
										TOWNZONE_EDGE
										), 
									bitmask(
										CLIMATE_TEMPERATE, 
										CLIMATE_ARCTIC, 
										ABOVE_SNOWLINE
										)];
		//building_class:			2;	
		}
	graphics {
		graphics_north: 			switch_police_station_01_north;
		graphics_east: 				switch_police_station_01_east;
		construction_check:			switch_police_station_01_con_check;
		protection:					switch_police_station_01_pro_check;
		cargo_production: 			func_produce(20,5);
		//colour: 					rand_recolor_police_station_01;
	}
}

// End police_station_01
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/landmarks/temple_01.pnml" 1
// Begin temple_01

// Sprites
spriteset (spr_temple_01, 							"src/gfx/landmarks/temple_01/temple.png") 						{template_house_128(1,1)}
spriteset (spr_temple_01_snow, 						"src/gfx/landmarks/temple_01/temple.png") 						{template_house_128(1,130)}

// Normal Sprites
spritelayout sprlay_temple_01_north {
	ground {
		sprite: spr_temple_01(3);
	}
	building {
		sprite: spr_temple_01(2);
		hide_sprite: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_temple_01_east {
	ground {
		sprite: spr_temple_01(3);
	}
	building {
		sprite: spr_temple_01(2);
		xoffset: 1;
		yoffset: 3;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_temple_01_west {
	ground {
		sprite: spr_temple_01(3);
	}
	building {
		sprite: spr_temple_01(0);
		xoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_temple_01_south {
	ground {
		sprite: spr_temple_01(3);
	}
	building {
		sprite: spr_temple_01(1);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_temple_01_snow_north {
	ground {
		sprite: spr_temple_01_snow(3);
	}
	building {
		sprite: spr_temple_01_snow(2);
		hide_sprite: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_temple_01_snow_east {
	ground {
		sprite: spr_temple_01_snow(3);
	}
	building {
		sprite: spr_temple_01_snow(2);
		xoffset: 1;
		yoffset: 3;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_temple_01_snow_west {
	ground {
		sprite: spr_temple_01_snow(3);
	}
	building {
		sprite: spr_temple_01_snow(0);
		xoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_temple_01_snow_south {
	ground {
		sprite: spr_temple_01_snow(3);
	}
	building {
		sprite: spr_temple_01_snow(1);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_temple_01_north,terrain_type) {
	TILETYPE_SNOW: sprlay_temple_01_snow_north;
	sprlay_temple_01_north;
}
switch(FEAT_HOUSES, SELF, switch_temple_01_east,terrain_type) {
	TILETYPE_SNOW: sprlay_temple_01_snow_east;
	sprlay_temple_01_east;
}
switch(FEAT_HOUSES, SELF, switch_temple_01_west,terrain_type) {
	TILETYPE_SNOW: sprlay_temple_01_snow_west;
	sprlay_temple_01_west;
}
switch(FEAT_HOUSES, SELF, switch_temple_01_south,terrain_type) {
	TILETYPE_SNOW: sprlay_temple_01_snow_south;
	sprlay_temple_01_south;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_temple_01)
	{
		//1: PALETTE_CC_RED;			Nah
		2: PALETTE_CC_LIGHT_BLUE;
		//1: PALETTE_CC_PINK;			Nah
		1: PALETTE_CC_DARK_BLUE;
		//1: PALETTE_CC_GREEN;			Nah
		2: PALETTE_CC_DARK_GREEN;
		//3: PALETTE_CC_CREAM;
		//1: PALETTE_CC_MAUVE;			Nah
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_temple_01_con_check, 
	IsCity() && 				// Can only appear in Cities
	IsUniqueHouse() && 			// Only one Temple per city
	OnGenerationOnly() && 		// Will only spawn when Map is generated - not realistic being built in modern times!
	HasRoadAdjacentSE2x2() &&	// Requires a road to the SE, due to sticking out entrance
	RandomBitsFour()) {return;}	// Think this makes the probability abouty a quarter

item(FEAT_HOUSES, item_temple_01, 66, HOUSE_SIZE_2X2){
	property {
		substitute: 				20; //Stadium since 2x2
		name: 						string(NAME_TEMPLE_01);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED, HOUSE_FLAG_CHURCH, HOUSE_FLAG_PROTECTED);
		population: 				100;
		accepted_cargos: 			[[PASS, 8],[MAIL, 1],[FOOD, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				5;
		years_available: 			[1700,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[ALL_TOWNZONES, bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class:				6;	
		}
	graphics {
		graphics_north: 			switch_temple_01_north;
		graphics_east: 				switch_temple_01_east;
		graphics_west: 				switch_temple_01_west;
		graphics_south: 			switch_temple_01_south;
		construction_check:			switch_temple_01_con_check;	
		cargo_production: 			func_produce(10,2);
		colour: 					rand_recolor_temple_01;
	}
}

// End temple_01
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/landmarks/temple_02.pnml" 1
// Begin temple_02

// Sprites
spriteset (spr_temple_02, 							"src/gfx/landmarks/temple_02/temple_02.png") 						{template_house_128(1,1)}
spriteset (spr_temple_02_snow, 						"src/gfx/landmarks/temple_02/temple_02.png") 						{template_house_128(1,130)}

// Normal Sprites
spritelayout sprlay_temple_02_north {
	ground {
		sprite: spr_temple_02(3);
	}
	building {
		sprite: spr_temple_02(2);
		hide_sprite: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_temple_02_east {
	ground {
		sprite: spr_temple_02(3);
	}
	building {
		sprite: spr_temple_02(2);
		xoffset: 1;
		yoffset: 3;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_temple_02_west {
	ground {
		sprite: spr_temple_02(3);
	}
	building {
		sprite: spr_temple_02(0);
		xoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_temple_02_south {
	ground {
		sprite: spr_temple_02(3);
	}
	building {
		sprite: spr_temple_02(1);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_temple_02_snow_north {
	ground {
		sprite: spr_temple_02_snow(3);
	}
	building {
		sprite: spr_temple_02_snow(2);
		hide_sprite: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_temple_02_snow_east {
	ground {
		sprite: spr_temple_02_snow(3);
	}
	building {
		sprite: spr_temple_02_snow(2);
		xoffset: 1;
		yoffset: 3;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_temple_02_snow_west {
	ground {
		sprite: spr_temple_02_snow(3);
	}
	building {
		sprite: spr_temple_02_snow(0);
		xoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_temple_02_snow_south {
	ground {
		sprite: spr_temple_02_snow(3);
	}
	building {
		sprite: spr_temple_02_snow(1);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_temple_02_north,terrain_type) {
	TILETYPE_SNOW: sprlay_temple_02_snow_north;
	sprlay_temple_02_north;
}
switch(FEAT_HOUSES, SELF, switch_temple_02_east,terrain_type) {
	TILETYPE_SNOW: sprlay_temple_02_snow_east;
	sprlay_temple_02_east;
}
switch(FEAT_HOUSES, SELF, switch_temple_02_west,terrain_type) {
	TILETYPE_SNOW: sprlay_temple_02_snow_west;
	sprlay_temple_02_west;
}
switch(FEAT_HOUSES, SELF, switch_temple_02_south,terrain_type) {
	TILETYPE_SNOW: sprlay_temple_02_snow_south;
	sprlay_temple_02_south;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_temple_02)
	{
		//1: PALETTE_CC_RED;			Nah
		2: PALETTE_CC_LIGHT_BLUE;
		//1: PALETTE_CC_PINK;			Nah
		1: PALETTE_CC_DARK_BLUE;
		//1: PALETTE_CC_GREEN;			Nah
		2: PALETTE_CC_DARK_GREEN;
		//3: PALETTE_CC_CREAM;
		//1: PALETTE_CC_MAUVE;			Nah
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_temple_02_con_check, 
	IsCity() && 					// Can only appear in Cities
	IsUniqueHouse() && 				// Only one Temple per city
	OnGenerationOnly() && 			// Will only spawn when Map is generated - not realistic being built in modern times!
	HasRoadAdjacentSE2x2() &&		// Requires a road to the SE, due to sticking out entrance
	RandomBitsFour()				// Think this makes the probability abouty a quarter
	) {return;}

item(FEAT_HOUSES, item_temple_02, 09, HOUSE_SIZE_2X2){
	property {
		substitute: 				20; //Stadium since 2x2
		name: 						string(NAME_TEMPLE_02);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED, HOUSE_FLAG_CHURCH, HOUSE_FLAG_PROTECTED);
		population: 				100;
		accepted_cargos: 			[[PASS, 8],[MAIL, 1],[FOOD, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				5;
		years_available: 			[1700,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[ALL_TOWNZONES, bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class:				6;	
		}
	graphics {
		graphics_north: 			switch_temple_02_north;
		graphics_east: 				switch_temple_02_east;
		graphics_west: 				switch_temple_02_west;
		graphics_south: 			switch_temple_02_south;
		construction_check:			switch_temple_02_con_check;	
		cargo_production: 			func_produce(10,2);
		colour: 					rand_recolor_temple_02;
	}
}

// End temple_02
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/landmarks/shiro_01.pnml" 1
// Begin shiro_01

// Sprites
spriteset (spr_shiro_01, 							"src/gfx/landmarks/shiro_01/shiro.png") 						{template_house_200(1,1)}
spriteset (spr_shiro_01_snow, 						"src/gfx/landmarks/shiro_01/shiro.png") 						{template_house_200(1,202)}

// Normal Sprites
spritelayout sprlay_shiro_01_north {
	ground {
		sprite: spr_ground_shiro(0);
	}
	building {
		sprite: spr_shiro_01(2);
		hide_sprite: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shiro_01_east {
	ground {
		sprite: spr_ground_shiro(2);
	}
	building {
		sprite: spr_shiro_01(2);
		xoffset: -1;
		yoffset: 2;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shiro_01_west {
	ground {
		sprite: spr_ground_shiro(1);
	}
	building {
		sprite: spr_shiro_01(0);
		xoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shiro_01_south {
	ground {
		sprite: spr_ground_shiro(3);
	}
	building {
		sprite: spr_shiro_01(1);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_shiro_01_snow_north {
	ground {
		sprite: spr_ground_shiro(0);
	}
	building {
		sprite: spr_shiro_01_snow(2);
		hide_sprite: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shiro_01_snow_east {
	ground {
		sprite: spr_ground_shiro(2);
	}
	building {
		sprite: spr_shiro_01_snow(2);
		xoffset: -1;
		yoffset: 2;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shiro_01_snow_west {
	ground {
		sprite: spr_ground_shiro(1);
	}
	building {
		sprite: spr_shiro_01_snow(0);
		xoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shiro_01_snow_south {
	ground {
		sprite: spr_ground_shiro(3);
	}
	building {
		sprite: spr_shiro_01_snow(1);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_shiro_01_north,terrain_type) {
	TILETYPE_SNOW: sprlay_shiro_01_snow_north;
	sprlay_shiro_01_north;
}
switch(FEAT_HOUSES, SELF, switch_shiro_01_east,terrain_type) {
	TILETYPE_SNOW: sprlay_shiro_01_snow_east;
	sprlay_shiro_01_east;
}
switch(FEAT_HOUSES, SELF, switch_shiro_01_west,terrain_type) {
	TILETYPE_SNOW: sprlay_shiro_01_snow_west;
	sprlay_shiro_01_west;
}
switch(FEAT_HOUSES, SELF, switch_shiro_01_south,terrain_type) {
	TILETYPE_SNOW: sprlay_shiro_01_snow_south;
	sprlay_shiro_01_south;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_shiro_01)
	{
		//1: PALETTE_CC_RED;			nah
		2: PALETTE_CC_LIGHT_BLUE;
		//1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		//1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		//4: PALETTE_CC_WHITE;			too much like snow
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_shiro_01_con_check, 
	IsCity() && 				// Can only appear in Cities
	IsUniqueHouse() && 			// Only one Shiro per city
	OnGenerationOnly() && 		// Will only spawn when Map is generated - not realistic being built in modern times!
	RandomBitsFour()			// Think this makes the probability abouty a quarter
	) {return;}	

item(FEAT_HOUSES, item_shiro_01, 70, HOUSE_SIZE_2X2){
	property {
		substitute: 				20; 								//Stadium since 2x2
		name: 						string(NAME_SHIRO_01);
		building_flags: 			bitmask(HOUSE_FLAG_PROTECTED);		// Cities should delete
		population: 				160;								// Same as JPS
		accepted_cargos: 			[[PASS, 8],[MAIL, 1],[FOOD, 2]];	// Same as JPS
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;									
		years_available: 			[0,0xFFFF];
		minimum_lifetime: 			50;
		availability_mask: 			[	
										bitmask(TOWNZONE_OUTER_SUBURB,TOWNZONE_OUTSKIRT), 				// Same as JPS
									 	bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)
									];	
		}
	graphics {
		graphics_north: 			switch_shiro_01_north;
		graphics_east: 				switch_shiro_01_east;
		graphics_west: 				switch_shiro_01_west;
		graphics_south: 			switch_shiro_01_south;
		construction_check:			switch_shiro_01_con_check;
		cargo_production: 			func_produce(10,2);
		colour: 					rand_recolor_shiro_01;
	}
}

// End shiro_01
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/landmarks/stadium_01.pnml" 1
// Begin stadium_01

// Sprites
spriteset (spr_build_stadium_01, 						"src/gfx/landmarks/stadium_01/building.png") 					{template_house_100(1,1)}
spriteset (spr_build_stadium_01_snow, 					"src/gfx/landmarks/stadium_01/building.png") 					{template_house_100(1,102)}

spriteset (spr_ground_stadium_01, 						"src/gfx/landmarks/stadium_01/ground.png") 						{template_house_100(1,1)}
spriteset (spr_ground_stadium_01_snow, 					"src/gfx/landmarks/stadium_01/ground.png") 						{template_house_100(1,102)}

// Normal Sprites
spritelayout sprlay_stadium_01_north {
	ground {
		sprite: spr_ground_stadium_01(0);
	}
	building {
		sprite: spr_build_stadium_01(0);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_stadium_01_east {
	ground {
		sprite: spr_ground_stadium_01(2);
	}
	building {
		sprite: spr_build_stadium_01(2);
		//xoffset: 1;
		//yoffset: 3;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_stadium_01_west {
	ground {
		sprite: spr_ground_stadium_01(1);
	}
	building {
		sprite: spr_build_stadium_01(1);
		//xoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_stadium_01_south {
	ground {
		sprite: spr_ground_stadium_01(3);
	}
	building {
		sprite: spr_build_stadium_01(3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_stadium_01_snow_north {
	ground {
		sprite: spr_ground_stadium_01_snow(0);
	}
	building {
		sprite: spr_build_stadium_01_snow(0);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_stadium_01_snow_east {
	ground {
		sprite: spr_ground_stadium_01_snow(2);
	}
	building {
		sprite: spr_build_stadium_01_snow(2);
		//xoffset: 1;
		//yoffset: 3;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_stadium_01_snow_west {
	ground {
		sprite: spr_ground_stadium_01_snow(1);
	}
	building {
		sprite: spr_build_stadium_01_snow(1);
		//xoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_stadium_01_snow_south {
	ground {
		sprite: spr_ground_stadium_01_snow(3);
	}
	building {
		sprite: spr_build_stadium_01_snow(3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_stadium_01_north,terrain_type) {
	TILETYPE_SNOW: sprlay_stadium_01_snow_north;
	sprlay_stadium_01_north;
}
switch(FEAT_HOUSES, SELF, switch_stadium_01_east,terrain_type) {
	TILETYPE_SNOW: sprlay_stadium_01_snow_east;
	sprlay_stadium_01_east;
}
switch(FEAT_HOUSES, SELF, switch_stadium_01_west,terrain_type) {
	TILETYPE_SNOW: sprlay_stadium_01_snow_west;
	sprlay_stadium_01_west;
}
switch(FEAT_HOUSES, SELF, switch_stadium_01_south,terrain_type) {
	TILETYPE_SNOW: sprlay_stadium_01_snow_south;
	sprlay_stadium_01_south;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_stadium_01)
	{
		//1: PALETTE_CC_RED;			Nah
		2: PALETTE_CC_LIGHT_BLUE;
		//1: PALETTE_CC_PINK;			Nah
		1: PALETTE_CC_DARK_BLUE;
		//1: PALETTE_CC_GREEN;			Nah
		2: PALETTE_CC_DARK_GREEN;
		//3: PALETTE_CC_CREAM;
		//1: PALETTE_CC_MAUVE;			Nah
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_stadium_01_con_check, 
	IsCity() && 				// Can only appear in Cities
	PopOver10k() &&				// Population criteria
	IsUniqueHouse()				// Only one per city
	) {return;}	

// Protection Check
switch (FEAT_HOUSES, SELF, switch_stadium_01_pro_check, 
	FuncServiceFOOD() ||		
	FuncServiceBEER()			
	) {return;}	

item(FEAT_HOUSES, item_stadium_01, 60, HOUSE_SIZE_2X2){
	property {
		substitute: 				20; //Stadium since 2x2
		name: 						string(NAME_STADIUM_01);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED);
		population: 				65;
		accepted_cargos: 			[[PASS, 8],[MAIL, 1],[FOOD, 8],[BEER, 8]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				5;
		years_available: 			[1970,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_OUTER_SUBURB,TOWNZONE_OUTSKIRT), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		//building_class:			3;	
		}
	graphics {
		graphics_north: 			switch_stadium_01_north;
		graphics_east: 				switch_stadium_01_east;
		graphics_west: 				switch_stadium_01_west;
		graphics_south: 			switch_stadium_01_south;
		construction_check:			switch_stadium_01_con_check;
		protection:					switch_stadium_01_pro_check;	
		cargo_production: 			func_produce(10,2);
		colour: 					rand_recolor_stadium_01;
	}
}

// End stadium_01
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/landmarks/hospital_01.pnml" 1
// Begin hospital_01

// Sprites
spriteset (spr_build_hospital_01_north, 				"src/gfx/landmarks/hospital_01/building.png") 					{template_house_128(1,1)}
spriteset (spr_build_hospital_01_north_snow, 			"src/gfx/landmarks/hospital_01/building.png") 					{template_house_128(1,130)}

spriteset (spr_build_hospital_01_west, 					"src/gfx/landmarks/hospital_01/building.png") 					{template_house_128(261,1)}
spriteset (spr_build_hospital_01_west_snow, 			"src/gfx/landmarks/hospital_01/building.png") 					{template_house_128(261,130)}

spriteset (spr_build_hospital_01_east, 					"src/gfx/landmarks/hospital_01/building.png") 					{template_house_128(521,1)}
spriteset (spr_build_hospital_01_east_snow, 			"src/gfx/landmarks/hospital_01/building.png") 					{template_house_128(521,130)}

spriteset (spr_build_hospital_01_south, 				"src/gfx/landmarks/hospital_01/building.png") 					{template_house_128(781,1)}
spriteset (spr_build_hospital_01_south_snow, 			"src/gfx/landmarks/hospital_01/building.png") 					{template_house_128(781,130)}


spriteset (spr_ground_hospital_01_north, 				"src/gfx/landmarks/hospital_01/ground.png") 					{template_house_128(1,1)}
spriteset (spr_ground_hospital_01_north_snow, 			"src/gfx/landmarks/hospital_01/ground.png") 					{template_house_128(1,130)}

spriteset (spr_ground_hospital_01_west, 				"src/gfx/landmarks/hospital_01/ground.png") 					{template_house_128(261,1)}
spriteset (spr_ground_hospital_01_west_snow, 			"src/gfx/landmarks/hospital_01/ground.png") 					{template_house_128(261,130)}

spriteset (spr_ground_hospital_01_east, 				"src/gfx/landmarks/hospital_01/ground.png") 					{template_house_128(521,1)}
spriteset (spr_ground_hospital_01_east_snow, 			"src/gfx/landmarks/hospital_01/ground.png") 					{template_house_128(521,130)}

spriteset (spr_ground_hospital_01_south, 				"src/gfx/landmarks/hospital_01/ground.png") 					{template_house_128(781,1)}
spriteset (spr_ground_hospital_01_south_snow, 			"src/gfx/landmarks/hospital_01/ground.png") 					{template_house_128(781,130)}

// Normal Sprites
spritelayout sprlay_hospital_01_north {
	ground {
		sprite: spr_ground_hospital_01_north(construction_state);
	}
	building {
		sprite: spr_build_hospital_01_north(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_hospital_01_east {
	ground {
		sprite: spr_ground_hospital_01_east(construction_state);
	}
	building {
		sprite: spr_build_hospital_01_east(construction_state);
		//xoffset: 1;
		//yoffset: 3;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_hospital_01_west {
	ground {
		sprite: spr_ground_hospital_01_west(construction_state);
	}
	building {
		sprite: spr_build_hospital_01_west(construction_state);
		//xoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_hospital_01_south {
	ground {
		sprite: spr_ground_hospital_01_south(construction_state);
	}
	building {
		sprite: spr_build_hospital_01_south(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_hospital_01_snow_north {
	ground {
		sprite: spr_ground_hospital_01_north_snow(construction_state);
	}
	building {
		sprite: spr_build_hospital_01_north_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_hospital_01_snow_east {
	ground {
		sprite: spr_ground_hospital_01_east_snow(construction_state);
	}
	building {
		sprite: spr_build_hospital_01_east_snow(construction_state);
		//xoffset: 1;
		//yoffset: 3;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_hospital_01_snow_west {
	ground {
		sprite: spr_ground_hospital_01_west_snow(construction_state);
	}
	building {
		sprite: spr_build_hospital_01_west_snow(construction_state);
		//xoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_hospital_01_snow_south {
	ground {
		sprite: spr_ground_hospital_01_south_snow(construction_state);
	}
	building {
		sprite: spr_build_hospital_01_south_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_hospital_01_north,terrain_type) {
	TILETYPE_SNOW: sprlay_hospital_01_snow_north;
	sprlay_hospital_01_north;
}
switch(FEAT_HOUSES, SELF, switch_hospital_01_east,terrain_type) {
	TILETYPE_SNOW: sprlay_hospital_01_snow_east;
	sprlay_hospital_01_east;
}
switch(FEAT_HOUSES, SELF, switch_hospital_01_west,terrain_type) {
	TILETYPE_SNOW: sprlay_hospital_01_snow_west;
	sprlay_hospital_01_west;
}
switch(FEAT_HOUSES, SELF, switch_hospital_01_south,terrain_type) {
	TILETYPE_SNOW: sprlay_hospital_01_snow_south;
	sprlay_hospital_01_south;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_hospital_01)
	{
		//1: PALETTE_CC_RED;			Nah
		2: PALETTE_CC_LIGHT_BLUE;
		//1: PALETTE_CC_PINK;			Nah
		1: PALETTE_CC_DARK_BLUE;
		//1: PALETTE_CC_GREEN;			Nah
		2: PALETTE_CC_DARK_GREEN;
		//3: PALETTE_CC_CREAM;
		//1: PALETTE_CC_MAUVE;			Nah
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_hospital_01_con_check, 
	IsCity() && 				// Can only appear in Cities
	IsUniqueHouse()	&&			// Only one per city
	PopOver10k()				// Required city population
	) {return;}	

// Protection Check
switch (FEAT_HOUSES, SELF, switch_hospital_01_pro_check, 
	FuncServicePASS() ||		
	FuncServiceRFPR()			
	) {return;}	

item(FEAT_HOUSES, item_hospital_01, 40, HOUSE_SIZE_2X2){
	property {
		substitute: 				20; //Stadium since 2x2
		name: 						string(NAME_HOSPITAL_01);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED);
		population: 				150;
		accepted_cargos: 			[
										[PASS, 8],
										[MAIL, 4],
										[GOOD, 4],
										[RFPR, 8]
									];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				5;
		years_available: 			[1970,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_OUTER_SUBURB,TOWNZONE_OUTSKIRT), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		//building_class:			3;	
		}
	graphics {
		graphics_north: 			switch_hospital_01_north;
		graphics_east: 				switch_hospital_01_east;
		graphics_west: 				switch_hospital_01_west;
		graphics_south: 			switch_hospital_01_south;
		construction_check:			switch_hospital_01_con_check;
		protection:					switch_hospital_01_pro_check;	
		cargo_production: 			func_produce(10,2);
		colour: 					rand_recolor_hospital_01;
	}
}

// End hospital_01
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/landmarks/shrine_01.pnml" 1
// Begin shrine_01

// Ground Sprites
spriteset (spr_shrine_01_ground, 		"src/gfx/landmarks/shrine_01/ground.png") 				{template_ground(1,1)}
spriteset (spr_shrine_01_ground_snow, 	"src/gfx/landmarks/shrine_01/ground.png") 				{template_ground(1,33)}

// Buildings
spriteset (spr_shrine_01, 				"src/gfx/landmarks/shrine_01/building.png") 			{template_house_80(1,1)}
spriteset (spr_shrine_01_snow, 			"src/gfx/landmarks/shrine_01/building.png") 			{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_shrine_01 {
	ground {
		sprite: spr_shrine_01_ground (3);
	}
	building {
		sprite: spr_shrine_01 (3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shrine_01_snow {
	ground {
		sprite: spr_shrine_01_ground_snow (3);
	}
	building {
		sprite: spr_shrine_01_snow (3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_shrine_01_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_shrine_01_snow;
	sprlay_shrine_01;
}

// Random recolour
random_switch (FEAT_HOUSES, SELF, rand_recolor_shrine_01)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_shrine_01_con_check, 
	IsCity() &&							// Can only build in a city
	IsUniqueHouse() &&					// Only one per town
	OnGenerationOnly()					// Doesn't build during gamereplay, only upon map generation
) {return;}	

if (param_prohibition_shrine == 1) {	// Only appears if parameter is turned on (default: off)

	item(FEAT_HOUSES, item_shrine_01, 113, HOUSE_SIZE_1X1){
		property {
			substitute: 				06;
			name: 						string(NAME_SHRINE_01);
			building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED, HOUSE_FLAG_PROTECTED);
			population: 				40;									// Agreed to JPS
			accepted_cargos: 			[[PASS, 4]];
			local_authority_impact: 	0;
			removal_cost_multiplier: 	0;
			probability: 				15;									// High to make sure it spawns
			years_available: 			[0,0xFFFF];							// Agreed to JPS
			minimum_lifetime: 			2;										
			availability_mask: 			[bitmask(							// Agreed to JPS, also, all zones to give more opportunity to appear
											TOWNZONE_CENTRE,			// 4
											TOWNZONE_INNER_SUBURB,		// 3
											TOWNZONE_OUTER_SUBURB,		// 2
											TOWNZONE_OUTSKIRT,			// 1
											TOWNZONE_EDGE				// 0
										), bitmask(
											CLIMATE_TEMPERATE,
											CLIMATE_ARCTIC, ABOVE_SNOWLINE,
											CLIMATE_TROPIC
										)];
			//building_class:				0;
		
			}
		graphics {
			default: 					switch_shrine_01_sprites;
			construction_check: 		switch_shrine_01_con_check;
			cargo_production: 			func_produce(1,1);			
			colour: 					rand_recolor_shrine_01;
		}
	}
}

// End shrine_01
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/landmarks/shrine_02.pnml" 1
// Begin shrine_02

// Ground Sprites
spriteset (spr_shrine_02_ground, 		"src/gfx/landmarks/shrine_02/ground.png") 				{template_ground(1,1)}
spriteset (spr_shrine_02_ground_snow, 	"src/gfx/landmarks/shrine_02/ground.png") 				{template_ground(1,33)}

// Buildings
spriteset (spr_shrine_02, 				"src/gfx/landmarks/shrine_02/building.png") 			{template_house_80(1,1)}
spriteset (spr_shrine_02_snow, 			"src/gfx/landmarks/shrine_02/building.png") 			{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_shrine_02_a {
	ground {
		sprite: spr_shrine_02_ground (3);
	}
	building {
		sprite: spr_shrine_02 (2);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shrine_02_snow_a {
	ground {
		sprite: spr_shrine_02_ground_snow (3);
	}
	building {
		sprite: spr_shrine_02_snow (2);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}


spritelayout sprlay_shrine_02_b {
	ground {
		sprite: spr_shrine_02_ground (3);
	}
	building {
		sprite: spr_shrine_02 (3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shrine_02_snow_b {
	ground {
		sprite: spr_shrine_02_ground_snow (3);
	}
	building {
		sprite: spr_shrine_02_snow (3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_shrine_02_sprites_a,terrain_type) {
	TILETYPE_SNOW: sprlay_shrine_02_snow_a;
	sprlay_shrine_02_a;
}

switch(FEAT_HOUSES, SELF, switch_shrine_02_sprites_b,terrain_type) {
	TILETYPE_SNOW: sprlay_shrine_02_snow_b;
	sprlay_shrine_02_b;
}

// Random selection of sprites
random_switch (FEAT_HOUSES, SELF, switch_shrine_02_sprites) {
	1: switch_shrine_02_sprites_a;
	1: switch_shrine_02_sprites_b;
}

// Random recolour
random_switch (FEAT_HOUSES, SELF, rand_recolor_shrine_02)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_shrine_02_con_check, 
	ThirtyTileGap() 				// Cannot build within thirty tiles of another
) {return;}	

item(FEAT_HOUSES, item_shrine_02, 114, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_SHRINE_02);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED, HOUSE_FLAG_PROTECTED);
		population: 				5;									// Agreed to JPS
		accepted_cargos: 			[[PASS, 4]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;									// High to make sure it spawns
		years_available: 			[1700,0xFFFF];							// Agreed to JPS
		minimum_lifetime: 			2;										
		availability_mask: 			[bitmask(							// Agreed to JPS, also, all zones to give more opportunity to appear
										TOWNZONE_CENTRE,			// 4
										TOWNZONE_INNER_SUBURB,		// 3
										TOWNZONE_OUTER_SUBURB,		// 2
										TOWNZONE_OUTSKIRT,			// 1
										TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		//building_class:				0;
		
		}
	graphics {
		default: 					switch_shrine_02_sprites;
		construction_check: 		switch_shrine_02_con_check;
		cargo_production: 			func_produce(1,1);			
		colour: 					rand_recolor_shrine_02;
	}
}

// End shrine_02
# 1 "JPplusBuildings.pnml" 4

// RURAL
# 1 "src/houses/rural/farm_01.pnml" 1
// Begin farm_01

// Sprites
spriteset (spr_build_farm_01, 						"src/gfx/rural/farm_01/building.png") 					{template_house_80(1,1)}
spriteset (spr_build_farm_01_snow, 					"src/gfx/rural/farm_01/building.png") 					{template_house_80(1,82)}

spriteset (spr_ground_farm_01, 						"src/gfx/rural/farm_01/ground.png") 					{template_house_80(1,1)}
spriteset (spr_ground_farm_01_snow, 				"src/gfx/rural/farm_01/ground.png") 					{template_house_80(1,82)}

// Normal Sprites
spritelayout sprlay_farm_01_north {
	ground {
		sprite: spr_ground_farm_01(0);
	}
	building {
		sprite: spr_build_farm_01(0);
	}
}

spritelayout sprlay_farm_01_west {
	ground {
		sprite: spr_ground_farm_01(1);
	}
	building {
		sprite: spr_build_farm_01(1);
	}
}

spritelayout sprlay_farm_01_east {
	ground {
		sprite: spr_ground_farm_01(2);
	}
	building {
		sprite: spr_build_farm_01(2);
	}
}

spritelayout sprlay_farm_01_south {
	ground {
		sprite: spr_ground_farm_01(3);
	}
	building {
		sprite: spr_build_farm_01(3);
	}
}

// Snow Sprites
spritelayout sprlay_farm_01_snow_north {
	ground {
		sprite: spr_ground_farm_01_snow(0);
	}
	building {
		sprite: spr_build_farm_01_snow(0);
	}
}

spritelayout sprlay_farm_01_snow_east {
	ground {
		sprite: spr_ground_farm_01_snow(2);
	}
	building {
		sprite: spr_build_farm_01_snow(2);
	}
}

spritelayout sprlay_farm_01_snow_west {
	ground {
		sprite: spr_ground_farm_01_snow(1);
	}
	building {
		sprite: spr_build_farm_01_snow(1);
	}
}

spritelayout sprlay_farm_01_snow_south {
	ground {
		sprite: spr_ground_farm_01_snow(3);
	}
	building {
		sprite: spr_build_farm_01_snow(3);
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_farm_01_north,terrain_type) {
	TILETYPE_SNOW: sprlay_farm_01_snow_north;
	sprlay_farm_01_north;
}
switch(FEAT_HOUSES, SELF, switch_farm_01_east,terrain_type) {
	TILETYPE_SNOW: sprlay_farm_01_snow_east;
	sprlay_farm_01_east;
}
switch(FEAT_HOUSES, SELF, switch_farm_01_west,terrain_type) {
	TILETYPE_SNOW: sprlay_farm_01_snow_west;
	sprlay_farm_01_west;
}
switch(FEAT_HOUSES, SELF, switch_farm_01_south,terrain_type) {
	TILETYPE_SNOW: sprlay_farm_01_snow_south;
	sprlay_farm_01_south;
}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_farm_01_con_check, 
	!IsCity() && 					// Cannot appear in Cities
	!PopOver10k()					// Population criteria
	) {return;}	

item(FEAT_HOUSES, item_farm_01, 52, HOUSE_SIZE_2X2){
	property {
		substitute: 				20; 								//Stadium since 2x2
		name: 						string(NAME_FARM_01);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED);
		population: 				15;
		accepted_cargos: 			[[PASS, 1],[MAIL, 1],[FOOD, 1]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1700,0xFFFF];
		minimum_lifetime: 			7;
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										//TOWNZONE_INNER_SUBURB,	// 3
										//TOWNZONE_OUTER_SUBURB,	// 2
										TOWNZONE_OUTSKIRT,			// 1
										TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		//building_class:			#;	
		}
	graphics {
		graphics_north: 			switch_farm_01_north;
		graphics_east: 				switch_farm_01_east;
		graphics_west: 				switch_farm_01_west;
		graphics_south: 			switch_farm_01_south;
		construction_check:			switch_farm_01_con_check;
		//protection:				switch_farm_01_pro_check;	
		cargo_production: 			func_produce(10,2);
		//colour: 					rand_recolor_farm_01;
	}
}

// End farm_01
# 1 "JPplusBuildings.pnml" 4
