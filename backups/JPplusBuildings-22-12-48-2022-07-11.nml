# 1 "JPplusBuildings.pnml"
/*---HEADER--*/

// Define the GRF
# 1 "src/header.pnml" 1
/* *** Begin Header *** */

/*
*	Welcome to JPplusBuildings!
*/

grf {
	grfid: 						"KR04";
	name: 						string(STR_GRF_NAME);
	desc: 						string(STR_GRF_DESC);
	version: 					4;
	min_compatible_version: 	1;
	url: 						string(STR_WEBSITE);

	// Parameter to decide which cargoes are required, if any, to allow Commercial buildings to appear
	param 0 {
  		param_commercial_cargoes {
			type: 				int;
   			name: 				string(STR_PARAM_NAME_COMMERCIAL_CARGOES);
   			desc: 				string(STR_PARAM_DESC_COMMERCIAL_CARGOES);
   			def_value: 			0;
			min_value:			0;
			max_value:			1;
			names: {
				0: string(STR_PARAM_VALUE_COMMERCIAL_CARGOES_NONE);
				1: string(STR_PARAM_VALUE_COMMERCIAL_CARGOES_MAIL_ONLY);
			};
   		}
	}
	param 1 {
		param_prohibition_shrine {
			type:				bool;
			name:				string(STR_PARAM_NAME_PROHIBITION_SHRINE);
			desc: 				string(STR_PARAM_DESC_PROHIBITION_SHRINE);
			def_value: 			0;
		}
	}
}

if (version_openttd(1,10,0,28004) > openttd_version) {
	error(FATAL, string(STR_ERROR_GAME_VERSION));
}

disable_item(FEAT_HOUSES);

/* *** End Header *** */
# 1 "JPplusBuildings.pnml" 4
# 1 "src/cargotable.pnml" 1
/* Begin cargotable */

cargotable {
	PASS, 		// Obviously
	MAIL, 		// Obviously
	GOOD, 		// For Commercial Buildings
	CASS,		// For Shops
	EOIL,		// For Restaurants
	FISH,		// For Restaurants
	FOOD, 		// For Stadiums and Restaurants
	FRUT,		// For Shops
	JAVA,		// For Restaurants
	LVST,		// For Restaurants
	BEER, 		// For Stadiums
	PETR,		// For Petrol Stations
	RFPR,		// For Hospitals	
}

/* Production loop, shared by all houses. Individual production rates stored in temporary registers in the function below.*/

switch (FEAT_HOUSES, SELF, switch_alt_production, getbits(extra_callback_info1, 0, 8)) {
	0: (PASS * 256) + (abs(extra_callback_info2 % 8) == 0) * LOAD_TEMP(1);
	1: (MAIL * 256) + (abs(extra_callback_info2 % 8) == 0) * LOAD_TEMP(2);
	return CB_RESULT_HOUSE_NO_MORE_PRODUCTION;
}

/* Production levels for passengers and mail, are passed as arguments to this function for use in the production loop. */
switch (FEAT_HOUSES, SELF, func_produce, pass, mail, [STORE_TEMP(pass, 1), STORE_TEMP(mail, 2)] ) {switch_alt_production;}

/* End cargotable */
# 1 "JPplusBuildings.pnml" 4
# 1 "src/sprite_templates.pnml" 1
// Begin Sprite Templates

// Ground Tile Template

template template_ground(x, y) {   
	//left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		31,		-31,		01,	    NOCROP | ANIM]
    sw: [ x+65,		y,		64,		31,		-31,		01,	    NOCROP | ANIM]
    nw: [ x+130,	y,		64,		31,		-31,		01,	    NOCROP | ANIM]
    ne: [ x+195,	y,		64,		31,		-31,		01,	    NOCROP | ANIM]
}

// House Templates

template template_house_80_2dir(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    nw: [ x,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    ne: [ x+65,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
}

template template_house_80(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    nw: [ x+130,	y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    ne: [ x+195,	y,		64,		80,		-31,		-48,	NOCROP | ANIM]
}

template template_house_80_wide(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		76,		80,	    -37,		-48,	NOCROP | ANIM]
    sw: [ x+77,		y,		76,		80,	    -37,		-48,	NOCROP | ANIM]  
    nw: [ x+154,	y,		76,		80,	    -37,		-48,	NOCROP | ANIM]
    ne: [ x+231,	y,		76,		80,	    -37,		-48,	NOCROP | ANIM]
}

template template_house_80_wide_ground(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x+6,		y,		64,		80,	    -31,		-48,	NOCROP | ANIM]
    sw: [ x+83,		y,		64,		80,	    -31,		-48,	NOCROP | ANIM]  
    nw: [ x+160,	y,		64,		80,	    -31,		-48,	NOCROP | ANIM]
    ne: [ x+237,	y,		64,		80,	    -31,		-48,	NOCROP | ANIM]
}

template template_house_100_1dir(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		100,	-31,		-68,	NOCROP | ANIM]
    sw: [ x,		y,		64,		100,	-31,		-68,	NOCROP | ANIM]
    nw: [ x,		y,		64,		100,	-31,		-68,	NOCROP | ANIM]
    ne: [ x,		y,		64,		100,	-31,		-68,	NOCROP | ANIM]
}

template template_house_100(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		100,	-31,		-68,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		100,	-31,		-68,	NOCROP | ANIM]
    nw: [ x+130,	y,		64,		100,	-31,		-68,	NOCROP | ANIM]
    ne: [ x+195,	y,		64,		100,	-31,		-68,	NOCROP | ANIM]
}

template template_house_100_wide(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		76,		100,	-37,		-68,	NOCROP | ANIM]
    sw: [ x+77,		y,		76,		100,	-37,		-68,	NOCROP | ANIM]
    nw: [ x+154,	y,		76,		100,	-37,		-68,	NOCROP | ANIM]
    ne: [ x+231,	y,		76,		100,	-37,		-68,	NOCROP | ANIM]
}

template template_house_128_1dir(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		128,	-31,		-96,	NOCROP | ANIM]
    sw: [ x,		y,		64,		128,	-31,		-96,	NOCROP | ANIM]
    nw: [ x,		y,		64,		128,	-31,		-96,	NOCROP | ANIM]
    ne: [ x,		y,		64,		128,	-31,		-96,	NOCROP | ANIM]
}

template template_house_128(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		128,	-31,		-96,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		128,	-31,		-96,	NOCROP | ANIM]
    nw: [ x+130,	y,		64,		128,	-31,		-96,	NOCROP | ANIM]
    ne: [ x+195,	y,		64,		128,	-31,		-96,	NOCROP | ANIM]
}

template template_house_128_wide(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		76,		128,	-37,		-96,	NOCROP | ANIM]
    sw: [ x+77,		y,		76,		128,	-37,		-96,	NOCROP | ANIM]
    nw: [ x+154,	y,		76,		128,	-37,		-96,	NOCROP | ANIM]
    ne: [ x+231,	y,		76,		128,	-37,		-96,	NOCROP | ANIM]
}

template template_house_150(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		150,	-31,		-118,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		150,	-31,		-118,	NOCROP | ANIM]  
    nw: [ x+130,	y,		64,	    150,	-31,		-118,	NOCROP | ANIM]
    ne: [ x+195,	y,		64,		150,	-31,		-118,	NOCROP | ANIM]
}

template template_house_150_wide(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		76,		150,	-37,		-118,	NOCROP | ANIM]
    sw: [ x+77,		y,		76,		150,	-37,		-118,	NOCROP | ANIM]  
    nw: [ x+154,	y,		76,	    150,	-37,		-118,	NOCROP | ANIM]
    ne: [ x+231,	y,		76,		150,	-37,		-118,	NOCROP | ANIM]
}

template template_house_200(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		200,	-31,		-168,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		200,	-31,		-168,	NOCROP | ANIM]
    nw: [ x+130,	y,		64,		200,	-31,		-168,	NOCROP | ANIM]
    ne: [ x+195,	y,		64,		200,	-31,		-168,	NOCROP | ANIM]
}

template template_house_200_wide(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		76,		200,	-37,		-168,	NOCROP | ANIM]
    sw: [ x+77,		y,		76,		200,	-37,		-168,	NOCROP | ANIM]  
    nw: [ x+154,	y,		76,		200,	-37,		-168,	NOCROP | ANIM]
    ne: [ x+231,	y,		76,		200,	-37,		-168,	NOCROP | ANIM]
}

template template_house_250(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		250,	-31,		-218,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		250,	-31,		-218,	NOCROP | ANIM]  
    nw: [ x+130,	y,		64,		250,	-31,		-218,	NOCROP | ANIM]
    ne: [ x+195,	y,		64,		250,	-31,		-218,	NOCROP | ANIM]
}

template template_house_250_wide(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		76,		250,	-37,		-218,	NOCROP | ANIM]
    sw: [ x+77,		y,		76,		250,	-37,		-218,	NOCROP | ANIM]  
    nw: [ x+154,	y,		76,		250,	-37,		-218,	NOCROP | ANIM]
    ne: [ x+231,	y,		76,		250,	-37,		-218,	NOCROP | ANIM]
}

/* Rotation checks for buildings to face roads */

// Bus stops are TILE_CLASS_STATION, not TILE_CLASS_ROAD. If the building is not adjacent to a road (below) it may be adacent to a bus stop which it should face.
// Note: This will make buildings truly not adjacent to a road, but adjacent to a station (of any type) face the station.
switch (FEAT_HOUSES, SELF, switch_station_adj_ne, nearby_tile_class(-1,0) == TILE_CLASS_STATION)
	{1: return 3; return 0;}
switch (FEAT_HOUSES, SELF, switch_station_adj_nw, nearby_tile_class(0,-1) == TILE_CLASS_STATION)
	{1: return 2; switch_station_adj_ne;}
switch (FEAT_HOUSES, SELF, switch_station_adj_sw, nearby_tile_class(1,0) == TILE_CLASS_STATION)
	{1: return 1; switch_station_adj_nw;}
switch (FEAT_HOUSES, SELF, switch_station_adj_se, nearby_tile_class(0,1) == TILE_CLASS_STATION)
	{1: return 0; switch_station_adj_sw;}
// Check for roads first
switch (FEAT_HOUSES, SELF, switch_road_adj_ne, nearby_tile_class(-1,0) == TILE_CLASS_ROAD)
	{1: return 3; switch_station_adj_se;}
switch (FEAT_HOUSES, SELF, switch_road_adj_nw, nearby_tile_class(0,-1) == TILE_CLASS_ROAD)
	{1: return 2; switch_road_adj_ne;}
switch (FEAT_HOUSES, SELF, switch_road_adj_sw, nearby_tile_class(1,0) == TILE_CLASS_ROAD)
	{1: return 1; switch_road_adj_nw;}
switch (FEAT_HOUSES, SELF, switch_road_adj_se, nearby_tile_class(0,1) == TILE_CLASS_ROAD)
	{1: return 0; switch_road_adj_sw;}

switch (FEAT_HOUSES,SELF, switch_road_adjacency, 1) {switch_road_adj_se;}

// End Sprite Templates
# 1 "JPplusBuildings.pnml" 4

// Primary Functions (i.e. do not use any other Function)
# 1 "src/functions/PopulationChecks.pnml" 1
/* Begin Population Checks */

/* 	
	- Purpose is for use in Construction Checks of Shops & Offices (Class 2) to only allow their construction when there is a certain 'level' of Residential
	- Larger weightings are given to 'denser' Residential
	- The Residential factor must be greater than the Class of the building using this function
*/

/* CLASS 2 */

switch (FEAT_HOUSES, SELF, Class2PopCheck, 
	(
		((1 + same_class_count_town) * 60) 
	)
	
	< 

	(
		(other_class_count_town(00) * 2)	+	// Houses
		(other_class_count_town(01) * 3)	+	// Townhouses
		(other_class_count_town(03) * 5)	+	// Small Apartments
		(other_class_count_town(04) * 10)		// Apartments
	)

) {return;}

/* CLASS 5 */

switch (FEAT_HOUSES, SELF, Class5PopCheck, 
	(
		((1 + same_class_count_town) * 50)	+ 
		(other_class_count_town(02) * 60)		// Shops and Offices
	)
	
	< 

	(
		(other_class_count_town(00) * 2)	+	// Houses
		(other_class_count_town(01) * 3)	+	// Townhouses
		(other_class_count_town(03) * 5)	+	// Small Apartments
		(other_class_count_town(04) * 10)		// Apartments
	)

) {return;}


/* End Population Checks */
# 1 "JPplusBuildings.pnml" 4
# 1 "src/functions/AdjacentToCommercial.pnml" 1
/* Begin Adjacent to Commercial */

/* Check for Commercial (Shops, Offices and Skyscrapers) within 1 tile excluding diagonals */
/* Begin Adjacent to Commercial */

/* Check for Commercial (Shops, Offices and Skyscrapers) within 1 tile excluding diagonals */

switch (FEAT_HOUSES, SELF, AdjacentToCommercialNE, nearby_tile_house_class(-1, 0) == 258 || nearby_tile_house_class(-1, 0) == 261 ) {return;}
switch (FEAT_HOUSES, SELF, AdjacentToCommercialNW, nearby_tile_house_class( 0,-1) == 258 || nearby_tile_house_class( 0,-1) == 261 ) {return;}
switch (FEAT_HOUSES, SELF, AdjacentToCommercialSE, nearby_tile_house_class( 0, 1) == 258 || nearby_tile_house_class( 0, 1) == 261 ) {return;}
switch (FEAT_HOUSES, SELF, AdjacentToCommercialSW, nearby_tile_house_class( 1, 0) == 258 || nearby_tile_house_class( 1, 0) == 261 ) {return;}

switch (FEAT_HOUSES, SELF, AdjacentToCommercial, AdjacentToCommercialNE() || AdjacentToCommercialNW() || AdjacentToCommercialSE() || AdjacentToCommercialSW() ) {return;}

switch (FEAT_HOUSES, SELF, DiagonalToCommercialN, nearby_tile_house_class(-1,-1) == 258 || nearby_tile_house_class(-1,-1) == 261 ) {return;}
switch (FEAT_HOUSES, SELF, DiagonalToCommercialE, nearby_tile_house_class(-1, 1) == 258 || nearby_tile_house_class(-1, 1) == 261 ) {return;}
switch (FEAT_HOUSES, SELF, DiagonalToCommercialS, nearby_tile_house_class( 1, 1) == 258 || nearby_tile_house_class( 1, 1) == 261 ) {return;}
switch (FEAT_HOUSES, SELF, DiagonalToCommercialW, nearby_tile_house_class( 1,-1) == 258 || nearby_tile_house_class( 1,-1) == 261 ) {return;}

switch (FEAT_HOUSES, SELF, DiagonalToCommercial, DiagonalToCommercialN() || DiagonalToCommercialE() || DiagonalToCommercialS() || DiagonalToCommercialW() ) {return;}

switch (FEAT_HOUSES, SELF, CommercialWithinOneTile, AdjacentToCommercial() || DiagonalToCommercial() ) {return;}


/* End Adjacent to Commercial */
# 1 "JPplusBuildings.pnml" 4
# 1 "src/functions/AcrossRoads.pnml" 1
/* Begin AcrossRoads */

// Purpose of this function is to allow Class 2 and Class 5 to build across roads (and station tiles).

/* NORTHWEST */

/* One tile wide road */

switch (FEAT_HOUSES, SELF, AcrossRoadNWOneTile, 		

	// Tile one tile away is a Road or Station tile
	( nearby_tile_class( 0,-1) == TILE_CLASS_ROAD || nearby_tile_class( 0,-1) == TILE_CLASS_STATION ) 

&& 	// AND

	// Two tiles away in the same direction is either a Class 2 or Class 5 
	( nearby_tile_house_class ( 0,-2) == 258 || nearby_tile_house_class ( 0,-2) == 261 )

) {return;}

/* Two tile wide road */

switch (FEAT_HOUSES, SELF, AcrossRoadNWTwoTiles, 
	// Tiles both one and two tiles away are Road tiles
	(	
		( nearby_tile_class( 0,-1) == TILE_CLASS_ROAD  || nearby_tile_class( 0,-1) == TILE_CLASS_STATION ) && 
		( nearby_tile_class( 0,-2) == TILE_CLASS_ROAD  || nearby_tile_class( 0,-2) == TILE_CLASS_STATION ) 
	) 
			
&& // AND
			
	// Three tiles away in the same direction is either a Class 2 or Class 5 
	(nearby_tile_house_class ( 0,-3) == 258 || nearby_tile_house_class ( 0,-3) == 261)	
		
) {return;}

// Three tile wide road
switch (FEAT_HOUSES, SELF, AcrossRoadNWThreeTiles, 
	// Tiles one, two and three tiles away are all Road tiles
	(		
		( nearby_tile_class( 0,-1) == TILE_CLASS_ROAD || nearby_tile_class( 0,-1) == TILE_CLASS_STATION ) && 
		( nearby_tile_class( 0,-2) == TILE_CLASS_ROAD || nearby_tile_class( 0,-2) == TILE_CLASS_STATION ) && 
		( nearby_tile_class( 0,-3) == TILE_CLASS_ROAD || nearby_tile_class( 0,-3) == TILE_CLASS_STATION )
	)

&& // AND
	
	// Four tiles away in the same direction is either a Class 2 or Class 5 
	(nearby_tile_house_class ( 0,-4) == 258 || nearby_tile_house_class ( 0,-4) == 261 )
		
) {return;}


// Giving for NORTHWEST 
switch (FEAT_HOUSES, SELF, AcrossRoadNW, AcrossRoadNWOneTile() || AcrossRoadNWTwoTiles() || AcrossRoadNWThreeTiles() ) {return;}

/* SOUTHEAST */

/* One tile wide road */

switch (FEAT_HOUSES, SELF, AcrossRoadSEOneTile, 		

	// Tile one tile away is a Road or Station tile
	( nearby_tile_class( 0, 1) == TILE_CLASS_ROAD || nearby_tile_class( 0, 1) == TILE_CLASS_STATION ) 

&& 	// AND

	// Two tiles away in the same direction is either a Class 2 or Class 5 
	( nearby_tile_house_class ( 0, 2) == 258 || nearby_tile_house_class ( 0, 2) == 261 )

) {return;}

/* Two tile wide road */

switch (FEAT_HOUSES, SELF, AcrossRoadSETwoTiles, 
	// Tiles both one and two tiles away are Road tiles
	(	
		( nearby_tile_class( 0, 1) == TILE_CLASS_ROAD  || nearby_tile_class( 0, 1) == TILE_CLASS_STATION ) && 
		( nearby_tile_class( 0, 2) == TILE_CLASS_ROAD  || nearby_tile_class( 0, 2) == TILE_CLASS_STATION ) 
	) 
			
&& // AND
			
	// Three tiles away in the same direction is either a Class 2 or Class 5 
	(nearby_tile_house_class ( 0, 3) == 258 || nearby_tile_house_class ( 0, 3) == 261)	
		
) {return;}

// Three tile wide road
switch (FEAT_HOUSES, SELF, AcrossRoadSEThreeTiles, 
	// Tiles one, two and three tiles away are all Road tiles
	(		
		( nearby_tile_class( 0, 1) == TILE_CLASS_ROAD || nearby_tile_class( 0, 1) == TILE_CLASS_STATION ) && 
		( nearby_tile_class( 0, 2) == TILE_CLASS_ROAD || nearby_tile_class( 0, 2) == TILE_CLASS_STATION ) && 
		( nearby_tile_class( 0, 3) == TILE_CLASS_ROAD || nearby_tile_class( 0, 3) == TILE_CLASS_STATION )
	)

&& // AND
	
	// Four tiles away in the same direction is either a Class 2 or Class 5 
	(nearby_tile_house_class ( 0, 4) == 258 || nearby_tile_house_class ( 0, 4) == 261 )
		
) {return;}


// Giving for SOUTHEAST
switch (FEAT_HOUSES, SELF, AcrossRoadSE, AcrossRoadSEOneTile() || AcrossRoadSETwoTiles() || AcrossRoadSEThreeTiles() ) {return;}


/* NORTHEAST */

/* One tile wide road */

switch (FEAT_HOUSES, SELF, AcrossRoadNEOneTile, 		

	// Tile one tile away is a Road or Station tile
	( nearby_tile_class(-1, 0) == TILE_CLASS_ROAD || nearby_tile_class(-1, 0) == TILE_CLASS_STATION ) 

&& 	// AND

	// Two tiles away in the same direction is either a Class 2 or Class 5 
	( nearby_tile_house_class (-2, 0) == 258 || nearby_tile_house_class (-2, 0) == 261 )

) {return;}

/* Two tile wide road */

switch (FEAT_HOUSES, SELF, AcrossRoadNETwoTiles, 
	// Tiles both one and two tiles away are Road tiles
	(	
		( nearby_tile_class(-1, 0) == TILE_CLASS_ROAD  || nearby_tile_class(-1, 0) == TILE_CLASS_STATION ) && 
		( nearby_tile_class(-2, 0) == TILE_CLASS_ROAD  || nearby_tile_class(-2, 0) == TILE_CLASS_STATION ) 
	) 
			
&& // AND
			
	// Three tiles away in the same direction is either a Class 2 or Class 5 
	(nearby_tile_house_class (-3, 0) == 258 || nearby_tile_house_class (-3, 0) == 261)	
		
) {return;}

// Three tile wide road
switch (FEAT_HOUSES, SELF, AcrossRoadNEThreeTiles, 
	// Tiles one, two and three tiles away are all Road tiles
	(		
		( nearby_tile_class(-1, 0) == TILE_CLASS_ROAD || nearby_tile_class(-1, 0) == TILE_CLASS_STATION ) && 
		( nearby_tile_class(-2, 0) == TILE_CLASS_ROAD || nearby_tile_class(-2, 0) == TILE_CLASS_STATION ) && 
		( nearby_tile_class(-3, 0) == TILE_CLASS_ROAD || nearby_tile_class(-3, 0) == TILE_CLASS_STATION )
	)

&& // AND
	
	// Four tiles away in the same direction is either a Class 2 or Class 5 
	(nearby_tile_house_class (-4, 0) == 258 || nearby_tile_house_class (-4, 0) == 261 )
		
) {return;}


// Giving for NORTHEAST
switch (FEAT_HOUSES, SELF, AcrossRoadNE, AcrossRoadNEOneTile() || AcrossRoadNETwoTiles() || AcrossRoadNEThreeTiles() ) {return;}


// SOUTHWEST

/* One tile wide road */

switch (FEAT_HOUSES, SELF, AcrossRoadSWOneTile, 		

	// Tile one tile away is a Road or Station tile
	( nearby_tile_class( 1, 0) == TILE_CLASS_ROAD || nearby_tile_class( 1, 0) == TILE_CLASS_STATION ) 

&& 	// AND

	// Two tiles away in the same direction is either a Class 2 or Class 5 
	( nearby_tile_house_class ( 2, 0) == 258 || nearby_tile_house_class ( 2, 0) == 261 )

) {return;}

/* Two tile wide road */

switch (FEAT_HOUSES, SELF, AcrossRoadSWTwoTiles, 
	// Tiles both one and two tiles away are Road tiles
	(	
		( nearby_tile_class( 1, 0) == TILE_CLASS_ROAD  || nearby_tile_class( 1, 0) == TILE_CLASS_STATION ) && 
		( nearby_tile_class( 2, 0) == TILE_CLASS_ROAD  || nearby_tile_class( 2, 0) == TILE_CLASS_STATION ) 
	) 
			
&& // AND
			
	// Three tiles away in the same direction is either a Class 2 or Class 5 
	(nearby_tile_house_class ( 3, 0) == 258 || nearby_tile_house_class ( 3, 0) == 261)	
		
) {return;}

// Three tile wide road
switch (FEAT_HOUSES, SELF, AcrossRoadSWThreeTiles, 
	// Tiles one, two and three tiles away are all Road tiles
	(		
		( nearby_tile_class( 1, 0) == TILE_CLASS_ROAD || nearby_tile_class( 1, 0) == TILE_CLASS_STATION ) && 
		( nearby_tile_class( 2, 0) == TILE_CLASS_ROAD || nearby_tile_class( 2, 0) == TILE_CLASS_STATION ) && 
		( nearby_tile_class( 3, 0) == TILE_CLASS_ROAD || nearby_tile_class( 3, 0) == TILE_CLASS_STATION )
	)

&& // AND
	
	// Four tiles away in the same direction is either a Class 2 or Class 5 
	(nearby_tile_house_class ( 4, 0) == 258 || nearby_tile_house_class ( 4, 0) == 261 )
		
) {return;}


// Giving for SOUTHWEST
switch (FEAT_HOUSES, SELF, AcrossRoadSW, AcrossRoadSWOneTile() || AcrossRoadSWTwoTiles() || AcrossRoadSWThreeTiles() ) {return;}


// Combining All four
switch (FEAT_HOUSES, SELF, AcrossRoads, AcrossRoadSE() || AcrossRoadSW() || AcrossRoadNE() || AcrossRoadNW() ) {return;}
 
/* End AcrossRoads */
# 1 "JPplusBuildings.pnml" 4
# 1 "src/functions/AcrossTracks.pnml" 1
/* Begin Across Tracks */

switch (FEAT_HOUSES, SELF, AcrossTracks, 
		// Direction 1
	(	
		(
			(	
			nearby_tile_class( 0,-1) == TILE_CLASS_RAIL && 
			nearby_tile_class( 0,-2) == TILE_CLASS_RAIL 
			) 
			&& 
			(	
			nearby_tile_house_class ( 0,-3) == 258 || 
			nearby_tile_house_class ( 0,-3) == 261
			)
		)
		||
		(
			(
			nearby_tile_class( 0,-1) == TILE_CLASS_RAIL && 
			nearby_tile_class( 0,-2) == TILE_CLASS_RAIL &&
			nearby_tile_class( 0,-3) == TILE_CLASS_RAIL
			)
			&&
			(
			nearby_tile_house_class ( 0,-4) == 258 || 
			nearby_tile_house_class ( 0,-4) == 261 
			)
		)
		||
		(
			(
			nearby_tile_class( 0,-1) == TILE_CLASS_RAIL && 
			nearby_tile_class( 0,-2) == TILE_CLASS_RAIL &&
			nearby_tile_class( 0,-3) == TILE_CLASS_RAIL &&
			nearby_tile_class( 0,-4) == TILE_CLASS_RAIL
			)
			&&
			(
			nearby_tile_house_class ( 0,-5) == 258 || 
			nearby_tile_house_class ( 0,-5) == 261 
			)
		)
	) 
	
	||	// Direction 2 

	(	
		(
			(	
			nearby_tile_class( 0, 1) == TILE_CLASS_RAIL && 
			nearby_tile_class( 0, 2) == TILE_CLASS_RAIL 
			) 
			&& 
			(	
			nearby_tile_house_class ( 0, 3) == 258 || 
			nearby_tile_house_class ( 0, 3) == 261
			)
		)
		||
		(
			(
			nearby_tile_class( 0, 1) == TILE_CLASS_RAIL && 
			nearby_tile_class( 0, 2) == TILE_CLASS_RAIL &&
			nearby_tile_class( 0, 3) == TILE_CLASS_RAIL
			)
			&&
			(
			nearby_tile_house_class ( 0, 4) == 258 || 
			nearby_tile_house_class ( 0, 4) == 261 
			)
		)
		||
		(
			(
			nearby_tile_class( 0, 1) == TILE_CLASS_RAIL && 
			nearby_tile_class( 0, 2) == TILE_CLASS_RAIL &&
			nearby_tile_class( 0, 3) == TILE_CLASS_RAIL &&
			nearby_tile_class( 0, 4) == TILE_CLASS_RAIL
			)
			&&
			(
			nearby_tile_house_class ( 0, 5) == 258 || 
			nearby_tile_house_class ( 0, 5) == 261 
			)
		)
	) 
	
	|| 	// Direction 3

	(	
		(
			(	
			nearby_tile_class(-1, 0) == TILE_CLASS_RAIL && 
			nearby_tile_class(-2, 0) == TILE_CLASS_RAIL 
			) 
			&& 
			(	
			nearby_tile_house_class (-3, 0) == 258 || 
			nearby_tile_house_class (-3, 0) == 261
			)
		)
		||
		(
			(
			nearby_tile_class(-1, 0) == TILE_CLASS_RAIL && 
			nearby_tile_class(-2, 0) == TILE_CLASS_RAIL &&
			nearby_tile_class(-3, 0) == TILE_CLASS_RAIL
			)
			&&
			(
			nearby_tile_house_class (-4, 0) == 258 || 
			nearby_tile_house_class (-4, 0) == 261 
			)
		)
		||
		(
			(
			nearby_tile_class(-1, 0) == TILE_CLASS_RAIL && 
			nearby_tile_class(-2, 0) == TILE_CLASS_RAIL &&
			nearby_tile_class(-3, 0) == TILE_CLASS_RAIL &&
			nearby_tile_class(-4, 0) == TILE_CLASS_RAIL
			)
			&&
			(
			nearby_tile_house_class (-5, 0) == 258 || 
			nearby_tile_house_class (-5, 0) == 261 
			)
		)
	) 
		
	||	// Direction 4

	(	
		(
			(	
			nearby_tile_class( 1, 0) == TILE_CLASS_RAIL && 
			nearby_tile_class( 2, 0) == TILE_CLASS_RAIL 
			) 
			&& 
			(	
			nearby_tile_house_class ( 3, 0) == 258 || 
			nearby_tile_house_class ( 3, 0) == 261
			)
		)
		||
		(
			(
			nearby_tile_class( 1, 0) == TILE_CLASS_RAIL && 
			nearby_tile_class( 2, 0) == TILE_CLASS_RAIL &&
			nearby_tile_class( 3, 0) == TILE_CLASS_RAIL
			)
			&&
			(
			nearby_tile_house_class ( 4, 0) == 258 || 
			nearby_tile_house_class ( 4, 0) == 261 
			)
		)
		||
		(
			(
			nearby_tile_class( 1, 0) == TILE_CLASS_RAIL && 
			nearby_tile_class( 2, 0) == TILE_CLASS_RAIL &&
			nearby_tile_class( 3, 0) == TILE_CLASS_RAIL &&
			nearby_tile_class( 4, 0) == TILE_CLASS_RAIL
			)
			&&
			(
			nearby_tile_house_class ( 5, 0) == 258 || 
			nearby_tile_house_class ( 5, 0) == 261 
			)
		)
	) 
) {return;}

/* End Across Tracks */
# 1 "JPplusBuildings.pnml" 4
# 1 "src/functions/CargoServiceChecks.pnml" 1
/* Begin Cargo Service Checks */

/* Functions checking for service of cargoes */

// Passenger Service
switch(FEAT_HOUSES, SELF, FuncServicePASS, 	(cargo_accepted_nearby_last_month(PASS) == 1 || cargo_accepted_nearby_this_month(PASS) == 1)) {return;}
// Mail Service
switch(FEAT_HOUSES, SELF, FuncServiceMAIL, 	(cargo_accepted_nearby_last_month(MAIL) == 1 || cargo_accepted_nearby_this_month(MAIL) == 1)) {return;}
// Petroleum Fuels Service - for Petrol Stations
switch(FEAT_HOUSES, SELF, FuncServicePETR, (cargo_accepted_nearby_last_month(PETR) == 1 || cargo_accepted_nearby_this_month(PETR) == 1)) {return;}
// Alcohol Service - for Stadiums
switch(FEAT_HOUSES, SELF, FuncServiceBEER, (cargo_accepted_nearby_last_month(BEER) == 1 || cargo_accepted_nearby_this_month(BEER) == 1)) {return;}
// Food Service - for Stadiums
switch(FEAT_HOUSES, SELF, FuncServiceFOOD, (cargo_accepted_nearby_last_month(FOOD) == 1 || cargo_accepted_nearby_this_month(FOOD) == 1)) {return;}
// Edible Oils Service - for Restaurants
switch(FEAT_HOUSES, SELF, FuncServiceEOIL, (cargo_accepted_nearby_last_month(EOIL) == 1 || cargo_accepted_nearby_this_month(EOIL) == 1)) {return;}
// Fish Service - for Restaurants
switch(FEAT_HOUSES, SELF, FuncServiceFISH, (cargo_accepted_nearby_last_month(FISH) == 1 || cargo_accepted_nearby_this_month(FISH) == 1)) {return;}
// Chemicals Service - for Hospitals
switch(FEAT_HOUSES, SELF, FuncServiceRFPR, (cargo_accepted_nearby_last_month(RFPR) == 1 || cargo_accepted_nearby_this_month(RFPR) == 1)) {return;}
// Fruit - for Shops
switch(FEAT_HOUSES, SELF, FuncServiceFRUT, (cargo_accepted_nearby_last_month(FRUT) == 1 || cargo_accepted_nearby_this_month(FRUT) == 1)) {return;}
// Cassava - for shops
switch(FEAT_HOUSES, SELF, FuncServiceCASS, (cargo_accepted_nearby_last_month(CASS) == 1 || cargo_accepted_nearby_this_month(CASS) == 1)) {return;}
// Goods - for various
switch(FEAT_HOUSES, SELF, FuncServiceGOOD, (cargo_accepted_nearby_last_month(GOOD) == 1 || cargo_accepted_nearby_this_month(GOOD) == 1)) {return;}

/* End Cargo Service Checks */
# 1 "JPplusBuildings.pnml" 4
# 1 "src/functions/one_liner_functions.pnml" 1
/* Begin one_liners */

/* Function to check if City */
switch (FEAT_HOUSES, PARENT, IsCity, is_city == 1) {return;}

/* Population must be over a certain level */
switch (FEAT_HOUSES, PARENT, PopOver10k, population >= 10000) {return;}
switch (FEAT_HOUSES, PARENT, PopOver30k, population >= 30000) {return;}
switch (FEAT_HOUSES, PARENT, PopOver50k, population >= 50000) {return;}
switch (FEAT_HOUSES, PARENT, PopOver70k, population >= 70000) {return;}

/* House is Unique */
switch (FEAT_HOUSES, SELF, IsUniqueHouse, same_house_count_town == 0) {return;}

/* Can only appear when town is being generated */
switch (FEAT_HOUSES, SELF, OnGenerationOnly, generating_town == 1) {return;}

/* Probabilities */
switch (FEAT_HOUSES, SELF, RandomBitsFour, random_bits % 4 == 0) {return;}

/* Range Checks */
switch (FEAT_HOUSES, SELF, TwentyTileGap, nearest_house_matching_criterion(20, SEARCH_HOUSE_BY_TYPE) == 0 ) {return;}
switch (FEAT_HOUSES, SELF, ThirtyTileGap, nearest_house_matching_criterion(30, SEARCH_HOUSE_BY_TYPE) == 0 ) {return;}

/* Check for road (and stations) in adjacent tiles functions */
switch (FEAT_HOUSES, SELF, HasRoadAdjacentNE, nearby_tile_class(-1, 0) == TILE_CLASS_ROAD || nearby_tile_class(-1, 0) == TILE_CLASS_STATION) {return;}
switch (FEAT_HOUSES, SELF, HasRoadAdjacentNW, nearby_tile_class( 0,-1) == TILE_CLASS_ROAD || nearby_tile_class( 0,-1) == TILE_CLASS_STATION) {return;}
switch (FEAT_HOUSES, SELF, HasRoadAdjacentSE, nearby_tile_class( 0, 1) == TILE_CLASS_ROAD || nearby_tile_class( 0, 1) == TILE_CLASS_STATION) {return;}
switch (FEAT_HOUSES, SELF, HasRoadAdjacentSW, nearby_tile_class( 1, 0) == TILE_CLASS_ROAD || nearby_tile_class( 1, 0) == TILE_CLASS_STATION) {return;}

switch (FEAT_HOUSES, SELF, HasRoadAdjacentE, nearby_tile_class(-1, 1) == TILE_CLASS_ROAD || nearby_tile_class(-1, 1) == TILE_CLASS_STATION) {return;}
switch (FEAT_HOUSES, SELF, HasRoadAdjacentS, nearby_tile_class( 1, 1) == TILE_CLASS_ROAD || nearby_tile_class( 1, 1) == TILE_CLASS_STATION) {return;}
switch (FEAT_HOUSES, SELF, HasRoadAdjacentW, nearby_tile_class( 1,-1) == TILE_CLASS_ROAD || nearby_tile_class( 1,-1) == TILE_CLASS_STATION) {return;}

switch (FEAT_HOUSES, SELF, HasRoadAdjacentSE2x2, nearby_tile_class(0,2) == TILE_CLASS_ROAD || nearby_tile_class(0,2) == TILE_CLASS_STATION) {return;}

switch (FEAT_HOUSES, SELF, HasRoadAdjacentNWSW, nearby_tile_class( 0,-1) == TILE_CLASS_ROAD || nearby_tile_class( 0,-1) == TILE_CLASS_STATION || 
	nearby_tile_class( 1, 0) == TILE_CLASS_ROAD || nearby_tile_class( 1, 0) == TILE_CLASS_STATION) {return;}

switch (FEAT_HOUSES, SELF, HasRoadAdjacentSESW, nearby_tile_class( 0, 1) == TILE_CLASS_ROAD || nearby_tile_class( 0, 1) == TILE_CLASS_STATION || 
	nearby_tile_class( 1, 0) == TILE_CLASS_ROAD || nearby_tile_class( 1, 0) == TILE_CLASS_STATION) {return;}

/* End one_liners */
# 1 "JPplusBuildings.pnml" 4

// Secondary Functions (i.e. those that use Primary Functions, therefore must appear later)
# 1 "src/functions/SpriteDirections.pnml" 1
/* Begin Sprite Directions*/

/*

When using Sprite Directions, list out the outcomes desired with the following results the switch in the nml file for the House

0 
1 SE Only
2 SW Only
3 SE && SW

*/

// Road to the SE
switch (FEAT_HOUSES, SELF, switch_SE_facing, HasRoadAdjacentSE() )
	{1: return 1; return 0;}

// Road to the SW
switch (FEAT_HOUSES, SELF, switch_SW_facing, HasRoadAdjacentSW() )
	{1: return 2; return 0;}

switch (FEAT_HOUSES, SELF, SpriteDirections, 
	switch_SE_facing() + 	// 0 or 1
	switch_SW_facing()		// 0 or 2
){return;}


/* End Sprite Directions */
# 1 "JPplusBuildings.pnml" 4
# 1 "src/functions/HouseGap.pnml" 1
/* Begin HouseOfficeGap */

switch(FEAT_HOUSES, SELF, HouseOfficeGap,
	
	// MAIN CRITERIA - Houses and Townhouses cannot build within two tiles of Commercial Buildings (Classes 2 & 5)
	!AdjacentToCommercial()

	|| // OR

	// EXCEPTION - Adjacent to Commercial AND there is NO passenger service - to prevent gaps on catchment area border
	( AdjacentToCommercial() && !FuncServicePASS() )

	|| // OR

	// EXCEPTION - Not enough population to allow another commercial, so allow a residential instead
	( AdjacentToCommercial() && !Class2PopCheck() )

){return;}

/* End HouseOfficeGap */
# 1 "JPplusBuildings.pnml" 4
# 1 "src/functions/SmallApartmentsCheck.pnml" 1
/* Begin Small Apartments Check */

/* Used to control placement of Small Apartments */
switch(FEAT_HOUSES, SELF, SmallApartmentsCheck,
	
	// MAIN CRITERIA - There is PASS service and is NO Commercial building within one tile
	(FuncServicePASS() && !CommercialWithinOneTile() )	
	
	// OR
	||	

	// EXCEPTION - There is NO PASS Service, and beside a Commercial building (which will have PASS service)
	(!FuncServicePASS() && CommercialWithinOneTile() )	
	
){return;}

/* End Small Apartments Check */
# 1 "JPplusBuildings.pnml" 4
# 1 "src/functions/ClusterBuildingClass.pnml" 1
/* Begin Cluster Building Class */

/* Buildings after the first of the class must cluster near the same class */

switch (FEAT_HOUSES, SELF, ClusterBuildingClass, 
	// If first of class and Town Zone Centre ("4"), then allow 
	( same_class_count_town == 0 && town_zone == TOWNZONE_CENTRE ) || 								
	
	// Thereafter, must be adjacent to a Commercial building (Class 2 or Class 5)
	AdjacentToCommercial() ||								

	/* SPECIFIC EXCEPTIONS */

	// Allow to build across roads of varying width (1, 2 and 3 tiles) from a Class 2 or Class 5 Building
	AcrossRoads()  ||									
	
	// Allow building across tracks from a Class 2 or Class 5 
	AcrossTracks()
	
	) {return;}

/* End Cluster Building Class */
# 1 "JPplusBuildings.pnml" 4
# 1 "src/functions/IfFirstSkyscraper.pnml" 1
/* Begin If First Skyscraper */

// Allow first skyscraper to build near Class 2
switch (FEAT_HOUSES, SELF, IfFirstSkyscraper, 
	((same_class_count_town == 0 && AdjacentToCommercial() ) || 
	nearest_house_matching_criterion(2, SEARCH_HOUSE_BY_CLASS) >= 1 )
) {return;}

/* End If First Skyscraper */
# 1 "JPplusBuildings.pnml" 4
# 1 "src/functions/CommercialCargoes.pnml" 1
/* Begin Commercial Cargoes */

switch(FEAT_HOUSES, SELF, CommercialCargoes,
	param_commercial_cargoes == 0 ||                            // No Cargo requirements - return 1 if no cargoes selected 
	(param_commercial_cargoes == 1 && FuncServiceMAIL() )       // Mail - return 1 if Mail delivered
) {return;}

/* End Commercial Cargoes*/
# 1 "JPplusBuildings.pnml" 4
# 1 "src/functions/DestructionChecks.pnml" 1
/* Begin Destruction Checks */

switch(FEAT_HOUSES, SELF, DestructionCheckHouses,
	
    // There is availability to build another Class 2 Building
	Class2PopCheck() &&

    // There is Passenger Service
    FuncServicePASS() &&

    // Two Buildings adjacent are Commercial
    ( 
        ( 
        // Obviously adjacent
        ( ( AdjacentToCommercialNE()  + AdjacentToCommercialNW() + AdjacentToCommercialSE() + AdjacentToCommercialSW() ) * 10 ) +

        // Diagonals are considered adjacent
        ( DiagonalToCommercialN() + DiagonalToCommercialE() + DiagonalToCommercialS() + DiagonalToCommercialW() ) +   

        // Across roads is considered adjacent
        ( ( AcrossRoadSE() + AcrossRoadSW() + AcrossRoadNE() + AcrossRoadNW() ) * 10 )
        
        ) >= 11 
    )
	
){return;}

/* End Destruction Checks */
# 1 "JPplusBuildings.pnml" 4
# 1 "src/functions/ProtectClassTwo.pnml" 1
/* Begin Protect Class Two */

/* When Population factor unsufficient, then protect current Class 2 */

// Purpose of this is to prevent the Class 2 cluster from splitting

switch (FEAT_HOUSES, SELF, ProtectClassTwoUntil1959, 
	// Check if there is NOT sufficient population to build another Class 2
	!Class2PopCheck() &&

    // Passenger service remains in place
    FuncServicePASS() &&

    current_year < 1960
	
	) {return;}

switch (FEAT_HOUSES, SELF, ProtectClassTwo, 
	// Check if there is NOT sufficient population to build another Class 2
	!Class2PopCheck() &&

    // Passenger service remains in place
    FuncServicePASS() 
	
	) {return;}

/* End Protect Class Two */
# 1 "JPplusBuildings.pnml" 4

// GROUND
# 1 "src/houses/ground/ground.pnml" 1
// Begin ground

// Grass
spriteset (spr_ground_grass, 							"src/gfx/ground/grass.png") 					{template_ground(1,1)}
// Snow
spriteset (spr_ground_snow, 						    "src/gfx/ground/snow.png") 						{template_ground(1,1)}
// Concrete
spriteset (spr_ground_concrete, 						"src/gfx/ground/concrete.png") 					{template_ground(1,1)}
// Temple
spriteset (spr_ground_temple, 							"src/gfx/ground/temple.png") 					{template_ground(1,1)}
// Shiro
spriteset (spr_ground_shiro, 							"src/gfx/ground/shiro.png") 					{template_ground(1,1)}

// End ground
# 1 "JPplusBuildings.pnml" 4

// HOUSES
# 1 "src/houses/houses/naganuma_house.pnml" 1
// Begin naganuma_house

// A
spriteset (spr_naganuma_house_a, 					"src/gfx/houses/naganuma/building_a.png") 						{template_house_80(1,1)}
spriteset (spr_naganuma_house_a_snow, 				"src/gfx/houses/naganuma/building_a.png") 						{template_house_80(1,82)}

// B
spriteset (spr_naganuma_house_b, 					"src/gfx/houses/naganuma/building_b.png") 						{template_house_80(1,1)}
spriteset (spr_naganuma_house_b_snow, 				"src/gfx/houses/naganuma/building_b.png") 						{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_naganuma_house_a_norm {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_naganuma_house_a (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_naganuma_house_a_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_naganuma_house_a_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_naganuma_house_b_norm {
	ground {
		sprite: spr_ground_grass(construction_state);
	}
	building {
		sprite: spr_naganuma_house_b (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_naganuma_house_b_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_naganuma_house_b_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_naganuma_house_a_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_naganuma_house_a_snow;
	sprlay_naganuma_house_a_norm;
}

switch(FEAT_HOUSES, SELF, switch_naganuma_house_b_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_naganuma_house_b_snow;
	sprlay_naganuma_house_b_norm;
}

// Selection of Sprites based in relation to where roads are

random_switch (FEAT_HOUSES, SELF, switch_naganuma_house_sprites) {
	1: switch_naganuma_house_a_sprites;		// SE
	1: switch_naganuma_house_b_sprites;		// SW
}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_naganuma_house_con_check, 
	HouseOfficeGap() 				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
	) {return;}	

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_naganuma_house_old)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

random_switch (FEAT_HOUSES, SELF, rand_recolor_naganuma_house_new)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

item(FEAT_HOUSES, item_naganuma_house_old, 19, HOUSE_SIZE_1X1){
	property {
		substitute: 				26;
		name: 						string(NAME_NAGANUMA_HOUSE);
		population: 				20;	
		accepted_cargos: 			[[PASS, 2],[MAIL, 1],[FOOD, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1870,1959];
		minimum_lifetime: 			2;
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										//TOWNZONE_INNER_SUBURB,	// 3
										TOWNZONE_OUTER_SUBURB,		// 2
										TOWNZONE_OUTSKIRT,			// 1
										TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class: 			0;
		
		}
	graphics {
		default: 					switch_naganuma_house_sprites;
		construction_check: 		switch_naganuma_house_con_check;
		cargo_production: 			func_produce(2,1);
		colour: 					rand_recolor_naganuma_house_old;
	}
}

item(FEAT_HOUSES, item_naganuma_house_new, 20, HOUSE_SIZE_1X1){
	property {
		substitute: 				26;
		name: 						string(NAME_NAGANUMA_HOUSE);
		population: 				20;	
		accepted_cargos: 			[[PASS, 2],[MAIL, 1],[FOOD, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1960,0xFFFF];
		minimum_lifetime: 			2;
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										TOWNZONE_INNER_SUBURB,		// 3
										TOWNZONE_OUTER_SUBURB,		// 2
										TOWNZONE_OUTSKIRT,			// 1
										TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class: 			0;
		
		}
	graphics {
		default: 					switch_naganuma_house_sprites;
		construction_check: 		switch_naganuma_house_con_check;
		cargo_production: 			func_produce(2,1);
		colour: 					rand_recolor_naganuma_house_new;
	}
}

// End naganuma_house
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/houses/nishikawa_house.pnml" 1
// Begin nishikawa_house

// A
spriteset (spr_nishikawa_house_a, 					"src/gfx/houses/nishikawa/building_a.png") 						{template_house_80(1,1)}
spriteset (spr_nishikawa_house_a_snow, 				"src/gfx/houses/nishikawa/building_a.png") 						{template_house_80(1,82)}

// B
spriteset (spr_nishikawa_house_b, 					"src/gfx/houses/nishikawa/building_b.png") 						{template_house_80(1,1)}
spriteset (spr_nishikawa_house_b_snow, 				"src/gfx/houses/nishikawa/building_b.png") 						{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_nishikawa_house_a_norm {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_nishikawa_house_a (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_nishikawa_house_a_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_nishikawa_house_a_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_nishikawa_house_b_norm {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_nishikawa_house_b (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_nishikawa_house_b_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_nishikawa_house_b_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_nishikawa_house_a_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_nishikawa_house_a_snow;
	sprlay_nishikawa_house_a_norm;
}

switch(FEAT_HOUSES, SELF, switch_nishikawa_house_b_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_nishikawa_house_b_snow;
	sprlay_nishikawa_house_b_norm;
}

// Selection of Sprites based in relation to where roads are

random_switch (FEAT_HOUSES, SELF, switch_nishikawa_house_sprites) {
	1: switch_nishikawa_house_a_sprites;		// SE
	1: switch_nishikawa_house_b_sprites;		// SW
}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_nishikawa_house_con_check, 
	HouseOfficeGap() 				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
	) {return;}	

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_nishikawa_house_old)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

random_switch (FEAT_HOUSES, SELF, rand_recolor_nishikawa_house_new)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

item(FEAT_HOUSES, item_nishikawa_house_old, 21, HOUSE_SIZE_1X1){
	property {
		substitute: 				26;
		name: 						string(NAME_NISHIKAWA_HOUSE);
		population: 				20;	
		accepted_cargos: 			[[PASS, 2],[MAIL, 1],[FOOD, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1870,1959];
		minimum_lifetime: 			2;
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										TOWNZONE_INNER_SUBURB,		// 3
										TOWNZONE_OUTER_SUBURB,		// 2
										TOWNZONE_OUTSKIRT,			// 1
										TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class: 			0;
		
		}
	graphics {
		default: 					switch_nishikawa_house_sprites;
		construction_check: 		switch_nishikawa_house_con_check;
		cargo_production: 			func_produce(2,1);
		colour: 					rand_recolor_nishikawa_house_old;
	}
}

item(FEAT_HOUSES, item_nishikawa_house_new, 22, HOUSE_SIZE_1X1){
	property {
		substitute: 				26;
		name: 						string(NAME_NISHIKAWA_HOUSE);
		population: 				20;	
		accepted_cargos: 			[[PASS, 2],[MAIL, 1],[FOOD, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1960,0xFFFF];
		minimum_lifetime: 			2;
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										//TOWNZONE_INNER_SUBURB,	// 3
										TOWNZONE_OUTER_SUBURB,		// 2
										TOWNZONE_OUTSKIRT,			// 1
										TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class: 			0;
		
		}
	graphics {
		default: 					switch_nishikawa_house_sprites;
		construction_check: 		switch_nishikawa_house_con_check;
		cargo_production: 			func_produce(2,1);
		colour: 					rand_recolor_nishikawa_house_new;
	}
}

// End nishikawa_house
# 1 "JPplusBuildings.pnml" 4

// TOWNHOUSES
# 1 "src/houses/houses/townhouses_01.pnml" 1
// Begin townhouses

// Building Sprites
spriteset (spr_townhouses_01_a, 					"src/gfx/houses/townhouses_01/building_a.png") 			{template_house_80(1,1)}
spriteset (spr_townhouses_01_a_snow, 				"src/gfx/houses/townhouses_01/building_a.png") 			{template_house_80(1,82)}

spriteset (spr_townhouses_01_b, 					"src/gfx/houses/townhouses_01/building_b.png") 			{template_house_80(1,1)}
spriteset (spr_townhouses_01_b_snow, 				"src/gfx/houses/townhouses_01/building_b.png") 			{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_townhouses_01_a_norm {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_townhouses_01_a (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_townhouses_01_a_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_townhouses_01_a_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_townhouses_01_b_norm {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_townhouses_01_b (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_townhouses_01_b_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_townhouses_01_b_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_townhouses_01_a_sprites, terrain_type) {
	TILETYPE_SNOW: sprlay_townhouses_01_a_snow;
	sprlay_townhouses_01_a_norm;
}

switch(FEAT_HOUSES, SELF, switch_townhouses_01_b_sprites, terrain_type) {
	TILETYPE_SNOW: sprlay_townhouses_01_b_snow;
	sprlay_townhouses_01_b_norm;
}

// Random selection of sprites
random_switch (FEAT_HOUSES, SELF, switch_townhouses_01_sprites) {
	1: switch_townhouses_01_a_sprites;		
	1: switch_townhouses_01_b_sprites;		
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_townhouses_01_a)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Checks

switch (FEAT_HOUSES, SELF, switch_townhouses_01_old_con_check, 
	HouseOfficeGap()
) {return;}	

switch (FEAT_HOUSES, SELF, switch_townhouses_01_new_con_check, 
	HouseOfficeGap() && 			// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
	!FuncServicePASS() 				// Builds where there is no Passenger service
) {return;}	

item(FEAT_HOUSES, item_townhouses_old, 05, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_TOWNHOUSES_01);
		population: 				30;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1870,1959];
		minimum_lifetime: 			2;
		availability_mask: 			[bitmask(								// Agreed to JPS
										TOWNZONE_CENTRE,			// 4
										TOWNZONE_INNER_SUBURB,		// 3
										TOWNZONE_OUTER_SUBURB,		// 2
										TOWNZONE_OUTSKIRT,			// 1
										TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				1;
		
		}
	graphics {
		default: 					switch_townhouses_01_sprites;
		construction_check: 		switch_townhouses_01_old_con_check;
		destruction:				DestructionCheckHouses;
		cargo_production: 			func_produce(2,1);
		colour: 					rand_recolor_townhouses_01_a;
	}
}

item(FEAT_HOUSES, item_townhouses_new, 06, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_TOWNHOUSES_01);
		population: 				30;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1960,0xFFFF];
		minimum_lifetime: 			2;
		availability_mask: 			[bitmask(								// Agreed to JPS
										TOWNZONE_CENTRE,			// 4
										TOWNZONE_INNER_SUBURB,		// 3
										TOWNZONE_OUTER_SUBURB,		// 2
										TOWNZONE_OUTSKIRT			// 1
										//TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				1;
		
		}
	graphics {
		default: 					switch_townhouses_01_sprites;
		construction_check: 		switch_townhouses_01_new_con_check;
		cargo_production: 			func_produce(4,1);
		colour: 					rand_recolor_townhouses_01_a;
	}
}

// End townhouses
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/houses/townhouses_02.pnml" 1
// Begin townhouses

// Building Sprites
spriteset (spr_townhouses_02, 					"src/gfx/houses/townhouses_02/building.png") 		{template_house_80(1,1)}
spriteset (spr_townhouses_02_snow, 				"src/gfx/houses/townhouses_02/building.png") 		{template_house_80(1,82)}

// Ground Tiles
spriteset (spr_townhouses_02_ground, 			"src/gfx/houses/townhouses_02/ground.png") 			{template_ground(1,1)}
spriteset (spr_townhouses_02_ground_snow, 		"src/gfx/houses/townhouses_02/ground.png") 			{template_ground(1,33)}

// Spritelayouts
spritelayout sprlay_townhouses_02_norm {
	ground {
		sprite: spr_townhouses_02_ground (3);
	}
	building {
		sprite: spr_townhouses_02 (3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_townhouses_02_snow {
	ground {
		sprite: spr_townhouses_02_ground_snow (3);
	}
	building {
		sprite: spr_townhouses_02_snow (3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_townhouses_02_sprites, terrain_type) {
	TILETYPE_SNOW: sprlay_townhouses_02_snow;
	sprlay_townhouses_02_norm;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_townhouses_02)
	{
		//1: PALETTE_CC_RED;
		//2: PALETTE_CC_LIGHT_BLUE;
		//1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		//1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Checks
switch (FEAT_HOUSES, SELF, switch_townhouses_02_con_check, 
	HouseOfficeGap() 				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
) {return;}	


item(FEAT_HOUSES, item_townhouses_02, 112, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_TOWNHOUSES_02);
		population: 				30;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2],[FOOD, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1955,1969];
		minimum_lifetime: 			2;
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										//TOWNZONE_INNER_SUBURB,	// 3
										TOWNZONE_OUTER_SUBURB,		// 2
										TOWNZONE_OUTSKIRT			// 1
										//TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				1;
		
		}
	graphics {
		default: 					switch_townhouses_02_sprites;
		construction_check: 		switch_townhouses_02_con_check;
		cargo_production: 			func_produce(2,1);
		colour: 					rand_recolor_townhouses_02;
	}
}

// End townhouses
# 1 "JPplusBuildings.pnml" 4

// OLD HOUSES
# 1 "src/houses/houses_old/wooden_farmhouse_01.pnml" 1
// Begin wooden_farmhouse_01

// Buildings
spriteset (spr_wooden_farmhouse_01, 				"src/gfx/houses_old/wooden_farmhouse_01/building.png") 		{template_house_80(1,1)}
spriteset (spr_wooden_farmhouse_01_snow, 			"src/gfx/houses_old/wooden_farmhouse_01/building.png") 		{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_wooden_farmhouse_01 {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_wooden_farmhouse_01 (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_wooden_farmhouse_01_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_wooden_farmhouse_01_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_wooden_farmhouse_01_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_wooden_farmhouse_01_snow;
	sprlay_wooden_farmhouse_01;
}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_wooden_farmhouse_01_con_check, 
	HouseOfficeGap() &&				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
	HasRoadAdjacentSE()
) {return;}	

item(FEAT_HOUSES, item_wooden_farmhouse_01, 17, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_WOODEN_FARMHOUSE);
		population: 				20;										// Agreed to JPS
		accepted_cargos: 			[[PASS, 2],[MAIL, 1],[GOOD, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				4;										// Increased due to only SE facing
		years_available: 			[1700,1950];							// Agreed to JPS
		minimum_lifetime: 			2;										
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										//TOWNZONE_INNER_SUBURB,	// 3
										//TOWNZONE_OUTER_SUBURB		// 2
										TOWNZONE_OUTSKIRT,			// 1
										TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				0;
		
		}
	graphics {
		default: 					switch_wooden_farmhouse_01_sprites;
		construction_check: 		switch_wooden_farmhouse_01_con_check;
		cargo_production: 			func_produce(1,1);						// 
		//colour: 					rand_recolor_wooden_townhouses;
	}
}

// End wooden_farmhouse_01
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/houses_old/wooden_house_01.pnml" 1
// Begin wooden_house_01

// Buildings
spriteset (spr_wooden_house_01a, 			"src/gfx/houses_old/wooden_house_01/building_a.png") 			{template_house_80(1,1)}
spriteset (spr_wooden_house_01a_snow, 		"src/gfx/houses_old/wooden_house_01/building_a.png") 			{template_house_80(1,82)}

spriteset (spr_wooden_house_01b, 			"src/gfx/houses_old/wooden_house_01/building_b.png") 			{template_house_80(1,1)}
spriteset (spr_wooden_house_01b_snow, 		"src/gfx/houses_old/wooden_house_01/building_b.png") 			{template_house_80(1,82)}

spriteset (spr_wooden_house_01c, 			"src/gfx/houses_old/wooden_house_01/building_c.png") 			{template_house_80(1,1)}
spriteset (spr_wooden_house_01c_snow, 		"src/gfx/houses_old/wooden_house_01/building_c.png") 			{template_house_80(1,82)}

spriteset (spr_wooden_house_01d, 			"src/gfx/houses_old/wooden_house_01/building_d.png") 			{template_house_80(1,1)}
spriteset (spr_wooden_house_01d_snow, 		"src/gfx/houses_old/wooden_house_01/building_d.png") 			{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_wooden_house_01a {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_wooden_house_01a (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_wooden_house_01a_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_wooden_house_01a_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_wooden_house_01b {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_wooden_house_01b (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_wooden_house_01b_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_wooden_house_01b_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_wooden_house_01c {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_wooden_house_01c (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_wooden_house_01c_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_wooden_house_01c_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_wooden_house_01d {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_wooden_house_01d (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_wooden_house_01d_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_wooden_house_01d_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}


// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_wooden_house_01a,terrain_type) {
	TILETYPE_SNOW: sprlay_wooden_house_01a_snow;
	sprlay_wooden_house_01a;
}

switch(FEAT_HOUSES, SELF, switch_wooden_house_01b,terrain_type) {
	TILETYPE_SNOW: sprlay_wooden_house_01b_snow;
	sprlay_wooden_house_01b;
}

switch(FEAT_HOUSES, SELF, switch_wooden_house_01c,terrain_type) {
	TILETYPE_SNOW: sprlay_wooden_house_01c_snow;
	sprlay_wooden_house_01c;
}

switch(FEAT_HOUSES, SELF, switch_wooden_house_01d,terrain_type) {
	TILETYPE_SNOW: sprlay_wooden_house_01d_snow;
	sprlay_wooden_house_01d;
}

// Selection of sprites
random_switch (FEAT_HOUSES, SELF, switch_wooden_house_01_sprites_any) {
	1: switch_wooden_house_01b;		// Any
	1: switch_wooden_house_01d;		// Any
}

random_switch (FEAT_HOUSES, SELF, switch_wooden_house_01_sprites_SESW) {
	1: switch_wooden_house_01a;		// SE
	1: switch_wooden_house_01c;		// SW
}

switch (FEAT_HOUSES, SELF, switch_wooden_house_01_sprites, SpriteDirections() ) {
	1: switch_wooden_house_01a; 
	2: switch_wooden_house_01c;
	3: switch_wooden_house_01_sprites_SESW;
	default: switch_wooden_house_01_sprites_any;
}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_wooden_house_01_con_check, 
	HouseOfficeGap() 			// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
) {return;}	

item(FEAT_HOUSES, item_wooden_house_01, 18, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_WOODEN_HOUSE);
		population: 				30;										// Agreed to JPS
		accepted_cargos: 			[[PASS, 3],[MAIL, 1],[GOOD, 3]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1700,1950];							// Agreed to JPS
		minimum_lifetime: 			2;										
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										TOWNZONE_INNER_SUBURB,		// 3
										TOWNZONE_OUTER_SUBURB		// 2
										//TOWNZONE_OUTSKIRT,		// 1
										//TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				0;
		
		}
	graphics {
		default: 					switch_wooden_house_01_sprites;
		construction_check: 		switch_wooden_house_01_con_check;
		cargo_production: 			func_produce(2,1);						// 
		//colour: 					rand_recolor_wooden_townhouses;
	}
}

// End wooden_house_01
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/houses_old/dense_wooden.pnml" 1
// Begin dense_wooden

// Buildings
spriteset (spr_dense_wooden_a, 						"src/gfx/houses_old/dense_wooden/building_a.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_a_snow, 				"src/gfx/houses_old/dense_wooden/building_a.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_b, 						"src/gfx/houses_old/dense_wooden/building_b.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_b_snow, 				"src/gfx/houses_old/dense_wooden/building_b.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_c, 						"src/gfx/houses_old/dense_wooden/building_c.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_c_snow, 				"src/gfx/houses_old/dense_wooden/building_c.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_d, 						"src/gfx/houses_old/dense_wooden/building_d.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_d_snow, 				"src/gfx/houses_old/dense_wooden/building_d.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_e, 						"src/gfx/houses_old/dense_wooden/building_e.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_e_snow, 				"src/gfx/houses_old/dense_wooden/building_e.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_f, 						"src/gfx/houses_old/dense_wooden/building_f.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_f_snow, 				"src/gfx/houses_old/dense_wooden/building_f.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_g, 						"src/gfx/houses_old/dense_wooden/building_g.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_g_snow, 				"src/gfx/houses_old/dense_wooden/building_g.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_h, 						"src/gfx/houses_old/dense_wooden/building_h.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_h_snow, 				"src/gfx/houses_old/dense_wooden/building_h.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_i, 						"src/gfx/houses_old/dense_wooden/building_i.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_i_snow, 				"src/gfx/houses_old/dense_wooden/building_i.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_j, 						"src/gfx/houses_old/dense_wooden/building_j.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_j_snow, 				"src/gfx/houses_old/dense_wooden/building_j.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_k, 						"src/gfx/houses_old/dense_wooden/building_k.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_k_snow, 				"src/gfx/houses_old/dense_wooden/building_k.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_l, 						"src/gfx/houses_old/dense_wooden/building_l.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_l_snow, 				"src/gfx/houses_old/dense_wooden/building_l.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_m, 						"src/gfx/houses_old/dense_wooden/building_m.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_m_snow, 				"src/gfx/houses_old/dense_wooden/building_m.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_n, 						"src/gfx/houses_old/dense_wooden/building_n.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_n_snow, 				"src/gfx/houses_old/dense_wooden/building_n.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_o, 						"src/gfx/houses_old/dense_wooden/building_o.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_o_snow, 				"src/gfx/houses_old/dense_wooden/building_o.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_p, 						"src/gfx/houses_old/dense_wooden/building_p.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_p_snow, 				"src/gfx/houses_old/dense_wooden/building_p.png") 					{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_dense_wooden_a {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_dense_wooden_a (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_a_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_dense_wooden_a_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_b {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_dense_wooden_b (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_b_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_dense_wooden_b_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_c {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_dense_wooden_c (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_c_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_dense_wooden_c_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_d {
	ground {
		sprite: spr_ground_grass(construction_state);
	}
	building {
		sprite: spr_dense_wooden_d(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_d_snow {
	ground {
		sprite: spr_ground_snow(construction_state);
	}
	building {
		sprite: spr_dense_wooden_d_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_e {
	ground {
		sprite: spr_ground_grass(construction_state);
	}
	building {
		sprite: spr_dense_wooden_e(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_e_snow {
	ground {
		sprite: spr_ground_snow(construction_state);
	}
	building {
		sprite: spr_dense_wooden_e_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_f {
	ground {
		sprite: spr_ground_grass(construction_state);
	}
	building {
		sprite: spr_dense_wooden_f(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_f_snow {
	ground {
		sprite: spr_ground_snow(construction_state);
	}
	building {
		sprite: spr_dense_wooden_f_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_g {
	ground {
		sprite: spr_ground_grass(construction_state);
	}
	building {
		sprite: spr_dense_wooden_g(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_g_snow {
	ground {
		sprite: spr_ground_snow(construction_state);
	}
	building {
		sprite: spr_dense_wooden_g_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_h {
	ground {
		sprite: spr_ground_grass(construction_state);
	}
	building {
		sprite: spr_dense_wooden_h(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_h_snow {
	ground {
		sprite: spr_ground_snow(construction_state);
	}
	building {
		sprite: spr_dense_wooden_h_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_i {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_dense_wooden_i (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_i_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_dense_wooden_i_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_j {
	ground {
		sprite: spr_ground_grass(construction_state);
	}
	building {
		sprite: spr_dense_wooden_j(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_j_snow {
	ground {
		sprite: spr_ground_snow(construction_state);
	}
	building {
		sprite: spr_dense_wooden_j_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_k {
	ground {
		sprite: spr_ground_grass(construction_state);
	}
	building {
		sprite: spr_dense_wooden_k(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_k_snow {
	ground {
		sprite: spr_ground_snow(construction_state);
	}
	building {
		sprite: spr_dense_wooden_k_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_l {
	ground {
		sprite: spr_ground_grass(construction_state);
	}
	building {
		sprite: spr_dense_wooden_l(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_l_snow {
	ground {
		sprite: spr_ground_snow(construction_state);
	}
	building {
		sprite: spr_dense_wooden_l_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_m {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_dense_wooden_m (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_m_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_dense_wooden_m_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_n {
	ground {
		sprite: spr_ground_grass(construction_state);
	}
	building {
		sprite: spr_dense_wooden_n (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_n_snow {
	ground {
		sprite: spr_ground_snow(construction_state);
	}
	building {
		sprite: spr_dense_wooden_n_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_o {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_dense_wooden_o (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_o_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_dense_wooden_o_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_p {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_dense_wooden_p (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_p_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_dense_wooden_p_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_dense_wooden_a,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_a_snow;
	sprlay_dense_wooden_a;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_b,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_b_snow;
	sprlay_dense_wooden_b;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_c,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_c_snow;
	sprlay_dense_wooden_c;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_d,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_d_snow;
	sprlay_dense_wooden_d;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_e,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_e_snow;
	sprlay_dense_wooden_e;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_f,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_f_snow;
	sprlay_dense_wooden_f;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_g,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_g_snow;
	sprlay_dense_wooden_g;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_h,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_h_snow;
	sprlay_dense_wooden_h;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_i,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_i_snow;
	sprlay_dense_wooden_i;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_j,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_j_snow;
	sprlay_dense_wooden_j;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_k,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_k_snow;
	sprlay_dense_wooden_k;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_l,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_l_snow;
	sprlay_dense_wooden_l;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_m,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_m_snow;
	sprlay_dense_wooden_m;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_n,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_n_snow;
	sprlay_dense_wooden_n;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_o,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_o_snow;
	sprlay_dense_wooden_o;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_p,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_p_snow;
	sprlay_dense_wooden_p;
}

// Random selection of sprites
random_switch (FEAT_HOUSES, SELF, switch_dense_wooden_sprites) {
	1: switch_dense_wooden_a;
	1: switch_dense_wooden_b;
	1: switch_dense_wooden_c;
	1: switch_dense_wooden_d;
	1: switch_dense_wooden_e;
	1: switch_dense_wooden_f;
	1: switch_dense_wooden_g;
	1: switch_dense_wooden_h;
	1: switch_dense_wooden_i;
	1: switch_dense_wooden_j;
	1: switch_dense_wooden_k;
	1: switch_dense_wooden_l;
	1: switch_dense_wooden_m;
	1: switch_dense_wooden_n;
	1: switch_dense_wooden_o;
	1: switch_dense_wooden_p;

}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_dense_wooden)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Checks
switch (FEAT_HOUSES, SELF, switch_dense_wooden_con_check, 
	HouseOfficeGap() 				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
) {return;}	

item(FEAT_HOUSES, item_dense_wooden, 13, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_DENSE_WOODEN);
		population: 				60;										// Agreed to JPS
		accepted_cargos: 			[[PASS, 6],[MAIL, 3],[GOOD, 6]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1700,1950];							// Agreed to JPS
		minimum_lifetime: 			2;										
		availability_mask: 			[bitmask(								// Agreed to JPS
										TOWNZONE_CENTRE,			// 4
										TOWNZONE_INNER_SUBURB		// 3
										//TOWNZONE_OUTER_SUBURB,	// 2
										//TOWNZONE_OUTSKIRT			// 1
										//TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				1;										// Reallcoated to BC1 since more like townhouse (and higher popn factor)
		
		}
	graphics {
		default: 					switch_dense_wooden_sprites;
		construction_check: 		switch_dense_wooden_con_check;
		destruction:				DestructionCheckHouses;
		cargo_production: 			func_produce(2,1);						// 
		colour: 					rand_recolor_dense_wooden;
	}
}

// End dense_wooden
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/houses_old/wooden_townhouses_01.pnml" 1
// Begin wooden_townhouses_01

// Buildings
spriteset (spr_wooden_townhouses_01, 			"src/gfx/houses_old/wooden_townhouses_01/building.png") 			{template_house_80_wide(1,1)}
spriteset (spr_wooden_townhouses_01_snow, 		"src/gfx/houses_old/wooden_townhouses_01/building.png") 			{template_house_80_wide(1,82)}

// Spritelayouts
spritelayout sprlay_wooden_townhouses_01 {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_wooden_townhouses_01 (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_wooden_townhouses_01_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_wooden_townhouses_01_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_wooden_townhouses_01,terrain_type) {
	TILETYPE_SNOW: sprlay_wooden_townhouses_01_snow;
	sprlay_wooden_townhouses_01;
}

switch (FEAT_HOUSES, SELF, switch_wooden_townhouses_01_con_check, 
	HouseOfficeGap() 			// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
) {return;}	

item(FEAT_HOUSES, item_wooden_townhouses_01, 01, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_WOODEN_TOWNHOUSES_SHOPS);
		population: 				40;										// Agreed to JPS
		accepted_cargos: 			[[PASS, 4],[MAIL, 2],[GOOD, 4]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1700,1950];							// Agreed to JPS
		minimum_lifetime: 			2;										
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										TOWNZONE_INNER_SUBURB,		// 3
										//TOWNZONE_OUTER_SUBURB,	// 2
										TOWNZONE_OUTSKIRT			// 1
										//TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				0;
		
		}
	graphics {
		default: 					switch_wooden_townhouses_01;
		construction_check: 		switch_wooden_townhouses_01_con_check;
		cargo_production: 			func_produce(4,1);						// 
		//colour: 					rand_recolor_wooden_townhouses;
	}
}

// End wooden_townhouses_01
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/houses_old/wooden_townhouses_02.pnml" 1
// Begin wooden_townhouses_02

// Ground Sprites

// Leveraged from dense wooden

// Buildings
spriteset (spr_wooden_townhouses_02, 			"src/gfx/houses_old/wooden_townhouses_02/building.png") 			{template_house_80(1,1)}
spriteset (spr_wooden_townhouses_02_snow, 		"src/gfx/houses_old/wooden_townhouses_02/building.png")  			{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_wooden_townhouses_02 {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_wooden_townhouses_02 (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_wooden_townhouses_02_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_wooden_townhouses_02_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_wooden_townhouses_02,terrain_type) {
	TILETYPE_SNOW: sprlay_wooden_townhouses_02_snow;
	sprlay_wooden_townhouses_02;
}

// Construction Checks
switch (FEAT_HOUSES, SELF, switch_wooden_townhouses_02_con_check, 
	HouseOfficeGap() 				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
) {return;}	

item(FEAT_HOUSES, item_wooden_townhouses_02, 03, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_WOODEN_TOWNHOUSES);
		population: 				40;										// Agreed to JPS
		accepted_cargos: 			[[PASS, 4],[MAIL, 2],[GOOD, 4]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1700,1950];							// Agreed to JPS
		minimum_lifetime: 			2;										
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										TOWNZONE_INNER_SUBURB,		// 3
										//TOWNZONE_OUTER_SUBURB,	// 2
										TOWNZONE_OUTSKIRT			// 1
										//TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				0;
		
		}
	graphics {
		default: 					switch_wooden_townhouses_02;
		construction_check: 		switch_wooden_townhouses_02_con_check;
		cargo_production: 			func_produce(4,1);						// 
		//colour: 					rand_recolor_wooden_townhouses;
	}
}

// End wooden_townhouses_02
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/houses_old/wooden_townhouses_03.pnml" 1
// Begin wooden_townhouses_03

// Ground Sprites

// Leveraged from dense wooden

// Buildings
spriteset (spr_wooden_townhouses_03, 			"src/gfx/houses_old/wooden_townhouses_03/building.png")  			{template_house_80(1,1)}
spriteset (spr_wooden_townhouses_03_snow, 		"src/gfx/houses_old/wooden_townhouses_03/building.png") 			{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_wooden_townhouses_03 {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_wooden_townhouses_03 (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_wooden_townhouses_03_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_wooden_townhouses_03_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_wooden_townhouses_03,terrain_type) {
	TILETYPE_SNOW: sprlay_wooden_townhouses_03_snow;
	sprlay_wooden_townhouses_03;
}

switch (FEAT_HOUSES, SELF, switch_wooden_townhouses_03_con_check, 
	HouseOfficeGap() 				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
) {return;}	

item(FEAT_HOUSES, item_wooden_townhouses_03, 04, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_WOODEN_TOWNHOUSES);
		population: 				40;										// Agreed to JPS
		accepted_cargos: 			[[PASS, 4],[MAIL, 2],[GOOD, 4]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1700,1950];							// Agreed to JPS
		minimum_lifetime: 			2;										
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										TOWNZONE_INNER_SUBURB,		// 3
										//TOWNZONE_OUTER_SUBURB,	// 2
										TOWNZONE_OUTSKIRT			// 1
										//TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				0;
		
		}
	graphics {
		default: 					switch_wooden_townhouses_03;
		construction_check: 		switch_wooden_townhouses_03_con_check;
		cargo_production: 			func_produce(4,1);						// 
		//colour: 					rand_recolor_wooden_townhouses;
	}
}

// End wooden_townhouses_03
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/houses_old/wooden_townhouses_04.pnml" 1
// Begin wooden_townhouses_04

// Ground Sprites

// Leveraged from dense wooden

// Buildings
spriteset (spr_wooden_townhouses_04, 			"src/gfx/houses_old/wooden_townhouses_04/building.png")  			{template_house_80(1,1)}
spriteset (spr_wooden_townhouses_04_snow, 		"src/gfx/houses_old/wooden_townhouses_04/building.png") 			{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_wooden_townhouses_04 {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_wooden_townhouses_04 (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_wooden_townhouses_04_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_wooden_townhouses_04_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_wooden_townhouses_04,terrain_type) {
	TILETYPE_SNOW: sprlay_wooden_townhouses_04_snow;
	sprlay_wooden_townhouses_04;
}


switch (FEAT_HOUSES, SELF, switch_wooden_townhouses_04_con_check, 
	HouseOfficeGap()				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
) {return;}	

item(FEAT_HOUSES, item_wooden_townhouses_04, 08, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_WOODEN_TOWNHOUSES_TREE);
		population: 				40;										// Agreed to JPS
		accepted_cargos: 			[[PASS, 4],[MAIL, 2],[GOOD, 4]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1700,1950];							// Agreed to JPS
		minimum_lifetime: 			2;										
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										TOWNZONE_INNER_SUBURB,		// 3
										//TOWNZONE_OUTER_SUBURB,	// 2
										TOWNZONE_OUTSKIRT			// 1
										//TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				0;
		
		}
	graphics {
		default: 					switch_wooden_townhouses_04;
		construction_check: 		switch_wooden_townhouses_04_con_check;
		cargo_production: 			func_produce(4,1);						// 
		//colour: 					rand_recolor_wooden_townhouses;
	}
}

// End wooden_townhouses_04
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/houses_old/two_wooden_houses_01.pnml" 1
// Begin two_wooden_houses_01

// Buildings
spriteset (spr_two_wooden_houses_01a, 			"src/gfx/houses_old/two_wooden_houses_01/building_01a.png") 			{template_house_80(1,1)}
spriteset (spr_two_wooden_houses_01a_snow, 		"src/gfx/houses_old/two_wooden_houses_01/building_01a.png") 			{template_house_80(1,82)}

spriteset (spr_two_wooden_houses_01b, 			"src/gfx/houses_old/two_wooden_houses_01/building_01b.png") 			{template_house_80(1,1)}
spriteset (spr_two_wooden_houses_01b_snow, 		"src/gfx/houses_old/two_wooden_houses_01/building_01b.png") 			{template_house_80(1,82)}

spriteset (spr_two_wooden_houses_01c, 			"src/gfx/houses_old/two_wooden_houses_01/building_01c.png") 			{template_house_80(1,1)}
spriteset (spr_two_wooden_houses_01c_snow, 		"src/gfx/houses_old/two_wooden_houses_01/building_01c.png") 			{template_house_80(1,82)}

spriteset (spr_two_wooden_houses_01d, 			"src/gfx/houses_old/two_wooden_houses_01/building_01d.png") 			{template_house_80(1,1)}
spriteset (spr_two_wooden_houses_01d_snow, 		"src/gfx/houses_old/two_wooden_houses_01/building_01d.png") 			{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_two_wooden_houses_01a {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_01a (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_01a_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_01a_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_01b {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_01b (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_01b_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_01b_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_01c {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_01c (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_01c_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_01c_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_01d {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_01d (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_01d_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_01d_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}


// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_two_wooden_houses_01a,terrain_type) {
	TILETYPE_SNOW: sprlay_two_wooden_houses_01a_snow;
	sprlay_two_wooden_houses_01a;
}

switch(FEAT_HOUSES, SELF, switch_two_wooden_houses_01b,terrain_type) {
	TILETYPE_SNOW: sprlay_two_wooden_houses_01b_snow;
	sprlay_two_wooden_houses_01b;
}

switch(FEAT_HOUSES, SELF, switch_two_wooden_houses_01c,terrain_type) {
	TILETYPE_SNOW: sprlay_two_wooden_houses_01c_snow;
	sprlay_two_wooden_houses_01c;
}

switch(FEAT_HOUSES, SELF, switch_two_wooden_houses_01d,terrain_type) {
	TILETYPE_SNOW: sprlay_two_wooden_houses_01d_snow;
	sprlay_two_wooden_houses_01d;
}

// Random selection of sprites
random_switch (FEAT_HOUSES, SELF, switch_two_wooden_houses_01_sprites_SE) {
	1: switch_two_wooden_houses_01a;		// SE
	1: switch_two_wooden_houses_01b;		// SE
}

random_switch (FEAT_HOUSES, SELF, switch_two_wooden_houses_01_sprites_SW) {
	1: switch_two_wooden_houses_01c;		// SW
	1: switch_two_wooden_houses_01d;		// SW
}

random_switch (FEAT_HOUSES, SELF, switch_two_wooden_houses_01_sprites_SESW) {
	1: switch_two_wooden_houses_01a;		// SE
	1: switch_two_wooden_houses_01b;		// SE
	1: switch_two_wooden_houses_01c;		// SW
	1: switch_two_wooden_houses_01d;		// SW
}

switch (FEAT_HOUSES, SELF, switch_two_wooden_houses_01_sprites, SpriteDirections() ) {
	1: switch_two_wooden_houses_01_sprites_SE; 				// SE Only
	2: switch_two_wooden_houses_01_sprites_SW;				// SW Only
	3: switch_two_wooden_houses_01_sprites_SESW;			// SE or SW
	default: switch_two_wooden_houses_01_sprites_SESW;		// Otherwise
}

switch (FEAT_HOUSES, SELF, switch_two_wooden_houses_01_con_check, 
	HouseOfficeGap() &&				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
	HasRoadAdjacentSESW()			// Must have road to the SE or SW
) {return;}	

item(FEAT_HOUSES, item_two_wooden_houses_01, 14, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_TWO_WOODEN_TOWNHOUSES);
		population: 				30;										// Agreed to JPS
		accepted_cargos: 			[[PASS, 3],[MAIL, 1],[GOOD, 3]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				2;										// Increased since can only face SE or SW
		years_available: 			[1700,1950];							// Agreed to JPS
		minimum_lifetime: 			2;										
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										TOWNZONE_INNER_SUBURB,		// 3
										TOWNZONE_OUTER_SUBURB		// 2
										//TOWNZONE_OUTSKIRT,		// 1
										//TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				0;
		
		}
	graphics {
		default: 					switch_two_wooden_houses_01_sprites;
		construction_check: 		switch_two_wooden_houses_01_con_check;
		cargo_production: 			func_produce(2,1);						// 
		//colour: 					rand_recolor_wooden_townhouses;
	}
}

// End two_wooden_houses_01
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/houses_old/two_wooden_houses_02.pnml" 1
// Begin two_wooden_houses_02

// Buildings
spriteset (spr_two_wooden_houses_02a, 			"src/gfx/houses_old/two_wooden_houses_02/building_02a.png") 			{template_house_80(1,1)}
spriteset (spr_two_wooden_houses_02a_snow, 		"src/gfx/houses_old/two_wooden_houses_02/building_02a.png") 			{template_house_80(1,82)}

spriteset (spr_two_wooden_houses_02b, 			"src/gfx/houses_old/two_wooden_houses_02/building_02b.png") 			{template_house_80(1,1)}
spriteset (spr_two_wooden_houses_02b_snow, 		"src/gfx/houses_old/two_wooden_houses_02/building_02b.png") 			{template_house_80(1,82)}

spriteset (spr_two_wooden_houses_02c, 			"src/gfx/houses_old/two_wooden_houses_02/building_02c.png") 			{template_house_80(1,1)}
spriteset (spr_two_wooden_houses_02c_snow, 		"src/gfx/houses_old/two_wooden_houses_02/building_02c.png") 			{template_house_80(1,82)}

spriteset (spr_two_wooden_houses_02d, 			"src/gfx/houses_old/two_wooden_houses_02/building_02d.png") 			{template_house_80(1,1)}
spriteset (spr_two_wooden_houses_02d_snow, 		"src/gfx/houses_old/two_wooden_houses_02/building_02d.png") 			{template_house_80(1,82)}

spriteset (spr_two_wooden_houses_02e, 			"src/gfx/houses_old/two_wooden_houses_02/building_02e.png") 			{template_house_80(1,1)}
spriteset (spr_two_wooden_houses_02e_snow, 		"src/gfx/houses_old/two_wooden_houses_02/building_02e.png") 			{template_house_80(1,82)}

spriteset (spr_two_wooden_houses_02f, 			"src/gfx/houses_old/two_wooden_houses_02/building_02f.png") 			{template_house_80(1,1)}
spriteset (spr_two_wooden_houses_02f_snow, 		"src/gfx/houses_old/two_wooden_houses_02/building_02f.png") 			{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_two_wooden_houses_02a {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_02a (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_02a_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_02a_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_02b {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_02b (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_02b_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_02b_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_02c {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_02c (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_02c_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_02c_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_02d {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_02d (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_02d_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_02d_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_02e {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_02e (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_02e_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_02e_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_02f {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_02f (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_02f_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_02f_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_two_wooden_houses_02a,terrain_type) {
	TILETYPE_SNOW: sprlay_two_wooden_houses_02a_snow;
	sprlay_two_wooden_houses_02a;
}

switch(FEAT_HOUSES, SELF, switch_two_wooden_houses_02b,terrain_type) {
	TILETYPE_SNOW: sprlay_two_wooden_houses_02b_snow;
	sprlay_two_wooden_houses_02b;
}

switch(FEAT_HOUSES, SELF, switch_two_wooden_houses_02c,terrain_type) {
	TILETYPE_SNOW: sprlay_two_wooden_houses_02c_snow;
	sprlay_two_wooden_houses_02c;
}

switch(FEAT_HOUSES, SELF, switch_two_wooden_houses_02d,terrain_type) {
	TILETYPE_SNOW: sprlay_two_wooden_houses_02d_snow;
	sprlay_two_wooden_houses_02d;
}

switch(FEAT_HOUSES, SELF, switch_two_wooden_houses_02e,terrain_type) {
	TILETYPE_SNOW: sprlay_two_wooden_houses_02e_snow;
	sprlay_two_wooden_houses_02e;
}

switch(FEAT_HOUSES, SELF, switch_two_wooden_houses_02f,terrain_type) {
	TILETYPE_SNOW: sprlay_two_wooden_houses_02f_snow;
	sprlay_two_wooden_houses_02f;
}

// Random selection of sprites
random_switch (FEAT_HOUSES, SELF, switch_two_wooden_houses_02_sprites) {
	1: switch_two_wooden_houses_02a;
	1: switch_two_wooden_houses_02b;
	1: switch_two_wooden_houses_02c;
	1: switch_two_wooden_houses_02d;
	1: switch_two_wooden_houses_02e;
	1: switch_two_wooden_houses_02f;
}

switch (FEAT_HOUSES, SELF, switch_two_wooden_houses_02_con_check, 
	HouseOfficeGap() 			// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
) {return;}	

item(FEAT_HOUSES, item_two_wooden_houses_02, 15, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_TWO_WOODEN_TOWNHOUSES);
		population: 				30;										// Agreed to JPS
		accepted_cargos: 			[[PASS, 3],[MAIL, 1],[GOOD, 3]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1700,1950];							// Agreed to JPS
		minimum_lifetime: 			2;										
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										TOWNZONE_INNER_SUBURB,		// 3
										TOWNZONE_OUTER_SUBURB		// 2
										//TOWNZONE_OUTSKIRT,		// 1
										//TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				0;
		
		}
	graphics {
		default: 					switch_two_wooden_houses_02_sprites;
		construction_check: 		switch_two_wooden_houses_02_con_check;
		cargo_production: 			func_produce(2,1);						// 
		//colour: 					rand_recolor_wooden_townhouses;
	}
}

// End two_wooden_houses_02
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/houses_old/two_wooden_houses_03.pnml" 1
// Begin two_wooden_houses_03

// Buildings
spriteset (spr_two_wooden_houses_03a, 			"src/gfx/houses_old/two_wooden_houses_03/building_03a.png") 			{template_house_80(1,1)}
spriteset (spr_two_wooden_houses_03a_snow, 		"src/gfx/houses_old/two_wooden_houses_03/building_03a.png") 			{template_house_80(1,82)}

spriteset (spr_two_wooden_houses_03b, 			"src/gfx/houses_old/two_wooden_houses_03/building_03b.png") 			{template_house_80(1,1)}
spriteset (spr_two_wooden_houses_03b_snow, 		"src/gfx/houses_old/two_wooden_houses_03/building_03b.png") 			{template_house_80(1,82)}

spriteset (spr_two_wooden_houses_03c, 			"src/gfx/houses_old/two_wooden_houses_03/building_03c.png") 			{template_house_80(1,1)}
spriteset (spr_two_wooden_houses_03c_snow, 		"src/gfx/houses_old/two_wooden_houses_03/building_03c.png") 			{template_house_80(1,82)}

spriteset (spr_two_wooden_houses_03d, 			"src/gfx/houses_old/two_wooden_houses_03/building_03d.png") 			{template_house_80(1,1)}
spriteset (spr_two_wooden_houses_03d_snow, 		"src/gfx/houses_old/two_wooden_houses_03/building_03d.png") 			{template_house_80(1,82)}

spriteset (spr_two_wooden_houses_03e, 			"src/gfx/houses_old/two_wooden_houses_03/building_03e.png") 			{template_house_80(1,1)}
spriteset (spr_two_wooden_houses_03e_snow, 		"src/gfx/houses_old/two_wooden_houses_03/building_03e.png") 			{template_house_80(1,82)}

spriteset (spr_two_wooden_houses_03f, 			"src/gfx/houses_old/two_wooden_houses_03/building_03f.png") 			{template_house_80(1,1)}
spriteset (spr_two_wooden_houses_03f_snow, 		"src/gfx/houses_old/two_wooden_houses_03/building_03f.png") 			{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_two_wooden_houses_03a {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_03a (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_03a_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_03a_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_03b {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_03b (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_03b_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_03b_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_03c {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_03c (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_03c_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_03c_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_03d {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_03d (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_03d_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_03d_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_03e {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_03e (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_03e_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_03e_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_03f {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_03f (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_two_wooden_houses_03f_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_two_wooden_houses_03f_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_two_wooden_houses_03a,terrain_type) {
	TILETYPE_SNOW: sprlay_two_wooden_houses_03a_snow;
	sprlay_two_wooden_houses_03a;
}

switch(FEAT_HOUSES, SELF, switch_two_wooden_houses_03b,terrain_type) {
	TILETYPE_SNOW: sprlay_two_wooden_houses_03b_snow;
	sprlay_two_wooden_houses_03b;
}

switch(FEAT_HOUSES, SELF, switch_two_wooden_houses_03c,terrain_type) {
	TILETYPE_SNOW: sprlay_two_wooden_houses_03c_snow;
	sprlay_two_wooden_houses_03c;
}

switch(FEAT_HOUSES, SELF, switch_two_wooden_houses_03d,terrain_type) {
	TILETYPE_SNOW: sprlay_two_wooden_houses_03d_snow;
	sprlay_two_wooden_houses_03d;
}

switch(FEAT_HOUSES, SELF, switch_two_wooden_houses_03e,terrain_type) {
	TILETYPE_SNOW: sprlay_two_wooden_houses_03e_snow;
	sprlay_two_wooden_houses_03e;
}

switch(FEAT_HOUSES, SELF, switch_two_wooden_houses_03f,terrain_type) {
	TILETYPE_SNOW: sprlay_two_wooden_houses_03f_snow;
	sprlay_two_wooden_houses_03f;
}

// Random selection of sprites
random_switch (FEAT_HOUSES, SELF, switch_two_wooden_houses_03_sprites) {
	1: switch_two_wooden_houses_03a;
	1: switch_two_wooden_houses_03b;
	1: switch_two_wooden_houses_03c;
	1: switch_two_wooden_houses_03d;
	1: switch_two_wooden_houses_03e;
	1: switch_two_wooden_houses_03f;
}

switch (FEAT_HOUSES, SELF, switch_two_wooden_houses_03_con_check, 
	HouseOfficeGap() 			// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
) {return;}	

item(FEAT_HOUSES, item_two_wooden_houses_03, 16, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_TWO_WOODEN_TOWNHOUSES);
		population: 				30;										// Agreed to JPS
		accepted_cargos: 			[[PASS, 3],[MAIL, 1],[GOOD, 3]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1700,1950];							// Agreed to JPS
		minimum_lifetime: 			2;										
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										TOWNZONE_INNER_SUBURB,		// 3
										TOWNZONE_OUTER_SUBURB		// 2
										//TOWNZONE_OUTSKIRT,		// 1
										//TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				0;
		
		}
	graphics {
		default: 					switch_two_wooden_houses_03_sprites;
		construction_check: 		switch_two_wooden_houses_03_con_check;
		cargo_production: 			func_produce(2,1);						// 
		//colour: 					rand_recolor_wooden_townhouses;
	}
}

// End two_wooden_houses_03
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/houses_old/large_wooden_house_01.pnml" 1
// Begin large_wooden_house_01

// Buildings
spriteset (spr_large_wooden_house_01a, 			"src/gfx/houses_old/large_wooden_house_01/building_01a.png") 			{template_house_80(1,1)}
spriteset (spr_large_wooden_house_01a_snow, 	"src/gfx/houses_old/large_wooden_house_01/building_01a.png") 			{template_house_80(1,82)}

spriteset (spr_large_wooden_house_01b, 			"src/gfx/houses_old/large_wooden_house_01/building_01b.png") 			{template_house_80(1,1)}
spriteset (spr_large_wooden_house_01b_snow, 	"src/gfx/houses_old/large_wooden_house_01/building_01b.png") 			{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_large_wooden_house_01a {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_large_wooden_house_01a (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_large_wooden_house_01a_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_large_wooden_house_01a_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_large_wooden_house_01b {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_large_wooden_house_01b (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_large_wooden_house_01b_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_large_wooden_house_01b_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_large_wooden_house_01a,terrain_type) {
	TILETYPE_SNOW: sprlay_large_wooden_house_01a_snow;
	sprlay_large_wooden_house_01a;
}

switch(FEAT_HOUSES, SELF, switch_large_wooden_house_01b,terrain_type) {
	TILETYPE_SNOW: sprlay_large_wooden_house_01b_snow;
	sprlay_large_wooden_house_01b;
}


// Random selection of sprites
random_switch (FEAT_HOUSES, SELF, switch_large_wooden_house_01_sprites) {
	1: switch_large_wooden_house_01a;		
	1: switch_large_wooden_house_01b;		
}

switch (FEAT_HOUSES, SELF, switch_large_wooden_house_01_con_check, 
	HouseOfficeGap() 				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
) {return;}	

item(FEAT_HOUSES, item_large_wooden_house_01, 23, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_LARGE_WOODEN_HOUSE);
		population: 				30;										// Agreed to JPS
		accepted_cargos: 			[[PASS, 3],[MAIL, 1],[GOOD, 3]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				2;										// Increased since can only face SE or SW
		years_available: 			[1700,1950];							// Agreed to JPS
		minimum_lifetime: 			2;										
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										//TOWNZONE_INNER_SUBURB,	// 3
										//TOWNZONE_OUTER_SUBURB		// 2
										TOWNZONE_OUTSKIRT,			// 1
										TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				0;
		
		}
	graphics {
		default: 					switch_large_wooden_house_01_sprites;
		construction_check: 		switch_large_wooden_house_01_con_check;
		cargo_production: 			func_produce(1,1);						// 
		//colour: 					rand_recolor_wooden_townhouses;
	}
}

// End large_wooden_house_01
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/houses_old/large_wooden_house_02.pnml" 1
// Begin large_wooden_house_02

// Buildings
spriteset (spr_large_wooden_house_02a, 			"src/gfx/houses_old/large_wooden_house_02/building_a.png") 			{template_house_80(1,1)}
spriteset (spr_large_wooden_house_02a_snow, 	"src/gfx/houses_old/large_wooden_house_02/building_a.png") 			{template_house_80(1,82)}

spriteset (spr_large_wooden_house_02b, 			"src/gfx/houses_old/large_wooden_house_02/building_b.png") 			{template_house_80(1,1)}
spriteset (spr_large_wooden_house_02b_snow, 	"src/gfx/houses_old/large_wooden_house_02/building_b.png") 			{template_house_80(1,82)}

spriteset (spr_large_wooden_house_02c, 			"src/gfx/houses_old/large_wooden_house_02/building_c.png") 			{template_house_80(1,1)}
spriteset (spr_large_wooden_house_02c_snow, 	"src/gfx/houses_old/large_wooden_house_02/building_c.png") 			{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_large_wooden_house_02a {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_large_wooden_house_02a (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_large_wooden_house_02a_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_large_wooden_house_02a_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_large_wooden_house_02b {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_large_wooden_house_02b (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_large_wooden_house_02b_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_large_wooden_house_02b_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_large_wooden_house_02c {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_large_wooden_house_02c (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_large_wooden_house_02c_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_large_wooden_house_02c_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_large_wooden_house_02a,terrain_type) {
	TILETYPE_SNOW: sprlay_large_wooden_house_02a_snow;
	sprlay_large_wooden_house_02a;
}

switch(FEAT_HOUSES, SELF, switch_large_wooden_house_02b,terrain_type) {
	TILETYPE_SNOW: sprlay_large_wooden_house_02b_snow;
	sprlay_large_wooden_house_02b;
}

switch(FEAT_HOUSES, SELF, switch_large_wooden_house_02c,terrain_type) {
	TILETYPE_SNOW: sprlay_large_wooden_house_02c_snow;
	sprlay_large_wooden_house_02c;
}

// Random selection of sprites
random_switch (FEAT_HOUSES, SELF, switch_large_wooden_house_02_sprites_SESW) {
	1: switch_large_wooden_house_02a;						// SE
	1: switch_large_wooden_house_02c;						// SW
}

switch (FEAT_HOUSES, SELF, switch_large_wooden_house_02_sprites, SpriteDirections() ) {
	1: switch_large_wooden_house_02a; 						// SE Only
	2: switch_large_wooden_house_02c;						// SW Only
	3: switch_large_wooden_house_02_sprites_SESW;			// SE or SW
	default: switch_large_wooden_house_02b;					// Otherwise
}

switch (FEAT_HOUSES, SELF, switch_large_wooden_house_02_con_check, 
	HouseOfficeGap()				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
) {return;}	

item(FEAT_HOUSES, item_large_wooden_house_02, 24, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_LARGE_WOODEN_HOUSE);
		population: 				20;										// Agreed to JPS
		accepted_cargos: 			[[PASS, 2],[MAIL, 1],[GOOD, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;										// Increased since can only face SE or SW
		years_available: 			[1700,1950];							// Agreed to JPS
		minimum_lifetime: 			2;										
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										//TOWNZONE_INNER_SUBURB,	// 3
										//TOWNZONE_OUTER_SUBURB		// 2
										TOWNZONE_OUTSKIRT,			// 1
										TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				0;
		
		}
	graphics {
		default: 					switch_large_wooden_house_02_sprites;
		construction_check: 		switch_large_wooden_house_02_con_check;
		cargo_production: 			func_produce(2,1);						// 
		//colour: 					rand_recolor_wooden_townhouses;
	}
}

// End large_wooden_house_02
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/houses_old/large_wooden_farmhouse_01.pnml" 1
// Begin large_wooden_farmhouse_01

// Buildings
spriteset (spr_large_wooden_farmhouse_01a, 				"src/gfx/houses_old/large_wooden_farmhouse_01/building_a.png") 			{template_house_80(1,1)}
spriteset (spr_large_wooden_farmhouse_01a_snow, 		"src/gfx/houses_old/large_wooden_farmhouse_01/building_a.png") 			{template_house_80(1,82)}

spriteset (spr_large_wooden_farmhouse_01b, 				"src/gfx/houses_old/large_wooden_farmhouse_01/building_b.png") 			{template_house_80(1,1)}
spriteset (spr_large_wooden_farmhouse_01b_snow, 		"src/gfx/houses_old/large_wooden_farmhouse_01/building_b.png") 			{template_house_80(1,82)}

spriteset (spr_large_wooden_farmhouse_01c, 				"src/gfx/houses_old/large_wooden_farmhouse_01/building_c.png") 			{template_house_80(1,1)}
spriteset (spr_large_wooden_farmhouse_01c_snow, 		"src/gfx/houses_old/large_wooden_farmhouse_01/building_c.png") 			{template_house_80(1,82)}

spriteset (spr_large_wooden_farmhouse_01d, 				"src/gfx/houses_old/large_wooden_farmhouse_01/building_d.png") 			{template_house_80(1,1)}
spriteset (spr_large_wooden_farmhouse_01d_snow, 		"src/gfx/houses_old/large_wooden_farmhouse_01/building_d.png") 			{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_large_wooden_farmhouse_01a {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_large_wooden_farmhouse_01a (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_large_wooden_farmhouse_01a_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_large_wooden_farmhouse_01a_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_large_wooden_farmhouse_01b {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_large_wooden_farmhouse_01b (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_large_wooden_farmhouse_01b_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_large_wooden_farmhouse_01b_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_large_wooden_farmhouse_01c {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_large_wooden_farmhouse_01c (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_large_wooden_farmhouse_01c_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_large_wooden_farmhouse_01c_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_large_wooden_farmhouse_01d {
	ground {
		sprite: spr_ground_grass (construction_state);
	}
	building {
		sprite: spr_large_wooden_farmhouse_01d (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_large_wooden_farmhouse_01d_snow {
	ground {
		sprite: spr_ground_snow (construction_state);
	}
	building {
		sprite: spr_large_wooden_farmhouse_01d_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}


// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_large_wooden_farmhouse_01a,terrain_type) {
	TILETYPE_SNOW: sprlay_large_wooden_farmhouse_01a_snow;
	sprlay_large_wooden_farmhouse_01a;
}

switch(FEAT_HOUSES, SELF, switch_large_wooden_farmhouse_01b,terrain_type) {
	TILETYPE_SNOW: sprlay_large_wooden_farmhouse_01b_snow;
	sprlay_large_wooden_farmhouse_01b;
}

switch(FEAT_HOUSES, SELF, switch_large_wooden_farmhouse_01c,terrain_type) {
	TILETYPE_SNOW: sprlay_large_wooden_farmhouse_01c_snow;
	sprlay_large_wooden_farmhouse_01c;
}

switch(FEAT_HOUSES, SELF, switch_large_wooden_farmhouse_01d,terrain_type) {
	TILETYPE_SNOW: sprlay_large_wooden_farmhouse_01d_snow;
	sprlay_large_wooden_farmhouse_01d;
}

// Selection of sprites
random_switch (FEAT_HOUSES, SELF, switch_large_wooden_farmhouse_01_sprites_any) {
	1: switch_large_wooden_farmhouse_01b;		// Any
	1: switch_large_wooden_farmhouse_01d;		// Any
}

random_switch (FEAT_HOUSES, SELF, switch_large_wooden_farmhouse_01_sprites_SESW) {
	1: switch_large_wooden_farmhouse_01a;		// SE
	1: switch_large_wooden_farmhouse_01c;		// SW
}

switch (FEAT_HOUSES, SELF, switch_large_wooden_farmhouse_01_sprites, SpriteDirections() ) {
	1: switch_large_wooden_farmhouse_01a; 
	2: switch_large_wooden_farmhouse_01c;
	3: switch_large_wooden_farmhouse_01_sprites_SESW;
	default: switch_large_wooden_farmhouse_01_sprites_any;
}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_large_wooden_farmhouse_01_con_check, 
	HouseOfficeGap() 			// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
) {return;}	

item(FEAT_HOUSES, item_large_wooden_farmhouse_01, 25, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_LARGE_WOODEN_FARMHOUSE);
		population: 				30;										// Agreed to JPS
		accepted_cargos: 			[[PASS, 3],[MAIL, 1],[GOOD, 3]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1700,1950];							// Agreed to JPS
		minimum_lifetime: 			2;										
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										//TOWNZONE_INNER_SUBURB,	// 3
										//TOWNZONE_OUTER_SUBURB		// 2
										TOWNZONE_OUTSKIRT,			// 1
										TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				0;
		
		}
	graphics {
		default: 					switch_large_wooden_farmhouse_01_sprites;
		construction_check: 		switch_large_wooden_farmhouse_01_con_check;
		cargo_production: 			func_produce(1,1);						// 
		//colour: 					rand_recolor_wooden_townhouses;
	}
}

// End large_wooden_farmhouse_01
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/houses_old/old_villa_01.pnml" 1
// Begin old_villa_01

// Buildings
spriteset (spr_old_villa_01, 				"src/gfx/houses_old/old_villa_01/building.png") 			{template_house_80(1,1)}
spriteset (spr_old_villa_01_snow, 			"src/gfx/houses_old/old_villa_01/building.png") 			{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_old_villa_01 {
	ground {
		sprite: spr_ground_grass (3);
	}
	building {
		sprite: spr_old_villa_01 (3);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_old_villa_01_snow {
	ground {
		sprite: spr_ground_snow (3);
	}
	building {
		sprite: spr_old_villa_01_snow (3);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}




// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_old_villa_01_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_old_villa_01_snow;
	sprlay_old_villa_01;
}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_old_villa_01_con_check, 
	HouseOfficeGap() 			// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
) {return;}	

item(FEAT_HOUSES, item_old_villa_01, 117, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_OLD_VILLA_01);
		population: 				12;										// Agreed to JPS
		accepted_cargos: 			[[PASS, 2],[MAIL, 1],[FOOD, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[0,0xFFFF];							// Agreed to JPS
		minimum_lifetime: 			2;										
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										//TOWNZONE_INNER_SUBURB,	// 3
										//TOWNZONE_OUTER_SUBURB		// 2
										//TOWNZONE_OUTSKIRT,		// 1
										TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				0;
		
		}
	graphics {
		default: 					switch_old_villa_01_sprites;
		construction_check: 		switch_old_villa_01_con_check;
		cargo_production: 			func_produce(1,1);						// 
		//colour: 					rand_recolor_wooden_townhouses;
	}
}

// End old_villa_01
# 1 "JPplusBuildings.pnml" 4

// SMALL APARTMENTS
# 1 "src/houses/small_apartments/small_apartments_01.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/small_apartments/small_apartments_02.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/small_apartments/small_apartments_03.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/small_apartments/small_apartments_04.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/small_apartments/small_apartments_05.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/small_apartments/small_apartments_06.pnml" 1
# 1 "JPplusBuildings.pnml" 4

// APARTMENTS
# 1 "src/houses/apartments/apartments_01.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/apartments/apartments_02.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/apartments/apartments_03.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/apartments/apartments_04.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/apartments/apartments_05.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/apartments/apartments_06.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/apartments/apartments_07.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/apartments/apartments_08.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/apartments/apartments_09.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/apartments/apartments_10.pnml" 1
# 1 "JPplusBuildings.pnml" 4

// SHOPS AND OFFICES

// SHOPS
# 1 "src/houses/shops/convini_01.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/shops/onsen_01.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/shops/shotengai_01.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/shops/shops_01.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/shops/shops_02.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/shops/shops_03.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/shops/shops_04.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/shops/petrol_station_01.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/shops/petrol_station_02.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/shops/petrol_station_03.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/shops/restaurant_01.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/shops/restaurant_02.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/shops/shops_small_01.pnml" 1
# 1 "JPplusBuildings.pnml" 4

// OFFICES
# 1 "src/houses/offices/offices_01.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/offices/aoyama_office.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/offices/offices_03.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/offices/offices_04.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/offices/offices_05.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/offices/obuilding.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/offices/xbuilding.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/offices/offices_08.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/offices/offices_09.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/offices/offices_10.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/offices/offices_11.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/offices/offices_12.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/offices/hotel_01.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/offices/hotel_02.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/offices/hotel_03.pnml" 1
# 1 "JPplusBuildings.pnml" 4

// SKYSCRAPERS
# 1 "src/houses/skyscrapers/skyscraper_01.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/skyscrapers/skyscraper_02.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/skyscrapers/skyscraper_03.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/skyscrapers/skyscraper_04.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/skyscrapers/skyscraper_05.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/skyscrapers/skyscraper_06.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/skyscrapers/skyscraper_07.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/skyscrapers/skyscraper_08.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/skyscrapers/skyscraper_09.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/skyscrapers/skyscraper_10.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/skyscrapers/skyscraper_11.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/skyscrapers/skyscraper_12.pnml" 1
# 1 "JPplusBuildings.pnml" 4

// LANDMARKS
# 1 "src/houses/landmarks/fire_station_01.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/landmarks/police_station_01.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/landmarks/temple_01.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/landmarks/temple_02.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/landmarks/shiro_01.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/landmarks/stadium_01.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/landmarks/hospital_01.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/landmarks/shrine_01.pnml" 1
# 1 "JPplusBuildings.pnml" 4
# 1 "src/houses/landmarks/shrine_02.pnml" 1
# 1 "JPplusBuildings.pnml" 4

// RURAL
# 1 "src/houses/rural/farm_01.pnml" 1
# 1 "JPplusBuildings.pnml" 4
