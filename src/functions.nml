
/* Begin Functions */

switch(FEAT_HOUSES, SELF, func_pass_service, (cargo_accepted_nearby_last_month(PASS) == 1 || cargo_accepted_nearby_this_month(PASS) == 1)) {return;}

switch(FEAT_HOUSES, SELF, func_population_adder, 
	(other_house_count_town(25)*1)+ 	// Cottages
	(other_house_count_town(24)*1)+ 	// Old houses
	(other_house_count_town(108)*2)+ 	// Pre-1945 Houses
	(other_house_count_town(26)*2)+ 	// Naganuma House
	(other_house_count_town(65)*2)+ 	// Nishikawa House
	(other_house_count_town(109)*3)+ 	// Pre-1945 Townhouses

	/* Town Houses */
	(other_house_count_town(05)*3)+ 	// Townhouses_02
	(other_house_count_town(06)*3)+ 	// Townhouses_01
	
	/* Apartments */		
	(other_house_count_town(27)*10)+ 	// Apartments_01
	(other_house_count_town(30)*10)+ 	// Apartments_02
	(other_house_count_town(56)*10)+ 	// Apartments_04	

	/* Small Apartments */
	(other_house_count_town(02)*4)+ 	// Small Apartments 01
	(other_house_count_town(44)*4)+ 	// Small Apartments 02
	(other_house_count_town(45)*4) 		// Small Apartments 03
	) {return;}


switch (FEAT_HOUSES, SELF, HasRoadAdjacentSW, nearby_tile_class(1,0) == TILE_CLASS_ROAD || nearby_tile_class(1,0) == TILE_CLASS_STATION) {return;}
switch (FEAT_HOUSES, SELF, HasRoadAdjacentSE, nearby_tile_class(0,1) == TILE_CLASS_ROAD || nearby_tile_class(0,1) == TILE_CLASS_STATION) {return;}
switch (FEAT_HOUSES, SELF, HasRoadAdjacentNW, nearby_tile_class(0,-1) == TILE_CLASS_ROAD || nearby_tile_class(0,-1) == TILE_CLASS_STATION) {return;}

/* Land value helper functions */

/* Note: Per NML specs, returns 256+X (X = 0..255) if the house has been defined by this NewGRF with building_class X */
/*
switch (FEAT_HOUSES, SELF, IsTileHouseClass, x, y, class_num, nearby_tile_house_class(x,y) == 256 + class_num) {return;}

switch (FEAT_HOUSES, SELF, IsAdjacentToHouseClass, class_num,
	IsTileHouseClass(1,0, class_num) ||
	IsTileHouseClass(1,1, class_num) ||
	IsTileHouseClass(1,-1, class_num) ||
	IsTileHouseClass(0,1, class_num) ||
	IsTileHouseClass(0,-1, class_num) ||
	IsTileHouseClass(-1,0, class_num) ||
	IsTileHouseClass(-1,1, class_num) ||
	IsTileHouseClass(-1,-1, class_num) )
	{return;}

switch (FEAT_HOUSES, PARENT, IsCity, is_city == 1) {return;}

/* Note: Check population is inaccurate when generating towns. This will only work properly when growing towns in-game. */
/*
switch (FEAT_HOUSES, PARENT, HasPopulation, required, population >= required) {return;}

switch (FEAT_HOUSES, SELF, HasRoadAdjacentSW, nearby_tile_class(1,0) == TILE_CLASS_ROAD || nearby_tile_class(1,0) == TILE_CLASS_STATION) {return;}
switch (FEAT_HOUSES, SELF, HasRoadAdjacentNE, nearby_tile_class(-1,0) == TILE_CLASS_ROAD || nearby_tile_class(-1,0) == TILE_CLASS_STATION) {return;}
switch (FEAT_HOUSES, SELF, HasRoadAdjacentSE, nearby_tile_class(0,1) == TILE_CLASS_ROAD || nearby_tile_class(0,1) == TILE_CLASS_STATION) {return;}
switch (FEAT_HOUSES, SELF, HasRoadAdjacentNW, nearby_tile_class(0,-1) == TILE_CLASS_ROAD || nearby_tile_class(0,-1) == TILE_CLASS_STATION) {return;}

switch (FEAT_HOUSES, SELF, IsUniqueHouse, same_house_count_town == 0) {return;}
switch (FEAT_HOUSES, SELF, IsUniqueInRadius, radius, nearest_house_matching_criterion(radius, SEARCH_HOUSE_BY_TYPE) == 0) {return;}

switch (FEAT_HOUSES, SELF, HasSameClassNearby, radius, nearest_house_matching_criterion(radius, SEARCH_HOUSE_BY_CLASS) ) {0: return 0; return 1;}

switch (FEAT_HOUSES, SELF, IsFirstHouseOfClass, same_class_count_town == 0) {return;}
*/
/* End Functions */
