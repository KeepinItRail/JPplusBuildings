/* Begin Population Checks */

// Residential Height Thresholds
switch (FEAT_HOUSES, PARENT, PopOver5L6LResidentialThreshold,  population >= param_residential_threshold_5L6L)  {return;}
switch (FEAT_HOUSES, PARENT, PopOver7L8LResidentialThreshold,  population >= param_residential_threshold_7L8L)  {return;}
switch (FEAT_HOUSES, PARENT, PopOver9L10LResidentialThreshold, population >= param_residential_threshold_9L10L) {return;}

switch (FEAT_HOUSES, PARENT, PopOver7L8LCommercialThreshold,   population >= param_commercial_threshold_7L8L)   {return;}
switch (FEAT_HOUSES, PARENT, PopOver9L10LCommercialThreshold,  population >= param_commercial_threshold_9L10L)  {return;}
switch (FEAT_HOUSES, PARENT, PopOver11L12LCommercialThreshold, population >= param_commercial_threshold_11L12L) {return;}
switch (FEAT_HOUSES, PARENT, PopOver13L14LCommercialThreshold, population >= param_commercial_threshold_13L14L) {return;}
switch (FEAT_HOUSES, PARENT, PopOver15L16LCommercialThreshold, population >= param_commercial_threshold_15L16L) {return;}

/* 	
	- Purpose is for use in Construction Checks of Shops & Offices (Class 2) to only allow their construction when there is a certain 'level' of Residential
	- Larger weightings are given to 'denser' Residential
	- The Residential factor must be greater than the Class of the building using this function
*/

/* CLASS 2 */

switch (FEAT_HOUSES, SELF, Class2PopCheck, 
	(
		((1 + same_class_count_town) * 60) 
	)
	
	< 

	(
		(other_class_count_town(00) * 2)	+	// Houses
		(other_class_count_town(01) * 3)	+	// Townhouses
		(other_class_count_town(04) * 10)		// Apartments
	)

) {return;}

/* CLASS 5 */

switch (FEAT_HOUSES, SELF, Class5PopCheck, 
	(
		((1 + same_class_count_town) * 50)	+ 
		(other_class_count_town(02) * 60)		// Shops and Offices
	)
	
	< 

	(
		(other_class_count_town(00) * 2)	+	// Houses
		(other_class_count_town(01) * 3)	+	// Townhouses
		(other_class_count_town(03) * 5)	+	// Small Apartments
		(other_class_count_town(04) * 10)		// Apartments
	)

) {return;}


/* End Population Checks */
