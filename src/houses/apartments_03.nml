// Begin apartments_03

// Building Sprites
spriteset (spr_apartments_03, 							"src/gfx/apartments/apartments_03/building.png") 						{template_house_80_1dir(1,1)}
spriteset (spr_apartments_03_snow, 						"src/gfx/apartments/apartments_03/building.png") 						{template_house_80_1dir(1,82)}

// Construction
//spriteset (spr_apartments_03_con2, 							"src/gfx/small_apartments/apartments_03/building.png") 						{template_house_1dir(66,1)}
//spriteset (spr_apartments_03_con1, 							"src/gfx/small_apartments/apartments_03/building.png") 						{template_house_1dir(131,1)}
//spriteset (spr_apartments_03_con0, 							"src/gfx/small_apartments/apartments_03/building.png") 						{template_house_1dir(192,1)}

// Ground Tiles
spriteset (spr_apartments_03_ground, 					"src/gfx/apartments/apartments_03/ground.png") 						{template_house_80_1dir(1,1)}
spriteset (spr_apartments_03_ground_snow, 				"src/gfx/apartments/apartments_03/ground.png") 						{template_house_80_1dir(1,82)}

spritelayout sprlay_apartments_03_norm {
	ground {
		sprite: spr_apartments_03_ground(LOAD_TEMP(1));
	}
	building {
		sprite: spr_apartments_03(LOAD_TEMP(1));
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_apartments_03_snow {
	ground {
		sprite: spr_apartments_03_ground_snow(LOAD_TEMP(1));
	}
	building {
		sprite: spr_apartments_03_snow(LOAD_TEMP(1));
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

switch (FEAT_HOUSES, SELF, switch_apartments_03_sprites, [ 
 	// Check for snow and set the groundsprite in temporary variable 0
 	STORE_TEMP(GROUNDSPRITE_NORMAL, 0),
 	STORE_TEMP(terrain_type == TILETYPE_SNOW ? GROUNDSPRITE_SNOW : LOAD_TEMP(0), 0),
	// Check the rotation of the house
	STORE_TEMP(switch_road_adjacency(), 1),
	terrain_type == TILETYPE_SNOW])
	{1: sprlay_apartments_03_snow; sprlay_apartments_03_norm;}

item(FEAT_HOUSES, item_apartments_03, 36, HOUSE_SIZE_1X1){
	property {
		substitute: 27;
		name: TTD_STR_TOWN_BUILDING_NAME_HOUSES_1;
		population: 30;
		accepted_cargos: [[PASS, 4],[MAIL, 2]];
		local_authority_impact: 80;
		removal_cost_multiplier: 80;
		probability: 1;
		years_available: [1945,0xFFFF];
		minimum_lifetime: 5;
		availability_mask: [ALL_TOWNZONES, ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];		
		}
	graphics {
		default: switch_apartments_03_sprites;
		construction_check: (cargo_accepted_nearby_last_month(PASS) == 1 || cargo_accepted_nearby_this_month(PASS) == 1) ? 1 : 0; 	
			// Only build within the catchment area of a station which received passengers this month or last month
		cargo_production: func_produce(13,4,2);
		colour: rand_switch_recolor_r1;
	}
}

// End apartments_03
