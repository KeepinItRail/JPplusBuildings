// Begin boom_3L4L

// Random selection of sprites
random_switch (FEAT_HOUSES, SELF, switch_boom_3L4L_sprites) {
	1: switch_hayashi_3L_snow;
	1: switch_hayashi_4L_snow;
	10: switch_hirano_3L_snow;
	10: switch_hirano_4L_snow;
	1: switch_hirata_3L_snow;
	1: switch_hirata_4L_snow;
	1: switch_kimura_3L_snow;
	1: switch_kimura_4L_snow;
	10: switch_mori_3L_snow;
	10: switch_mori_4L_snow;
	1: switch_murakami_3L_snow;
	1: switch_murakami_4L_snow;
	10: switch_nakamura_3L_snow;
	10: switch_nakamura_4L_snow;
}

random_switch (FEAT_HOUSES, SELF, switch_boom_3L4L_name) {
	dependent: switch_boom_3L4L_sprites;
	1: string(STR_CONCAT_3, string(NAME_APARTMENTS_HAYASHI),string(PERIOD_BOOM),string(L3));
	1: string(STR_CONCAT_3, string(NAME_APARTMENTS_HAYASHI),string(PERIOD_BOOM),string(L4));
	10: string(STR_CONCAT_3, string(NAME_APARTMENTS_HIRANO),string(PERIOD_BOOM),string(L3));
	10: string(STR_CONCAT_3, string(NAME_APARTMENTS_HIRANO),string(PERIOD_BOOM),string(L4));
	1: string(STR_CONCAT_3, string(NAME_APARTMENTS_HIRATA),string(PERIOD_BOOM),string(L3));
	1: string(STR_CONCAT_3, string(NAME_APARTMENTS_HIRATA),string(PERIOD_BOOM),string(L4));
	1: string(STR_CONCAT_3, string(NAME_APARTMENTS_KIMURA),string(PERIOD_BOOM),string(L3));
	1: string(STR_CONCAT_3, string(NAME_APARTMENTS_KIMURA),string(PERIOD_BOOM),string(L4));
	10: string(STR_CONCAT_3, string(NAME_APARTMENTS_MORI),string(PERIOD_BOOM),string(L3));
	10: string(STR_CONCAT_3, string(NAME_APARTMENTS_MORI),string(PERIOD_BOOM),string(L4));
	1: string(STR_CONCAT_3, string(NAME_APARTMENTS_MURAKAMI),string(PERIOD_BOOM),string(L3));
	1: string(STR_CONCAT_3, string(NAME_APARTMENTS_MURAKAMI),string(PERIOD_BOOM),string(L4));
	10: string(STR_CONCAT_3, string(NAME_APARTMENTS_NAKAMURA),string(PERIOD_BOOM),string(L3));
	10: string(STR_CONCAT_3, string(NAME_APARTMENTS_NAKAMURA),string(PERIOD_BOOM),string(L4));
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, switch_boom_3L4L_colors){
	dependent: switch_boom_3L4L_sprites;		
	1: switch_hayashi_colors;
	1: switch_hayashi_colors;
	10: switch_hirano_colors;
	10: switch_hirano_colors;
	1: switch_hirata_colors;
	1: switch_hirata_colors;
	1: switch_kimura_colors;
	1: switch_kimura_colors;
	10: switch_mori_colors;
	10: switch_mori_colors;
	1: switch_murakami_colors;
	1: switch_murakami_colors;
	10: switch_nakamura_colors;
	10: switch_nakamura_colors;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_boom_3L4L_con_check, 	
	(FuncServicePASS() &&															// PASS Service AND
		(!PopOver7L8LResidentialThreshold() ||										// Not Above Threshold OR
			(PopOver7L8LResidentialThreshold() && 									// Above Threshold AND
				(!WideRoads() || 
					(WideRoads() && (town_zone == TOWNZONE_EDGE || town_zone == TOWNZONE_OUTSKIRT)) )	// Either not on Wide Roads OR on Wide Road in EDGE
			) 
		) 
	) 
	|| 
	(!FuncServicePASS() && 															// NO PASS Service AND
		(PopOver7L8LResidentialThreshold() && town_zone == TOWNZONE_CENTRE)			// Above threshold AND in CENTRE
	)
) {return;}	

item(FEAT_HOUSES, item_boom_3L4L){
	property {
		substitute: 				27;
		name: 						string(NAME_APARTMENTS_HARADA);
		population: 				75;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				3;
		years_available: 			[1960,1979];
		minimum_lifetime: 			5;
		availability_mask: 			[ALL_TOWNZONES, ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
		building_class:				4;		
		}
	graphics {
		name:						switch_boom_3L4L_name;
		default: 					switch_boom_3L4L_sprites;
		construction_check: 		switch_boom_3L4L_con_check;
		cargo_production: 			func_produce(6,2);
		colour: 					switch_boom_3L4L_colors;
	}
}

// End boom_3L4L
