
#include "src/houses/skyscrapers/office_tower/gfx/office_tower_sprites.pnml"
#include "src/houses/skyscrapers/office_tower/levels/L.pnml"
#include "src/houses/skyscrapers/office_tower/switches/combined_rs.pnml"

// Construction Check
switch (FEAT_HOUSES, SELF, switch_office_tower_con_check, 
	FuncServicePASS() &&					// Must have passenger service
	IsUniqueHouse() &&						// Only one in city
	NoProhibitionShrine() &&				// No Prohibition shrine to block construction
	SkyscraperRoads() &&					// If parameter enabled, must built on wide roads
	PopOver11L12LThreshold() &&				// Population of city check
	(!TileGapByClass(3) ||					// There is another skyscraper within n tiles
	IfFirstSkyscraper() )					// OR it's the first skyscraper
) {return;}	

item(FEAT_HOUSES, item_office_tower){
	property {
		substitute: 				4; 													
		name: 						string(NAME_OFFICE_TOWER);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED,HOUSE_FLAG_PROTECTED);
		population: 				220;
		accepted_cargos: 			[[PASS, 8],[MAIL, 8],[GOOD, 8]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[2000,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class:				5;	
		}
	graphics {
		default: 					switch_office_tower_snow;
		construction_check:			switch_office_tower_con_check;
		cargo_production: 			func_produce(24,10);
	}
}

// End office_tower
