/* *** Begin Header *** */

/*
*	Welcome to JPplusBuildings!
*/

grf {
	grfid: "KR04";
	name: string(STR_GRF_NAME);
	desc: string(STR_GRF_DESC);
	version: 1;
	min_compatible_version: 1;
	url: string(STR_WEBSITE);
}

cargotable {
	PASS, MAIL, GOOD, FOOD, BEER, COAL, WOOD, RCYC, WSTE, WATR, VEHI,
	
	/* IOTC industrial cargos */
	SGCN, TBCO, OIL_, NKOR, MOLS, RFPR, FUEL, PIPE, ENSP
}

if (version_openttd(1,10,0,28004) > openttd_version) {
	error(FATAL, string(STR_ERROR_GAME_VERSION));
}

disable_item(FEAT_HOUSES);

/* Use sidewalks on desert roads, as in Temperate. */
desert_paved_roads = 1;

/* *** End Header *** */


/* Begin Functions */

switch(FEAT_HOUSES, SELF, func_pass_service, (cargo_accepted_nearby_last_month(PASS) == 1 || cargo_accepted_nearby_this_month(PASS) == 1)) {return;}

switch(FEAT_HOUSES, SELF, func_population_adder, 
	(other_house_count_town(25)*1)+ 	// Cottages
	(other_house_count_town(24)*1)+ 	// Old houses
	(other_house_count_town(108)*2)+ 	// Pre-1945 Houses
	(other_house_count_town(26)*2)+ 	// Naganuma House
	(other_house_count_town(65)*2)+ 	// Nishikawa House
	(other_house_count_town(109)*3)+ 	// Pre-1945 Townhouses

	/* Town Houses */
	(other_house_count_town(05)*3)+ 	// Townhouses_02
	(other_house_count_town(06)*3)+ 	// Townhouses_01
	
	/* Apartments */		
	(other_house_count_town(27)*10)+ 	// Apartments_01
	(other_house_count_town(30)*10)+ 	// Apartments_02
	(other_house_count_town(56)*10)+ 	// Apartments_04	

	/* Small Apartments */
	(other_house_count_town(02)*4)+ 	// Small Apartments 01
	(other_house_count_town(44)*4)+ 	// Small Apartments 02
	(other_house_count_town(45)*4) 		// Small Apartments 03
	) {return;}


switch (FEAT_HOUSES, SELF, HasRoadAdjacentSW, nearby_tile_class(1,0) == TILE_CLASS_ROAD || nearby_tile_class(1,0) == TILE_CLASS_STATION) {return;}
switch (FEAT_HOUSES, SELF, HasRoadAdjacentSE, nearby_tile_class(0,1) == TILE_CLASS_ROAD || nearby_tile_class(0,1) == TILE_CLASS_STATION) {return;}
switch (FEAT_HOUSES, SELF, HasRoadAdjacentNW, nearby_tile_class(0,-1) == TILE_CLASS_ROAD || nearby_tile_class(0,-1) == TILE_CLASS_STATION) {return;}

/* Land value helper functions */

/* Note: Per NML specs, returns 256+X (X = 0..255) if the house has been defined by this NewGRF with building_class X */
/*
switch (FEAT_HOUSES, SELF, IsTileHouseClass, x, y, class_num, nearby_tile_house_class(x,y) == 256 + class_num) {return;}

switch (FEAT_HOUSES, SELF, IsAdjacentToHouseClass, class_num,
	IsTileHouseClass(1,0, class_num) ||
	IsTileHouseClass(1,1, class_num) ||
	IsTileHouseClass(1,-1, class_num) ||
	IsTileHouseClass(0,1, class_num) ||
	IsTileHouseClass(0,-1, class_num) ||
	IsTileHouseClass(-1,0, class_num) ||
	IsTileHouseClass(-1,1, class_num) ||
	IsTileHouseClass(-1,-1, class_num) )
	{return;}

switch (FEAT_HOUSES, PARENT, IsCity, is_city == 1) {return;}

/* Note: Check population is inaccurate when generating towns. This will only work properly when growing towns in-game. */
/*
switch (FEAT_HOUSES, PARENT, HasPopulation, required, population >= required) {return;}

switch (FEAT_HOUSES, SELF, HasRoadAdjacentSW, nearby_tile_class(1,0) == TILE_CLASS_ROAD || nearby_tile_class(1,0) == TILE_CLASS_STATION) {return;}
switch (FEAT_HOUSES, SELF, HasRoadAdjacentNE, nearby_tile_class(-1,0) == TILE_CLASS_ROAD || nearby_tile_class(-1,0) == TILE_CLASS_STATION) {return;}
switch (FEAT_HOUSES, SELF, HasRoadAdjacentSE, nearby_tile_class(0,1) == TILE_CLASS_ROAD || nearby_tile_class(0,1) == TILE_CLASS_STATION) {return;}
switch (FEAT_HOUSES, SELF, HasRoadAdjacentNW, nearby_tile_class(0,-1) == TILE_CLASS_ROAD || nearby_tile_class(0,-1) == TILE_CLASS_STATION) {return;}

switch (FEAT_HOUSES, SELF, IsUniqueHouse, same_house_count_town == 0) {return;}
switch (FEAT_HOUSES, SELF, IsUniqueInRadius, radius, nearest_house_matching_criterion(radius, SEARCH_HOUSE_BY_TYPE) == 0) {return;}

switch (FEAT_HOUSES, SELF, HasSameClassNearby, radius, nearest_house_matching_criterion(radius, SEARCH_HOUSE_BY_CLASS) ) {0: return 0; return 1;}

switch (FEAT_HOUSES, SELF, IsFirstHouseOfClass, same_class_count_town == 0) {return;}
*/
/* End Functions */


/* *** Begin Waste *** */

/* 
Waste is only active when a supported version (version 8 or later) of Improved Town Industries is active with the Waste & Recyclables parameter active.

The parameter to enable waste, as well as the WSTE and RCYC cargo definitions, are in Improved Town Industries.

Improved Town Industries also has an error message in case Improved Town Layouts is not loaded or too old, or if OpenTTD is not 1.10.0 or better.

No waste-related error messages are required or included in Improved Town Layouts (although there are a few other error messages in header.nml).
*/

/* Average monthly production of passengers or mail, based on vanilla population or mail_multiplier properties:

--------------------------------------
Population       Avg. passengers/month
--------------------------------------
1 to 8           -->    1
9 to 16          -->    2
17 to 24         -->    3
25 to 32         -->    4
33 to 40         -->    5
41 to 48         -->    6
49 to 56         -->    7
57 to 64         -->    8
65 to 72         -->    9
73 to 80         -->    10
81 to 88         -->    11
89 to 96         -->    12
97 to 104        -->    13
105 to 112       -->    14
113 to 120       -->    15
121 to 128       -->    16
129 to 136       -->    17
137 to 144       -->    18
145 to 152       -->    19
153 to 160       -->    20
161 to 168       -->    21
169 to 176       -->    22
177 to 184       -->    23
185 to 192       -->    24
193 to 200       -->    25
201 to 208       -->    26
209 to 216       -->    27
217 to 224       -->    28
225 to 232       -->    29
233 to 240       -->    30
241 to 248       -->    31
249 to 256       -->    32
257 to 264       -->    33
265 to 272       -->    34
273 to 280       -->    35
281 to 288       -->    36
289 to 296       -->    37
*/

/* Waste production per month:

- Residential: 							Min 1 ton, max 1/10 ton per person (rounded up)
- Commercial (including landmarks):		Min 1 ton, max 1/8 ton per person (rounded up)

*/

/* Production loop, shared by all houses. Used when Waste is not active. Individual production rates stored in temporary registers in the functions below.*/
switch (FEAT_HOUSES, SELF, switch_alt_production_no_waste, getbits(extra_callback_info1, 0, 8)) {
	0: (PASS * 256) + (abs(extra_callback_info2 % 8) == 0) * LOAD_TEMP(1);
	1: (MAIL * 256) + (abs(extra_callback_info2 % 8) == 0) * LOAD_TEMP(2);
	return CB_RESULT_HOUSE_NO_MORE_PRODUCTION;
}

/* Production loop, shared by all houses. Used when Waste is active. Individual production rates stored in temporary registers in the functions below.*/
switch (FEAT_HOUSES, SELF, switch_alt_production_waste, getbits(extra_callback_info1, 0, 8)) {
	0: (PASS * 256) + (abs(extra_callback_info2 % 8) == 0) * LOAD_TEMP(1);
	1: (MAIL * 256) + (abs(extra_callback_info2 % 8) == 0) * LOAD_TEMP(2);
	2: (WSTE * 256) + (abs(extra_callback_info2 % 8) == 0) * LOAD_TEMP(3);
	return CB_RESULT_HOUSE_NO_MORE_PRODUCTION;
}

/* Check for compatible version of Improved Town Industries (>= 1.6.0) or Yankee Industries */
switch (FEAT_HOUSES, SELF, switch_recycle_enabled, (param["TT\04\01", 254] >= 10) || (param["TT12", 254] >= 0)) {
	1: switch_alt_production_waste; switch_alt_production_no_waste;}

/* Production levels for passengers, mail, and waste are passed as arguments to this function for use in the production loop. */
switch (FEAT_HOUSES, SELF, func_produce, pass, mail, waste, [STORE_TEMP(pass, 1), STORE_TEMP(mail, 2), STORE_TEMP(waste, 3)] ) {switch_recycle_enabled;}

/* 
Waste production levels:
* Residential = min 1, max 1/6 per person (rounded up)
* Commercial = min 1, max 1/4 per person (rounded up) 
* Historic Commercial = min 1, max 1/4 per person (rounded up)
* Landmarks = min 1, max 1/4 per person (rounded up), or otherwise as decided for gameplay reasons. For example, stadiums make a lot of waste.
*/

/* *** End Waste *** */

// Begin Sprite Templates


// Only 1 sprites to be used in four directions
template template_house_con(x, y) {   
	//left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    sw: [ x,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    nw: [ x,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    ne: [ x,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
}

template template_house_1dir(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    sw: [ x,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    nw: [ x,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    ne: [ x,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
}

template template_house_con_phases(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    nw: [ x+130,	y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    ne: [ x+195,	y,		64,		78,		-31,		-46,	NOCROP | ANIM]
}

template template_house_80_1dir(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    sw: [ x,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    nw: [ x,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    ne: [ x,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
}

template template_house_80_2dir(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    nw: [ x,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    ne: [ x+65,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
}

template template_house_80(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    nw: [ x+130,	y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    ne: [ x+195,	y,		64,		80,		-31,		-48,	NOCROP | ANIM]
}

template template_house_100_1dir(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		100,	-31,		-68,	NOCROP | ANIM]
    sw: [ x,		y,		64,		100,	-31,		-68,	NOCROP | ANIM]
    nw: [ x,		y,		64,		100,	-31,		-68,	NOCROP | ANIM]
    ne: [ x,		y,		64,		100,	-31,		-68,	NOCROP | ANIM]
}

template template_house_100(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		100,	-31,		-68,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		100,	-31,		-68,	NOCROP | ANIM]
    nw: [ x+130,	y,		64,		100,	-31,		-68,	NOCROP | ANIM]
    ne: [ x+195,	y,		64,		100,	-31,		-68,	NOCROP | ANIM]
}

template template_house_128_1dir(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		128,	-31,		-96,	NOCROP | ANIM]
    sw: [ x,		y,		64,		128,	-31,		-96,	NOCROP | ANIM]
    nw: [ x,		y,		64,		128,	-31,		-96,	NOCROP | ANIM]
    ne: [ x,		y,		64,		128,	-31,		-96,	NOCROP | ANIM]
}

template template_house_128(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		128,	-31,		-96,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		128,	-31,		-96,	NOCROP | ANIM]
    nw: [ x+130,	y,		64,		128,	-31,		-96,	NOCROP | ANIM]
    ne: [ x+195,	y,		64,		128,	-31,		-96,	NOCROP | ANIM]
}

template template_house_200(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		200,	-31,		-168,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		200,	-31,		-168,	NOCROP | ANIM]
    nw: [ x+130,	y,		64,		200,	-31,		-168,	NOCROP | ANIM]
    ne: [ x+195,	y,		64,		200,	-31,		-168,	NOCROP | ANIM]
}

template template_house_250(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		250,	-31,		-218,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		250,	-31,		-218,	NOCROP | ANIM]  
    nw: [ x+130,	y,		64,		250,	-31,		-218,	NOCROP | ANIM]
    ne: [ x+195,	y,		64,		250,	-31,		-218,	NOCROP | ANIM]
}

template template_house_2dir(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    nw: [ x,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    ne: [ x+65,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
}

/* Rotation checks for buildings to face roads */

// Bus stops are TILE_CLASS_STATION, not TILE_CLASS_ROAD. If the building is not adjacent to a road (below) it may be adacent to a bus stop which it should face.
// Note: This will make buildings truly not adjacent to a road, but adjacent to a station (of any type) face the station.
switch (FEAT_HOUSES, SELF, switch_station_adj_ne, nearby_tile_class(-1,0) == TILE_CLASS_STATION)
	{1: return 3; return 0;}
switch (FEAT_HOUSES, SELF, switch_station_adj_nw, nearby_tile_class(0,-1) == TILE_CLASS_STATION)
	{1: return 2; switch_station_adj_ne;}
switch (FEAT_HOUSES, SELF, switch_station_adj_sw, nearby_tile_class(1,0) == TILE_CLASS_STATION)
	{1: return 1; switch_station_adj_nw;}
switch (FEAT_HOUSES, SELF, switch_station_adj_se, nearby_tile_class(0,1) == TILE_CLASS_STATION)
	{1: return 0; switch_station_adj_sw;}
// Check for roads first
switch (FEAT_HOUSES, SELF, switch_road_adj_ne, nearby_tile_class(-1,0) == TILE_CLASS_ROAD)
	{1: return 3; switch_station_adj_se;}
switch (FEAT_HOUSES, SELF, switch_road_adj_nw, nearby_tile_class(0,-1) == TILE_CLASS_ROAD)
	{1: return 2; switch_road_adj_ne;}
switch (FEAT_HOUSES, SELF, switch_road_adj_sw, nearby_tile_class(1,0) == TILE_CLASS_ROAD)
	{1: return 1; switch_road_adj_nw;}
switch (FEAT_HOUSES, SELF, switch_road_adj_se, nearby_tile_class(0,1) == TILE_CLASS_ROAD)
	{1: return 0; switch_road_adj_sw;}

switch (FEAT_HOUSES,SELF, switch_road_adjacency, 1) {switch_road_adj_se;}

// End Sprite Templates

/* *** Begin Switches *** */

/* Building Classes
*
*	Class 0
*	Buildings in class: House, Market, Warehouse, Fountain, Statue
*
*	Class 1
*	Parks cannot be within 2 tiles of another park
*
*	Class 2
*	Skyscrapers/office towers can only build within 5 tiles of another skyscraper/office towers
*	Buildings in class: skyscrapers, office towers
*
*	Class 3
*	Historic shops and Historic Church (which sets if city has preservation or not)
*
*	Class 4
*	Old houses (must be within 2 tiles of another old house, to prevent sparse town growth with house limit)
*
*/

/* House sprite selection depends on roads and slopes */
/*
switch(FEAT_HOUSES, SELF, house_sprite_orientation_SE, nearby_tile_class(0,1)) {TILE_CLASS_ROAD: random_sprite_houses_SE; random_sprite_houses_any;}
switch(FEAT_HOUSES, SELF, house_sprite_orientation_SW, nearby_tile_class(1,0)) {TILE_CLASS_ROAD: random_sprite_houses_SW; house_sprite_orientation_SE;}
switch(FEAT_HOUSES, SELF, house_sprite_sloped, nearby_tile_slope(0,0)) {0: house_sprite_orientation_SW; random_sprite_houses_any;}
*/
/* Unique buildings require population and no duplicates */
switch(FEAT_HOUSES, SELF, switch_unique_house, same_house_count_town == 0) {1: return 1; return 0;}
//switch (FEAT_HOUSES, PARENT, switch_population_500, population >= 500) {1: switch_unique_house; return 0;} 		// Old stadium
//switch (FEAT_HOUSES, PARENT, switch_population_10k, population >= 10000) {1: switch_unique_house; return 0;} 	// New stadium

/* Coast check for Museum */
//switch(FEAT_HOUSES, SELF, switch_museum_shore_SE, nearby_tile_is_water(0,1)) {1: switch_population_10k; return 0;}

/* Distance check: Hotel cannot build within 30 tiles of another Hotel and must have a road to SW */
//switch(FEAT_HOUSES, PARENT, switch_hotel_check_2, is_city == 1) {1: return 1; return 0;}
//switch(FEAT_HOUSES, SELF, switch_hotel_check_1, nearest_house_matching_criterion(30, SEARCH_HOUSE_BY_TYPE) == 0 && nearby_tile_class(1,0) == TILE_CLASS_ROAD) {1: switch_hotel_check_2; return 0;}


/* Houses and Town Houses cannot build within 2 tiles of a modern office building*/
switch(FEAT_HOUSES, SELF, switch_house_office_gap,
	nearby_tile_house_class(0,1) == 258 ||
	nearby_tile_house_class(0,-1) == 258 ||
	nearby_tile_house_class(1,0) == 258 ||
	nearby_tile_house_class(1,1) == 258 ||
	nearby_tile_house_class(1,-1) == 258 ||
	nearby_tile_house_class(-1,0) == 258 ||
	nearby_tile_house_class(-1,1) == 258 ||
	nearby_tile_house_class(-1,-1) == 258 ||
	nearby_tile_house_class(-2,-2) == 258 ||
	nearby_tile_house_class(-2,-1) == 258 ||
	nearby_tile_house_class(-2,0) == 258 ||
	nearby_tile_house_class(-2,1) == 258 ||
	nearby_tile_house_class(-2,2) == 258 ||
	nearby_tile_house_class(-1,-2) == 258 ||
	nearby_tile_house_class(-1,2) == 258 ||
	nearby_tile_house_class(0,-2) == 258 ||
	nearby_tile_house_class(0,-2) == 258 ||
	nearby_tile_house_class(1,-2) == 258 ||
	nearby_tile_house_class(1,-2) == 258 ||
	nearby_tile_house_class(2,-2) == 258 ||
	nearby_tile_house_class(2,-1) == 258 ||
	nearby_tile_house_class(2,0) == 258 ||
	nearby_tile_house_class(2,1) == 258 ||
	nearby_tile_house_class(2,2) == 258)
		{1: return 0; return 1;}
		
		
/* Small Flats cannot build within 1 tile of a modern office building unless no passenger service is provided to the tile */
switch(FEAT_HOUSES, SELF, switch_small_flats_check_2a, func_pass_service()) {1: return 0; return 1;}
switch(FEAT_HOUSES, SELF, switch_small_flats_check_2b, func_pass_service()) {1: return 1; return 0;}

switch(FEAT_HOUSES, SELF, switch_small_flats_check_1,
	nearby_tile_house_class(0,1) == 258 ||
	nearby_tile_house_class(0,-1) == 258 ||
	nearby_tile_house_class(1,0) == 258 ||
	nearby_tile_house_class(1,1) == 258 ||
	nearby_tile_house_class(1,-1) == 258 ||
	nearby_tile_house_class(-1,0) == 258 ||
	nearby_tile_house_class(-1,1) == 258 ||
	nearby_tile_house_class(-1,-1) == 258)
		{1: switch_small_flats_check_2a; switch_small_flats_check_2b;}


/* Offices (new and modern) must build within distance 2 of same class (high-rises). No need to cluster if first in town. */
switch(FEAT_HOUSES,SELF, switch_office_cluster_3, same_class_count_town) {0: return 1; return 0;}
switch(FEAT_HOUSES,SELF, switch_office_cluster_2, nearest_house_matching_criterion(2, SEARCH_HOUSE_BY_CLASS)) {0: switch_office_cluster_3; return 1;}

/* Office clusters (both old and new) require passenger service */
switch(FEAT_HOUSES, SELF, switch_office_cluster_1, func_pass_service())
	{1: switch_office_cluster_2; return 0;} 


/* Modern office buildings need residential population */
switch(FEAT_HOUSES, SELF, switch_modern_office_pop_check, (func_population_adder() > ( (other_class_count_town(3) * 30) + ((1 + same_class_count_town) * 60) ) ) )
	{1: switch_office_cluster_1; return 0;}


/* Old office buildings need residential population */
//switch(FEAT_HOUSES, SELF, switch_old_office_pop_check, (func_population_adder() > (1 + same_class_count_town) * 30) )
//	{1: switch_office_cluster_1; return 0;}


/* One office building requires a road in the SE tile */
//switch(FEAT_HOUSES,SELF, switch_office_road_SE, nearby_tile_class(0,1) == TILE_CLASS_ROAD) {1: switch_modern_office_pop_check; return 0;}


/* Unique office building (capsule tower) only allows one on the map in a city with population >= 30k */
switch(FEAT_HOUSES,PARENT, pop_over_30k, population) {0 .. 30000: return 0; switch_office_cluster_1;}
//switch(FEAT_HOUSES,SELF, unique_worldwide, same_house_count_map) {0: pop_over_30k; return 0;}
switch(FEAT_HOUSES,SELF, unique_in_town, same_house_count_town) {0: pop_over_30k; return 0;}

/* 	Historic buildings are preserved if they are in a town with a Historic Church (acting as a random toggle for a town's attitude toward preservation)
*	and are within 2 tiles of another historic building.
*	Otherwise, they use a random 1/8th chance preservation check.
*/
//random_switch(FEAT_HOUSES,SELF, random_preservation) {1: return 1; 7: return 0;}
//switch(FEAT_HOUSES,SELF, switch_preservation_3, nearest_house_matching_criterion(2, SEARCH_HOUSE_BY_CLASS)) {0: return 0; return 1;}
//switch(FEAT_HOUSES,SELF, switch_preservation_2, other_house_count_town(38)) {1: switch_preservation_3; random_preservation;}
//switch(FEAT_HOUSES,SELF, func_preservation_year, cutoff, (current_year < cutoff)) {0: return 0; switch_preservation_2;}

/* *** End Switches *** */

// Begin apartments_01

// Building Sprites
spriteset (spr_apartments_01, 							"src/gfx/apartments/apartments_01/building.png") 						{template_house_con_phases(1,1)}
spriteset (spr_apartments_01_snow, 						"src/gfx/apartments/apartments_01/building.png") 						{template_house_con_phases(1,80)}

// Ground Tiles
spriteset (spr_apartments_01_ground, 					"src/gfx/apartments/apartments_01/ground.png") 						{template_house_1dir(1,1)}
spriteset (spr_apartments_01_ground_snow, 				"src/gfx/apartments/apartments_01/ground.png") 						{template_house_1dir(1,80)}

// Normal Sprites
spritelayout sprlay_apartments_01_norm {
	ground {
		sprite: spr_apartments_01_ground;
	}
	building {
		sprite: spr_apartments_01(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_apartments_01_snow {
	ground {
		sprite: spr_apartments_01_ground_snow;
	}
	building {
		sprite: spr_apartments_01_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_apartments_01_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_apartments_01_snow;
	sprlay_apartments_01_norm;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_switch_recolor_apartments_01)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

item(FEAT_HOUSES, item_apartments_01, 27, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						string(NAME_APARTMENTS_01);
		population: 				150;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1960,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE,TOWNZONE_INNER_SUBURB,TOWNZONE_OUTER_SUBURB), ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
				
		}
	graphics {
		default: 					switch_apartments_01_snow;
		construction_check: (cargo_accepted_nearby_last_month(PASS) == 1 || cargo_accepted_nearby_this_month(PASS) == 1) ? 1 : 0; 	
			// Only build within the catchment area of a station which received passengers this month or last month
		cargo_production: 			func_produce(13,4,2);
		colour: 					rand_switch_recolor_apartments_01;
	}
}

// End apartments_01

// Begin apartments_02

// Building Sprites
spriteset (spr_apartments_02, 							"src/gfx/apartments/apartments_02/building.png") 						{template_house_128(1,1)}
spriteset (spr_apartments_02_snow, 						"src/gfx/apartments/apartments_02/building.png") 						{template_house_128(1,130)}

// Ground Tiles
spriteset (spr_apartments_02_ground, 					"src/gfx/apartments/apartments_02/ground.png") 						{template_house_128(1,1)}
spriteset (spr_apartments_02_ground_snow, 				"src/gfx/apartments/apartments_02/ground.png") 						{template_house_128(1,130)}

// Normal Sprites
spritelayout sprlay_apartments_02_norm {
	ground {
		sprite: spr_apartments_02_ground(construction_state);
	}
	building {
		sprite: spr_apartments_02(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_apartments_02_snow {
	ground {
		sprite: spr_apartments_02_ground_snow(construction_state);
	}
	building {
		sprite: spr_apartments_02_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_apartments_02_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_apartments_02_snow;
	sprlay_apartments_02_norm;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_apartments_02)
	{
		//1: PALETTE_CC_RED;			// too in your face
		2: PALETTE_CC_LIGHT_BLUE;
		//1: PALETTE_CC_PINK;			// too silly
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

item(FEAT_HOUSES, item_apartments_02, 30, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						string(NAME_APARTMENTS_02);
		population: 				150;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1945,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE,TOWNZONE_INNER_SUBURB,TOWNZONE_OUTER_SUBURB), ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
				
		}
	graphics {
		default: 					switch_apartments_02_snow;
		construction_check: (cargo_accepted_nearby_last_month(PASS) == 1 || cargo_accepted_nearby_this_month(PASS) == 1) ? 1 : 0; 	
			// Only build within the catchment area of a station which received passengers this month or last month
		cargo_production: 			func_produce(13,4,2);
		colour: 					rand_recolor_apartments_02;
	}
}

// End apartments_02

// Begin apartments_04

// Building Sprites
spriteset (spr_build_apartments_04_north, 							"src/gfx/apartments/apartments_04/building.png") 						{template_house_128(1,1)}
spriteset (spr_build_apartments_04_west, 							"src/gfx/apartments/apartments_04/building.png") 						{template_house_128(261,1)}

spriteset (spr_build_apartments_04_north_snow, 						"src/gfx/apartments/apartments_04/building.png") 						{template_house_128(1,130)}
spriteset (spr_build_apartments_04_west_snow, 						"src/gfx/apartments/apartments_04/building.png") 						{template_house_128(261,130)}
// Ground Sprites
spriteset (spr_ground_apartments_04, 							"src/gfx/apartments/apartments_04/ground.png") 						{template_house_128(1,1)}
spriteset (spr_ground_apartments_04_snow, 						"src/gfx/apartments/apartments_04/ground.png") 						{template_house_128(1,130)}

// Normal Sprites
spritelayout sprlay_apartments_04_north {
	ground {
		sprite: spr_ground_apartments_04(construction_state);
	}
	building {
		sprite: spr_build_apartments_04_north(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_apartments_04_west {
	ground {
		sprite: spr_ground_apartments_04(construction_state);
	}
	building {
		sprite: spr_build_apartments_04_west(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_apartments_04_snow_north {
	ground {
		sprite: spr_ground_apartments_04_snow(construction_state);
	}
	building {
		sprite: spr_build_apartments_04_north_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_apartments_04_snow_west {
	ground {
		sprite: spr_ground_apartments_04_snow(construction_state);
	}
	building {
		sprite: spr_build_apartments_04_west_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_apartments_04_north,terrain_type) {
	TILETYPE_SNOW: sprlay_apartments_04_snow_north;
	sprlay_apartments_04_north;
}
switch(FEAT_HOUSES, SELF, switch_apartments_04_west,terrain_type) {
	TILETYPE_SNOW: sprlay_apartments_04_snow_west;
	sprlay_apartments_04_west;
}


// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_apartments_04)
	{
		1: PALETTE_CC_RED;			// too in your face
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;			// too silly
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

item(FEAT_HOUSES, item_apartments_04, 56, HOUSE_SIZE_2X1){
	property {
		substitute: 				76; 													
		name: 						string(NAME_APARTMENTS_04);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED);
		population: 				100;
		accepted_cargos: 			[[PASS, 8],[MAIL, 4],[GOOD, 4]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1960,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE,TOWNZONE_INNER_SUBURB,TOWNZONE_OUTER_SUBURB), ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
		building_class:				0;	
		}
	graphics {
		graphics_north: 			switch_apartments_04_north;
		graphics_west: 				switch_apartments_04_west;
		construction_check: (cargo_accepted_nearby_last_month(PASS) == 1 || cargo_accepted_nearby_this_month(PASS) == 1) ? 1 : 0; 	
			// Only build within the catchment area of a station which received passengers this month or last month
		cargo_production: 			func_produce(13,4,2);
		colour: 					rand_recolor_apartments_04;
	} 					
}

// End apartments_04

// Begin naganuma_house

spriteset (spr_naganuma_house, 								"src/gfx/houses/naganuma/building.png") 						{template_house_2dir(1,1)}
spriteset (spr_naganuma_house_snow, 						"src/gfx/houses/naganuma/building.png") 						{template_house_2dir(1,80)}
spriteset (spr_naganuma_house_ground, 						"src/gfx/houses/naganuma/ground.png") 						{template_house_2dir(1,1)}
spriteset (spr_naganuma_house_ground_snow, 					"src/gfx/houses/naganuma/ground.png") 						{template_house_2dir(1,80)}

spritelayout sprlay_naganuma_house_norm {
	ground {
		sprite: spr_naganuma_house_ground(LOAD_TEMP(1));
	}
	building {
		sprite: spr_naganuma_house(LOAD_TEMP(1));
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_naganuma_house_snow {
	ground {
		sprite: spr_naganuma_house_ground_snow(LOAD_TEMP(1));
	}
	building {
		sprite: spr_naganuma_house_snow(LOAD_TEMP(1));
	}
}

switch (FEAT_HOUSES, SELF, switch_naganuma_house_sprites, [ 
 	// Check for snow and set the groundsprite in temporary variable 0
 	STORE_TEMP(GROUNDSPRITE_NORMAL, 0),
 	STORE_TEMP(terrain_type == TILETYPE_SNOW ? GROUNDSPRITE_SNOW : LOAD_TEMP(0), 0),
	// Check the rotation of the house
	STORE_TEMP(switch_road_adjacency(), 1),
	terrain_type == TILETYPE_SNOW])
	{1: sprlay_naganuma_house_snow; sprlay_naganuma_house_norm;}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_naganuma_house)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

item(FEAT_HOUSES, item_naganuma_house, 26, HOUSE_SIZE_1X1){
	property {
		substitute: 				26;
		name: 						string(NAME_NAGANUMA_HOUSE);
		population: 				30;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1945,0xFFFF];
		minimum_lifetime: 			2;
		availability_mask: 			[ALL_TOWNZONES & ~bitmask(TOWNZONE_CENTRE), ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
		building_class: 			0;
		
		}
	graphics {
		default: 					switch_naganuma_house_sprites;
		construction_check: 		switch_house_office_gap;
		cargo_production: 			func_produce(2,1,1);
		colour: 					rand_recolor_naganuma_house;
	}
}

// End naganuma_house

// Begin nishikawa_house

spriteset (spr_nishikawa_house, 								"src/gfx/houses/nishikawa/building.png") 						{template_house_2dir(1,1)}
spriteset (spr_nishikawa_house_snow, 						"src/gfx/houses/nishikawa/building.png") 						{template_house_2dir(1,80)}
spriteset (spr_nishikawa_house_ground, 						"src/gfx/houses/nishikawa/ground.png") 						{template_house_2dir(1,1)}
spriteset (spr_nishikawa_house_ground_snow, 					"src/gfx/houses/nishikawa/ground.png") 						{template_house_2dir(1,80)}

spritelayout sprlay_nishikawa_house_norm {
	ground {
		sprite: spr_nishikawa_house_ground(LOAD_TEMP(1));
	}
	building {
		sprite: spr_nishikawa_house(LOAD_TEMP(1));
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_nishikawa_house_snow {
	ground {
		sprite: spr_nishikawa_house_ground_snow(LOAD_TEMP(1));
	}
	building {
		sprite: spr_nishikawa_house_snow(LOAD_TEMP(1));
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

switch (FEAT_HOUSES, SELF, switch_nishikawa_house_sprites, [ 
 	// Check for snow and set the groundsprite in temporary variable 0
 	STORE_TEMP(GROUNDSPRITE_NORMAL, 0),
 	STORE_TEMP(terrain_type == TILETYPE_SNOW ? GROUNDSPRITE_SNOW : LOAD_TEMP(0), 0),
	// Check the rotation of the house
	STORE_TEMP(switch_road_adjacency(), 1),
	terrain_type == TILETYPE_SNOW])
	{1: sprlay_nishikawa_house_snow; sprlay_nishikawa_house_norm;}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_nishikawa_house)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;			
		1: PALETTE_CC_DARK_BLUE;		
		1: PALETTE_CC_GREEN;			
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

item(FEAT_HOUSES, item_nishikawa_house, 65, HOUSE_SIZE_1X1){
	property {
		substitute: 				26;
		name: 						TTD_STR_TOWN_BUILDING_NAME_HOUSES_1;
		population: 				20;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1870,0xFFFF];
		minimum_lifetime: 			2;
		availability_mask: 			[ALL_TOWNZONES & ~bitmask(TOWNZONE_CENTRE), ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
		building_class: 			0;
		
		}
	graphics {
		default: 					switch_nishikawa_house_sprites;
		construction_check: 		switch_house_office_gap;
		//cargo_production: 			func_produce(2,1,1);
		colour: 					rand_recolor_nishikawa_house;
	}
}
// End nishikawa_house

// Begin offices_01

// Building Sprites
spriteset (spr_offices_01, 							"src/gfx/offices/offices_01/building.png") 						{template_house_128_1dir(1,1)}
spriteset (spr_offices_01_snow, 						"src/gfx/offices/offices_01/building.png") 						{template_house_128_1dir(1,130)}

// Ground Tiles
spriteset (spr_offices_01_ground, 					"src/gfx/offices/offices_01/ground.png") 						{template_house_128_1dir(1,1)}
spriteset (spr_offices_01_ground_snow, 				"src/gfx/offices/offices_01/ground.png") 						{template_house_128_1dir(1,130)}

spritelayout sprlay_offices_01_norm {
	ground {
		sprite: spr_offices_01_ground(LOAD_TEMP(1));
	}
	building {
		sprite: spr_offices_01(LOAD_TEMP(1));
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_offices_01_snow {
	ground {
		sprite: spr_offices_01_ground_snow(LOAD_TEMP(1));
	}
	building {
		sprite: spr_offices_01_snow(LOAD_TEMP(1));
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose the sprites
switch (FEAT_HOUSES, SELF, switch_offices_01_sprites, [ 
 	// Check for snow and set the groundsprite in temporary variable 0
 	STORE_TEMP(GROUNDSPRITE_NORMAL, 0),
 	STORE_TEMP(terrain_type == TILETYPE_SNOW ? GROUNDSPRITE_SNOW : LOAD_TEMP(0), 0),
	// Check the rotation of the house
	STORE_TEMP(switch_road_adjacency(), 1),
	terrain_type == TILETYPE_SNOW])
	{1: sprlay_offices_01_snow; sprlay_offices_01_norm;}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_offices_01)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}


item(FEAT_HOUSES, item_offices_01, 36, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						TTD_STR_TOWN_BUILDING_NAME_HOUSES_1;
		population: 				30;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1945,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class: 			2;
		}
	graphics {
		default: 					switch_offices_01_sprites;
		construction_check: 		switch_modern_office_pop_check; 	
		cargo_production: 			func_produce(13,4,2);
		colour: 					rand_recolor_offices_01;
	}
}

// End offices_01

// Begin offices_02

// Building Sprites
spriteset (spr_offices_02, 							"src/gfx/offices/offices_02/building.png") 						{template_house_128(1,1)}
spriteset (spr_offices_02_snow, 						"src/gfx/offices/offices_02/building.png") 						{template_house_128(1,130)}

// Ground Tiles
spriteset (spr_offices_02_ground, 					"src/gfx/offices/offices_02/ground.png") 						{template_house_128(1,1)}
spriteset (spr_offices_02_ground_snow, 				"src/gfx/offices/offices_02/ground.png") 						{template_house_128(1,130)}

spritelayout sprlay_offices_02_norm {
	ground {
		sprite: spr_offices_02_ground(construction_state);
	}
	building {
		sprite: spr_offices_02(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_offices_02_snow {
	ground {
		sprite: spr_offices_02_ground_snow(construction_state);
	}
	building {
		sprite: spr_offices_02_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_offices_02_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_offices_02_snow;
	sprlay_offices_02_norm;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_offices_02)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

item(FEAT_HOUSES, item_offices_02, 37, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						TTD_STR_TOWN_BUILDING_NAME_HOUSES_1;
		population: 				30;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1945,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class: 			2;
		}
	graphics {
		default: 					switch_offices_02_sprites;
		construction_check: 		switch_modern_office_pop_check; 	
		cargo_production: 			func_produce(13,4,2);
		colour: 					rand_recolor_offices_02;
	}
}

// End offices_02

// Begin offices_03

// Building Sprites
spriteset (spr_offices_03, 							"src/gfx/offices/offices_03/building.png") 						{template_house_100(1,1)}
spriteset (spr_offices_03_snow, 						"src/gfx/offices/offices_03/building.png") 						{template_house_100(1,102)}

// Ground Tiles
spriteset (spr_offices_03_ground, 					"src/gfx/offices/offices_03/ground.png") 						{template_house_100(1,1)}
spriteset (spr_offices_03_ground_snow, 				"src/gfx/offices/offices_03/ground.png") 						{template_house_100(1,102)}

spritelayout sprlay_offices_03_norm {
	ground {
		sprite: spr_offices_03_ground(construction_state);
	}
	building {
		sprite: spr_offices_03(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_offices_03_snow {
	ground {
		sprite: spr_offices_03_ground_snow(construction_state);
	}
	building {
		sprite: spr_offices_03_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_offices_03_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_offices_03_snow;
	sprlay_offices_03_norm;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_offices_03)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

item(FEAT_HOUSES, item_offices_03, 49, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						TTD_STR_TOWN_BUILDING_NAME_HOUSES_1;
		population: 				30;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1945,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class: 			2;
		}
	graphics {
		default: 					switch_offices_03_sprites;
		construction_check: 		switch_modern_office_pop_check; 	
		cargo_production: 			func_produce(13,4,2);
		colour: 					rand_recolor_offices_03;
	}
}

// End offices_03

 // Begin shiro_01

// Sprites
spriteset (spr_shiro_01, 							"src/gfx/landmarks/shiro_01/shiro.png") 						{template_house_200(1,1)}
spriteset (spr_shiro_01_snow, 						"src/gfx/landmarks/shiro_01/shiro.png") 						{template_house_200(1,202)}

// Normal Sprites
spritelayout sprlay_shiro_01_north {
	ground {
		sprite: spr_shiro_01(3);
	}
	building {
		sprite: spr_shiro_01(2);
		hide_sprite: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shiro_01_east {
	ground {
		sprite: spr_shiro_01(3);
	}
	building {
		sprite: spr_shiro_01(2);
		xoffset: -1;
		yoffset: 2;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shiro_01_west {
	ground {
		sprite: spr_shiro_01(3);
	}
	building {
		sprite: spr_shiro_01(0);
		xoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shiro_01_south {
	ground {
		sprite: spr_shiro_01(3);
	}
	building {
		sprite: spr_shiro_01(1);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_shiro_01_snow_north {
	ground {
		sprite: spr_shiro_01_snow(3);
	}
	building {
		sprite: spr_shiro_01_snow(2);
		hide_sprite: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shiro_01_snow_east {
	ground {
		sprite: spr_shiro_01_snow(3);
	}
	building {
		sprite: spr_shiro_01_snow(2);
		xoffset: -1;
		yoffset: 2;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shiro_01_snow_west {
	ground {
		sprite: spr_shiro_01_snow(3);
	}
	building {
		sprite: spr_shiro_01_snow(0);
		xoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shiro_01_snow_south {
	ground {
		sprite: spr_shiro_01_snow(3);
	}
	building {
		sprite: spr_shiro_01_snow(1);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_shiro_01_north,terrain_type) {
	TILETYPE_SNOW: sprlay_shiro_01_snow_north;
	sprlay_shiro_01_north;
}
switch(FEAT_HOUSES, SELF, switch_shiro_01_east,terrain_type) {
	TILETYPE_SNOW: sprlay_shiro_01_snow_east;
	sprlay_shiro_01_east;
}
switch(FEAT_HOUSES, SELF, switch_shiro_01_west,terrain_type) {
	TILETYPE_SNOW: sprlay_shiro_01_snow_west;
	sprlay_shiro_01_west;
}
switch(FEAT_HOUSES, SELF, switch_shiro_01_south,terrain_type) {
	TILETYPE_SNOW: sprlay_shiro_01_snow_south;
	sprlay_shiro_01_south;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_shiro_01)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

item(FEAT_HOUSES, item_shiro_01, 70, HOUSE_SIZE_2X2){
	property {
		substitute: 				20; //Stadium since 2x2
		name: 						string(NAME_SHIRO_01);
		building_flags: 			bitmask(HOUSE_FLAG_PROTECTED);
		population: 				20;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				6;
		years_available: 			[1700,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[ALL_TOWNZONES & ~bitmask(TOWNZONE_EDGE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];	
		}
	graphics {
		graphics_north: 			switch_shiro_01_north;
		graphics_east: 				switch_shiro_01_east;
		graphics_west: 				switch_shiro_01_west;
		graphics_south: 			switch_shiro_01_south;
		construction_check:			switch_unique_house;
		cargo_production: 			func_produce(1,1,1);
		colour: 					rand_recolor_shiro_01;
	}
}

// End shiro_01

// Begin shops_01

// Building Sprites
spriteset (spr_shops_01, 							"src/gfx/shops/shops_01/building.png") 						{template_house_100(1,1)}
spriteset (spr_shops_01_snow, 						"src/gfx/shops/shops_01/building.png") 						{template_house_100(1,102)}

// Ground Tiles
spriteset (spr_shops_01_ground, 					"src/gfx/shops/shops_01/ground.png") 						{template_house_100(1,1)}
spriteset (spr_shops_01_ground_snow, 				"src/gfx/shops/shops_01/ground.png") 						{template_house_100(1,102)}

spritelayout sprlay_shops_01_norm {
	ground {
		sprite: spr_shops_01_ground(construction_state);
	}
	building {
		sprite: spr_shops_01(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shops_01_snow {
	ground {
		sprite: spr_shops_01_ground_snow(construction_state);
	}
	building {
		sprite: spr_shops_01_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_shops_01_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_shops_01_snow;
	sprlay_shops_01_norm;
}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_shops_01_con_check, HasRoadAdjacentSW() && HasRoadAdjacentSE() && switch_modern_office_pop_check()) {return;}	

// Recolouring
random_switch (FEAT_HOUSES, SELF, random_recolour_shops_01) {
	1:	return PALETTE_CC_DARK_BLUE;
	1:	return PALETTE_CC_GREY;
	1:	return PALETTE_CC_BROWN;
	1:	return PALETTE_CC_MAUVE;
	1:	return PALETTE_CC_WHITE;
	1:	return PALETTE_CC_DARK_GREEN;
}

item(FEAT_HOUSES, item_shops_01, 48, HOUSE_SIZE_1X1) {
	property {
		substitute: 				30;
		name: 						string(NAME_SHOPS_01);
		population: 				180;
		mail_multiplier: 			75;
		accepted_cargos: 			[[PASS, 8],[MAIL,8],[GOOD, 8]];
		local_authority_impact: 	180;
		removal_cost_multiplier: 	155;
		probability: 				1;
		years_available: 			[1970,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];	// JPSet Zones 4,3
		building_class: 			2;
	}
	graphics {
		default: 					switch_shops_01_sprites;
		construction_check: 		switch_shops_01_con_check;
		colour: 					random_recolour_shops_01;
		//cargo_production: 			func_produce(24,10,3);
	}
}
// End shops_01

// Begin shops_02

// Building Sprites
spriteset (spr_shops_02, 							"src/gfx/shops/shops_02/building.png") 						{template_house_128(1,1)}
spriteset (spr_shops_02_snow, 						"src/gfx/shops/shops_02/building.png") 						{template_house_128(1,130)}

// Ground Tiles
spriteset (spr_shops_02_ground, 					"src/gfx/shops/shops_02/ground.png") 						{template_house_128(1,1)}
//spriteset (spr_shops_02_ground_snow, 				"src/gfx/shops/shops_02/ground.png") 						{template_house_128(1,1)}

spritelayout sprlay_shops_02_norm {
	ground {
		sprite: spr_shops_02_ground(construction_state);
	}
	building {
		sprite: spr_shops_02(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shops_02_snow {
	ground {
		sprite: spr_shops_02_ground(construction_state);
	}
	building {
		sprite: spr_shops_02_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_shops_02_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_shops_02_snow;
	sprlay_shops_02_norm;
}

// Construction Check
//switch (FEAT_HOUSES, SELF, switch_shops_02_con_check, switch_modern_office_pop_check()) {return;}	

// Recolouring
random_switch (FEAT_HOUSES, SELF, random_recolour_shops_02) {
	1:	return PALETTE_CC_DARK_BLUE;
	1:	return PALETTE_CC_GREY;
	1:	return PALETTE_CC_BROWN;
	1:	return PALETTE_CC_MAUVE;
	1:	return PALETTE_CC_WHITE;
	1:	return PALETTE_CC_DARK_GREEN;
}

item(FEAT_HOUSES, item_shops_02, 47, HOUSE_SIZE_1X1) {
	property {
		substitute: 				30;
		name: 						string(NAME_SHOPS_02);
		population: 				140;
		mail_multiplier: 			75;
		accepted_cargos: 			[[PASS, 8],[MAIL,8],[GOOD, 8]];
		local_authority_impact: 	180;
		removal_cost_multiplier: 	155;
		probability: 				1;
		years_available: 			[1970,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class: 			2;
	}
	graphics {
		default: 					switch_shops_02_sprites;
		construction_check: 		switch_modern_office_pop_check;
		colour: 					random_recolour_shops_02;
		cargo_production: 			func_produce(24,10,3);
	}
}
// End shops_02

// Begin skyscraper_01

// Building Sprites
spriteset (spr_build_skyscraper_01_north, 							"src/gfx/skyscrapers/skyscraper_01/building.png") 						{template_house_250(261,1)}
spriteset (spr_build_skyscraper_01_east, 							"src/gfx/skyscrapers/skyscraper_01/building.png") 						{template_house_250(1,1)}

spriteset (spr_build_skyscraper_01_north_snow, 						"src/gfx/skyscrapers/skyscraper_01/building.png") 						{template_house_250(261,252)}
spriteset (spr_build_skyscraper_01_east_snow, 						"src/gfx/skyscrapers/skyscraper_01/building.png") 						{template_house_250(1,252)}
// Ground Sprites
spriteset (spr_ground_skyscraper_01_north, 							"src/gfx/skyscrapers/skyscraper_01/ground.png") 						{template_house_250(261,1)}
spriteset (spr_ground_skyscraper_01_east, 							"src/gfx/skyscrapers/skyscraper_01/ground.png") 						{template_house_250(1,1)}

spriteset (spr_ground_skyscraper_01_north_snow, 					"src/gfx/skyscrapers/skyscraper_01/ground.png") 						{template_house_250(261,252)}
spriteset (spr_ground_skyscraper_01_east_snow, 						"src/gfx/skyscrapers/skyscraper_01/ground.png") 						{template_house_250(1,252)}

// Normal Sprites
spritelayout sprlay_skyscraper_01_north {
	ground {
		sprite: spr_ground_skyscraper_01_north(construction_state);
	}
	building {
		sprite: spr_build_skyscraper_01_north(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_skyscraper_01_east {
	ground {
		sprite: spr_ground_skyscraper_01_east(construction_state);
	}
	building {
		sprite: spr_build_skyscraper_01_east(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_skyscraper_01_snow_north {
	ground {
		sprite: spr_ground_skyscraper_01_north_snow(construction_state);
	}
	building {
		sprite: spr_build_skyscraper_01_north_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_skyscraper_01_snow_east {
	ground {
		sprite: spr_ground_skyscraper_01_east_snow(construction_state);
	}
	building {
		sprite: spr_build_skyscraper_01_east_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_skyscraper_01_north,terrain_type) {
	TILETYPE_SNOW: sprlay_skyscraper_01_snow_north;
	sprlay_skyscraper_01_north;
}
switch(FEAT_HOUSES, SELF, switch_skyscraper_01_east,terrain_type) {
	TILETYPE_SNOW: sprlay_skyscraper_01_snow_east;
	sprlay_skyscraper_01_east;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_skyscraper_01)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
	}

item(FEAT_HOUSES, item_skyscraper_01, 76, HOUSE_SIZE_1X2){
	property {
		substitute: 				7; 													
		name: 						string(NAME_SKYSCRAPER_01);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED,HOUSE_FLAG_PROTECTED);
		population: 				255;
		accepted_cargos: 			[[PASS, 8],[MAIL, 4],[GOOD, 4]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[2006,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class:				2;	
		}
	graphics {
		graphics_north: 			switch_skyscraper_01_north;
		graphics_east: 				switch_skyscraper_01_east;
		construction_check:			unique_in_town;
		cargo_production: 			func_produce(24,10,3);
		colour: 					rand_recolor_skyscraper_01;
	}
}

// End skyscraper_01

// Begin skyscraper_02

// Building Sprites
spriteset (spr_build_skyscraper_02, 							"src/gfx/skyscrapers/skyscraper_02/building.png") 							{template_house_250(1,1)}
spriteset (spr_build_skyscraper_02_snow, 						"src/gfx/skyscrapers/skyscraper_02/building.png") 						{template_house_250(1,252)}

// Ground Sprites
spriteset (spr_ground_skyscraper_02, 							"src/gfx/skyscrapers/skyscraper_02/ground.png") 						{template_house_250(1,1)}
spriteset (spr_ground_skyscraper_02_snow, 						"src/gfx/skyscrapers/skyscraper_02/ground.png") 						{template_house_250(1,252)}

// Normal Sprites
spritelayout sprlay_skyscraper_02 {
	ground {
		sprite: spr_ground_skyscraper_02(construction_state);
	}
	building {
		sprite: spr_build_skyscraper_02(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_skyscraper_02_snow {
	ground {
		sprite: spr_ground_skyscraper_02_snow(construction_state);
	}
	building {
		sprite: spr_build_skyscraper_02_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_skyscraper_02,terrain_type) {
	TILETYPE_SNOW: sprlay_skyscraper_02_snow;
	sprlay_skyscraper_02;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_skyscraper_02)
	{
		1: PALETTE_CC_RED;			
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;			
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}


item(FEAT_HOUSES, item_skyscraper_02, 78, HOUSE_SIZE_1X1){
	property {
		substitute: 				4; 													
		name: 						string(NAME_SKYSCRAPER_02);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED,HOUSE_FLAG_PROTECTED);
		population: 				220;
		accepted_cargos: 			[[PASS, 8],[MAIL, 8],[GOOD, 8]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[2000,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class:				2;	
		}
	graphics {
		default: 					switch_skyscraper_02;
		construction_check:			unique_in_town;
		cargo_production: 			func_produce(24,10,3);
		colour: 					rand_recolor_skyscraper_02; 						// No recolouring
	}
}

// End skyscraper_02

// Begin small_apartments_01

// Building Sprites
spriteset (spr_small_apartments_01, 							"src/gfx/small_apartments/small_apartments_01/building.png") 						{template_house_80(1,1)}
spriteset (spr_small_apartments_01_snow, 						"src/gfx/small_apartments/small_apartments_01/building.png") 						{template_house_80(1,82)}

// Ground Tiles
spriteset (spr_small_apartments_01_ground, 						"src/gfx/small_apartments/small_apartments_01/ground.png") 						{template_house_80(1,1)}
spriteset (spr_small_apartments_01_ground_snow, 				"src/gfx/small_apartments/small_apartments_01/ground.png") 						{template_house_80(1,82)}

// Normal Sprites
spritelayout sprlay_small_apartments_01_norm {
	ground {
		sprite: spr_small_apartments_01_ground(construction_state);
	}
	building {
		sprite: spr_small_apartments_01(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_small_apartments_01_snow {
	ground {
		sprite: spr_small_apartments_01_ground_snow(construction_state);
	}
	building {
		sprite: spr_small_apartments_01_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_small_apartments_01_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_small_apartments_01_snow;
	sprlay_small_apartments_01_norm;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_small_apartments_01)
	{
		1: PALETTE_CC_RED;				
		2: PALETTE_CC_LIGHT_BLUE;
		//1: PALETTE_CC_PINK;			// Looks silly
		//1: PALETTE_CC_DARK_BLUE;		// Too in your face
		//1: PALETTE_CC_GREEN;			// Too in your face
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_small_apartments_01_con_check, HasRoadAdjacentSW() || HasRoadAdjacentNW()) {1: switch_small_flats_check_1; return 0;}

item(FEAT_HOUSES, item_small_apartments_01, 02, HOUSE_SIZE_1X1){
	property {
		substitute: 				02;
		name: 						string(NAME_SMALL_APARTMENTS_01);
		population: 				120;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1945,0xFFFF];
		minimum_lifetime: 			4;
		availability_mask: 			[ALL_TOWNZONES & ~bitmask(TOWNZONE_CENTRE), ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
		
		}
	graphics {
		default: 					switch_small_apartments_01_snow;
		construction_check: 		switch_small_apartments_01_con_check;
		cargo_production: 			func_produce(5,2,1);
		colour: 					rand_recolor_small_apartments_01;
	}
}

// End small_apartments_01

// Begin small_apartments_02

// Building Sprites
spriteset (spr_small_apartments_02, 							"src/gfx/small_apartments/small_apartments_02/building.png") 						{template_house_80(1,1)}
spriteset (spr_small_apartments_02_snow, 						"src/gfx/small_apartments/small_apartments_02/building.png") 						{template_house_80(1,82)}

// Ground Tiles
spriteset (spr_small_apartments_02_ground, 						"src/gfx/small_apartments/small_apartments_02/ground.png") 						{template_house_80(1,1)}
spriteset (spr_small_apartments_02_ground_snow, 				"src/gfx/small_apartments/small_apartments_02/ground.png") 						{template_house_80(1,82)}

// Normal Sprites
spritelayout sprlay_small_apartments_02_norm {
	ground {
		sprite: spr_small_apartments_02_ground(construction_state);
	}
	building {
		sprite: spr_small_apartments_02(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_small_apartments_02_snow {
	ground {
		sprite: spr_small_apartments_02_ground_snow(construction_state);
	}
	building {
		sprite: spr_small_apartments_02_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_small_apartments_02_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_small_apartments_02_snow;
	sprlay_small_apartments_02_norm;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_small_apartments_02)
	{
		//1: PALETTE_CC_RED;			// Too in your face
		2: PALETTE_CC_LIGHT_BLUE;
		//1: PALETTE_CC_PINK;			// Looks silly
		//1: PALETTE_CC_DARK_BLUE;		// Too in your face
		//1: PALETTE_CC_GREEN;			// Too in your face
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

item(FEAT_HOUSES, item_small_apartments_02, 44, HOUSE_SIZE_1X1){
	property {
		substitute: 				02;
		name: 						string(NAME_SMALL_APARTMENTS_02);
		population: 				100;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1945,0xFFFF];
		minimum_lifetime: 			4;
		availability_mask: 			[ALL_TOWNZONES & ~bitmask(TOWNZONE_CENTRE), ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
		
		
		}
	graphics {
		default: 					switch_small_apartments_02_snow;
		construction_check: 		switch_small_flats_check_1;
		cargo_production: 			func_produce(5,2,1);
		colour: 					rand_recolor_small_apartments_02;
	}
}
// End small_apartments_02

// Begin small_apartments_03

// Building Sprites
spriteset (spr_small_apartments_03, 							"src/gfx/small_apartments/small_apartments_03/building.png") 						{template_house_80_2dir(1,1)}
spriteset (spr_small_apartments_03_snow, 						"src/gfx/small_apartments/small_apartments_03/building.png") 					{template_house_80_2dir(1,82)}

// Ground Tiles
spriteset (spr_small_apartments_03_ground, 					"src/gfx/small_apartments/small_apartments_03/ground.png") 						{template_house_80_2dir(1,1)}
spriteset (spr_small_apartments_03_ground_snow, 				"src/gfx/small_apartments/small_apartments_03/ground.png") 						{template_house_80_2dir(1,82)}

spritelayout sprlay_small_apartments_03_norm {
	ground {
		sprite: spr_small_apartments_03_ground(LOAD_TEMP(1));
	}
	building {
		sprite: spr_small_apartments_03(LOAD_TEMP(1));
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_small_apartments_03_snow {
	ground {
		sprite: spr_small_apartments_03_ground_snow(LOAD_TEMP(1));
	}
	building {
		sprite: spr_small_apartments_03_snow(LOAD_TEMP(1));
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

switch (FEAT_HOUSES, SELF, switch_small_apartments_03_sprites, [ 
 	// Check for snow and set the groundsprite in temporary variable 0
 	STORE_TEMP(GROUNDSPRITE_NORMAL, 0),
 	STORE_TEMP(terrain_type == TILETYPE_SNOW ? GROUNDSPRITE_SNOW : LOAD_TEMP(0), 0),
	// Check the rotation of the house
	STORE_TEMP(switch_road_adjacency(), 1),
	terrain_type == TILETYPE_SNOW])
	{1: sprlay_small_apartments_03_snow; sprlay_small_apartments_03_norm;}

// Construction Check
//switch (FEAT_HOUSES, SELF, switch_shops_02_con_check, switch_modern_office_pop_check()) {return;}	

random_switch (FEAT_HOUSES, SELF, rand_recolor_apartments_03)
	{
		1: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

item(FEAT_HOUSES, item_small_apartments_03, 45, HOUSE_SIZE_1X1){
	property {
		substitute: 					27;
		name: 							string(NAME_SMALL_APARTMENTS_03);
		population: 					120;
		accepted_cargos: 				[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 		80;
		removal_cost_multiplier: 		80;
		probability: 					1;
		years_available: 				[1950,0xFFFF];
		minimum_lifetime: 				5;
		availability_mask: 				[ALL_TOWNZONES, ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];		
		}
	graphics {
		default: 						switch_small_apartments_03_sprites;
		construction_check: (cargo_accepted_nearby_last_month(PASS) == 1 || cargo_accepted_nearby_this_month(PASS) == 1) ? 1 : 0; 	
			// Only build within the catchment area of a station which received passengers this month or last month
		cargo_production: 				func_produce(5,2,1);
		colour: 						rand_recolor_apartments_03;
	}
}

// End small_apartments_03

 // Begin temple_01

// Sprites
spriteset (spr_temple_01, 							"src/gfx/landmarks/temple_01/temple.png") 						{template_house_128(1,1)}
spriteset (spr_temple_01_snow, 						"src/gfx/landmarks/temple_01/temple.png") 						{template_house_128(1,130)}

// Normal Sprites
spritelayout sprlay_temple_01_north {
	ground {
		sprite: spr_temple_01(3);
	}
	building {
		sprite: spr_temple_01(2);
		hide_sprite: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_temple_01_east {
	ground {
		sprite: spr_temple_01(3);
	}
	building {
		sprite: spr_temple_01(2);
		xoffset: 1;
		yoffset: 3;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_temple_01_west {
	ground {
		sprite: spr_temple_01(3);
	}
	building {
		sprite: spr_temple_01(0);
		xoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_temple_01_south {
	ground {
		sprite: spr_temple_01(3);
	}
	building {
		sprite: spr_temple_01(1);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_temple_01_snow_north {
	ground {
		sprite: spr_temple_01_snow(3);
	}
	building {
		sprite: spr_temple_01_snow(2);
		hide_sprite: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_temple_01_snow_east {
	ground {
		sprite: spr_temple_01_snow(3);
	}
	building {
		sprite: spr_temple_01_snow(2);
		xoffset: 1;
		yoffset: 3;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_temple_01_snow_west {
	ground {
		sprite: spr_temple_01_snow(3);
	}
	building {
		sprite: spr_temple_01_snow(0);
		xoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_temple_01_snow_south {
	ground {
		sprite: spr_temple_01_snow(3);
	}
	building {
		sprite: spr_temple_01_snow(1);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_temple_01_north,terrain_type) {
	TILETYPE_SNOW: sprlay_temple_01_snow_north;
	sprlay_temple_01_north;
}
switch(FEAT_HOUSES, SELF, switch_temple_01_east,terrain_type) {
	TILETYPE_SNOW: sprlay_temple_01_snow_east;
	sprlay_temple_01_east;
}
switch(FEAT_HOUSES, SELF, switch_temple_01_west,terrain_type) {
	TILETYPE_SNOW: sprlay_temple_01_snow_west;
	sprlay_temple_01_west;
}
switch(FEAT_HOUSES, SELF, switch_temple_01_south,terrain_type) {
	TILETYPE_SNOW: sprlay_temple_01_snow_south;
	sprlay_temple_01_south;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_temple_01)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
	}

item(FEAT_HOUSES, item_temple_01, 66, HOUSE_SIZE_2X2){
	property {
		substitute: 				20; //Stadium since 2x2
		name: 						string(NAME_TEMPLE_01);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED,HOUSE_FLAG_CHURCH, HOUSE_FLAG_PROTECTED);
		population: 				20;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				6;
		years_available: 			[1700,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[ALL_TOWNZONES & ~bitmask(TOWNZONE_EDGE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];	
		}
	graphics {
		graphics_north: 			switch_temple_01_north;
		graphics_east: 				switch_temple_01_east;
		graphics_west: 				switch_temple_01_west;
		graphics_south: 			switch_temple_01_south;
		construction_check:			(nearby_tile_class(0,2) == TILE_CLASS_ROAD) ? 1 : 0;	//Check from North tile
		cargo_production: 			func_produce(1,1,1);
		colour: 					rand_recolor_temple_01;
	}
}

// End temple_01

// Begin townhouses_01

spriteset (spr_townhouses_01, 							"src/gfx/townhouses/townhouses_01/building.png") 						{template_house_1dir(1,1)}
spriteset (spr_townhouses_01_snow, 						"src/gfx/townhouses/townhouses_01/building.png") 						{template_house_1dir(1,80)}
spriteset (spr_townhouses_01_ground, 						"src/gfx/townhouses/townhouses_01/ground.png") 						{template_house_1dir(1,1)}
spriteset (spr_townhouses_01_ground_snow, 				"src/gfx/townhouses/townhouses_01/ground.png") 						{template_house_1dir(1,80)}

spritelayout sprlay_townhouses_01_norm {
	ground {
		sprite: spr_townhouses_01_ground(LOAD_TEMP(1));
	}
	building {
		sprite: spr_townhouses_01(LOAD_TEMP(1));
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_townhouses_01_snow {
	ground {
		sprite: spr_townhouses_01_ground_snow(LOAD_TEMP(1));
	}
	building {
		sprite: spr_townhouses_01_snow(LOAD_TEMP(1));
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

switch (FEAT_HOUSES, SELF, switch_townhouses_01_sprites, [ 
 	// Check for snow and set the groundsprite in temporary variable 0
 	STORE_TEMP(GROUNDSPRITE_NORMAL, 0),
 	STORE_TEMP(terrain_type == TILETYPE_SNOW ? GROUNDSPRITE_SNOW : LOAD_TEMP(0), 0),
	// Check the rotation of the house
	STORE_TEMP(switch_road_adjacency(), 1),
	terrain_type == TILETYPE_SNOW])
	{1: sprlay_townhouses_01_snow; sprlay_townhouses_01_norm;}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_townhouses_01)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}


item(FEAT_HOUSES, item_townhouses_01, 06, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						TTD_STR_TOWN_BUILDING_NAME_HOUSES_1;
		population: 				30;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1945,0xFFFF];
		minimum_lifetime: 			2;
		availability_mask: 			[bitmask(TOWNZONE_INNER_SUBURB,TOWNZONE_CENTRE), ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
		
		}
	graphics {
		default: 					switch_townhouses_01_sprites;
		construction_check: 		switch_house_office_gap;
		cargo_production: 			func_produce(4,1,1);
		colour: 					rand_recolor_townhouses_01;
	}
}

// End townhouses_01

// Begin townhouses_02

spriteset (spr_townhouses_02, 							"src/gfx/townhouses/townhouses_02/building.png") 						{template_house_1dir(1,1)}
spriteset (spr_townhouses_02_snow, 						"src/gfx/townhouses/townhouses_02/building.png") 						{template_house_1dir(1,80)}
spriteset (spr_townhouses_02_ground, 						"src/gfx/townhouses/townhouses_02/ground.png") 						{template_house_1dir(1,1)}
spriteset (spr_townhouses_02_ground_snow, 				"src/gfx/townhouses/townhouses_02/ground.png") 						{template_house_1dir(1,80)}

spritelayout sprlay_townhouses_02_norm {
	ground {
		sprite: spr_townhouses_02_ground(LOAD_TEMP(1));
	}
	building {
		sprite: spr_townhouses_02(LOAD_TEMP(1));
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_townhouses_02_snow {
	ground {
		sprite: spr_townhouses_02_ground_snow(LOAD_TEMP(1));
	}
	building {
		sprite: spr_townhouses_02_snow(LOAD_TEMP(1));
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

switch (FEAT_HOUSES, SELF, switch_townhouses_02_sprites, [ 
 	// Check for snow and set the groundsprite in temporary variable 0
 	STORE_TEMP(GROUNDSPRITE_NORMAL, 0),
 	STORE_TEMP(terrain_type == TILETYPE_SNOW ? GROUNDSPRITE_SNOW : LOAD_TEMP(0), 0),
	// Check the rotation of the house
	STORE_TEMP(switch_road_adjacency(), 1),
	terrain_type == TILETYPE_SNOW])
	{1: sprlay_townhouses_02_snow; sprlay_townhouses_02_norm;}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_townhouses_02)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}


item(FEAT_HOUSES, item_townhouses_02, 05, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						TTD_STR_TOWN_BUILDING_NAME_HOUSES_1;
		population: 				30;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1945,0xFFFF];
		minimum_lifetime: 			2;
		availability_mask: 			[bitmask(TOWNZONE_INNER_SUBURB,TOWNZONE_CENTRE), ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
		
		}
	graphics {
		default: 					switch_townhouses_02_sprites;
		construction_check: 		switch_house_office_gap;
		cargo_production: 			func_produce(4,1,1);
		colour: 					rand_recolor_townhouses_02;
	}
}

// End townhouses_02
