/* *** Begin Header *** */

/*
*	Welcome to JPplusBuildings!
*/

grf {
	grfid: "KR04";
	name: string(STR_GRF_NAME);
	desc: string(STR_GRF_DESC);
	version: 1;
	min_compatible_version: 1;
	url: string(STR_WEBSITE);
}

if (version_openttd(1,10,0,28004) > openttd_version) {
	error(FATAL, string(STR_ERROR_GAME_VERSION));
}

disable_item(FEAT_HOUSES);

/* Use sidewalks on desert roads, as in Temperate. */
desert_paved_roads = 1;

/* *** End Header *** */

/* Begin cargotable */

cargotable {
	PASS, 		// Obviously
	MAIL, 		// Obviously
	GOOD, 		// For Commercial Buildings
	FOOD, 
	BEER, 
	WSTE, 		// Kept in for compatibility with ITI 
	PETR,		// For Petrol Stations	
}

/* Functions checking for service of cargoes */

// Passenger Service
switch(FEAT_HOUSES, SELF, FuncServicePASS, 	(cargo_accepted_nearby_last_month(PASS) == 1 || cargo_accepted_nearby_this_month(PASS) == 1)) {return;}
switch(FEAT_HOUSES, SELF, FuncNoServicePASS, (cargo_accepted_nearby_last_month(PASS) == 0 && cargo_accepted_nearby_this_month(PASS) == 0)) {return;}
// Petroleum Fuels Service - for Petrol Stations
switch(FEAT_HOUSES, SELF, FuncServicePETR, (cargo_accepted_nearby_last_month(PETR) == 1 || cargo_accepted_nearby_this_month(PETR) == 1)) {return;}

/* Production loop, shared by all houses. Individual production rates stored in temporary registers in the function below.*/

switch (FEAT_HOUSES, SELF, switch_alt_production, getbits(extra_callback_info1, 0, 8)) {
	0: (PASS * 256) + (abs(extra_callback_info2 % 8) == 0) * LOAD_TEMP(1);
	1: (MAIL * 256) + (abs(extra_callback_info2 % 8) == 0) * LOAD_TEMP(2);
	return CB_RESULT_HOUSE_NO_MORE_PRODUCTION;
}

/* Production levels for passengers and mail, are passed as arguments to this function for use in the production loop. */
switch (FEAT_HOUSES, SELF, func_produce, pass, mail, [STORE_TEMP(pass, 1), STORE_TEMP(mail, 2)] ) {switch_alt_production;}

/* End cargotable */

/* Begin HouseGap */

/* 	
	Function for Houses and Town Houses, so they cannot build within 2 tiles of;
	
	* Building Class 2 - Shops and Offices
	* Building Class 5 - Skyscrapers

	If all tiles are neither Class 2 or Class 5, then HouseOfficeGap will return 1, and therefore allow construction
*/

switch(FEAT_HOUSES, SELF, HouseOfficeGap,
	// Shops and Offices
	nearby_tile_house_class(0,1) != 258 &&
	nearby_tile_house_class(0,-1) != 258 &&
	nearby_tile_house_class(1,0) != 258 &&
	nearby_tile_house_class(1,1) != 258 &&
	nearby_tile_house_class(1,-1) != 258 &&
	nearby_tile_house_class(-1,0) != 258 &&
	nearby_tile_house_class(-1,1) != 258 &&
	nearby_tile_house_class(-1,-1) != 258 &&
	nearby_tile_house_class(-2,-2) != 258 &&
	nearby_tile_house_class(-2,-1) != 258 &&
	nearby_tile_house_class(-2,0) != 258 &&
	nearby_tile_house_class(-2,1) != 258 &&
	nearby_tile_house_class(-2,2) != 258 &&
	nearby_tile_house_class(-1,-2) != 258 &&
	nearby_tile_house_class(-1,2) != 258 &&
	nearby_tile_house_class(0,-2) != 258 &&
	nearby_tile_house_class(0,-2) != 258 &&
	nearby_tile_house_class(1,-2) != 258 &&
	nearby_tile_house_class(1,-2) != 258 &&
	nearby_tile_house_class(2,-2) != 258 &&
	nearby_tile_house_class(2,-1) != 258 &&
	nearby_tile_house_class(2,0) != 258 &&
	nearby_tile_house_class(2,1) != 258 &&
	nearby_tile_house_class(2,2) != 258 &&
	// Skyscrapers
	nearby_tile_house_class(0,1) != 261 &&
	nearby_tile_house_class(0,-1) != 261 &&
	nearby_tile_house_class(1,0) != 261 &&
	nearby_tile_house_class(1,1) != 261 &&
	nearby_tile_house_class(1,-1) != 261 &&
	nearby_tile_house_class(-1,0) != 261 &&
	nearby_tile_house_class(-1,1) != 261 &&
	nearby_tile_house_class(-1,-1) != 261 &&
	nearby_tile_house_class(-2,-2) != 261 &&
	nearby_tile_house_class(-2,-1) != 261 &&
	nearby_tile_house_class(-2,0) != 261 &&
	nearby_tile_house_class(-2,1) != 261 &&
	nearby_tile_house_class(-2,2) != 261 &&
	nearby_tile_house_class(-1,-2) != 261 &&
	nearby_tile_house_class(-1,2) != 261 &&
	nearby_tile_house_class(0,-2) != 261 &&
	nearby_tile_house_class(0,-2) != 261 &&
	nearby_tile_house_class(1,-2) != 261 &&
	nearby_tile_house_class(1,-2) != 261 &&
	nearby_tile_house_class(2,-2) != 261 &&
	nearby_tile_house_class(2,-1) != 261 &&
	nearby_tile_house_class(2,0) != 261 &&
	nearby_tile_house_class(2,1) != 261 &&
	nearby_tile_house_class(2,2) != 261
		){return;}

/* End HouseGap */

/* Begin population */

// Function to add the the numbers of residential building, with a population factor based on size
switch(FEAT_HOUSES, SELF, FuncPopulationAdder,
	
	// Houses
	(other_house_count_town(26)*2)+ 	// Naganuma House
	(other_house_count_town(65)*2)+ 	// Nishikawa House

	// Takamaro Houses
	(other_house_count_town(52)*3)+ 	// Takamaro_01
	(other_house_count_town(53)*3)+ 	// Takamaro_02
	(other_house_count_town(54)*3)+ 	// Takamaro_03
	(other_house_count_town(55)*3)+ 	// Takamaro_04

	// Town Houses
	(other_house_count_town(05)*3)+ 	// Townhouses_02
	(other_house_count_town(06)*3)+ 	// Townhouses_01
	
	// Apartments		
	(other_house_count_town(27)*10)+ 	// Apartments_01
	(other_house_count_town(30)*10)+ 	// Apartments_02
	(other_house_count_town(56)*10)+ 	// Apartments_04	

	// Small Apartments
	(other_house_count_town(02)*4)+ 	// Small Apartments 01
	(other_house_count_town(44)*4)+ 	// Small Apartments 02
	(other_house_count_town(45)*4) 		// Small Apartments 03
	) {return;}

/* Function to check if City */
switch (FEAT_HOUSES, PARENT, IsCity, is_city == 1) {return;}

/* Population must be over a certain level */
switch (FEAT_HOUSES, PARENT, PopOver30k, population > 30000) {return;}

/* Modern Office Population Check */
switch (FEAT_HOUSES, SELF, ModernOfficePopCheck, 
	// Residential population must be greater than the amount shown below
	(FuncPopulationAdder() > ( (other_class_count_town(3) * 30) + ((1 + same_class_count_town) * 60) ) ) ) {return;}

/* Note: Check population is inaccurate when generating towns. This will only work properly when growing towns in-game. */
/*
switch (FEAT_HOUSES, PARENT, HasPopulation, required, population >= required) {return;}

/* End population */

/* Begin historical district */

/* Note: Per NML specs, returns 256+X (X = 0..255) if the house has been defined by this NewGRF with building_class X */

switch (FEAT_HOUSES, SELF, IsTileHouseClass, x, y, class_num, nearby_tile_house_class(x,y) == 256 + class_num) {return;}

switch (FEAT_HOUSES, SELF, IsAdjacentToHouseClass, class_num,
	// One square radius
	IsTileHouseClass(-1, 0, class_num) ||
	IsTileHouseClass(-1,-1, class_num) ||
	IsTileHouseClass(-1, 1, class_num) ||
	IsTileHouseClass( 0,-1, class_num) ||
	IsTileHouseClass( 0, 1, class_num) ||
	IsTileHouseClass( 1, 0, class_num) ||
	IsTileHouseClass( 1,-1, class_num) ||
	IsTileHouseClass( 1, 1, class_num) ||
	// Two square radius
	IsTileHouseClass(-2,-2, class_num) ||
	IsTileHouseClass(-2,-1, class_num) ||
	IsTileHouseClass(-2, 0, class_num) ||
	IsTileHouseClass(-2, 1, class_num) ||
	IsTileHouseClass(-2, 2, class_num) ||
	IsTileHouseClass(-1,-2, class_num) ||
	IsTileHouseClass(-1, 2, class_num) ||
	IsTileHouseClass( 0,-2, class_num) ||
	IsTileHouseClass( 0, 2, class_num) ||
	IsTileHouseClass( 1,-2, class_num) ||
	IsTileHouseClass( 1, 2, class_num) ||
	IsTileHouseClass( 2,-2, class_num) ||
	IsTileHouseClass( 2,-1, class_num) ||
	IsTileHouseClass( 2, 0, class_num) ||
	IsTileHouseClass( 2, 1, class_num) ||
	IsTileHouseClass( 2, 2, class_num) ||
	// Three square radius
	IsTileHouseClass(-3,-3, class_num) ||
	IsTileHouseClass(-3,-2, class_num) ||
	IsTileHouseClass(-3,-1, class_num) ||
	IsTileHouseClass(-3, 0, class_num) ||
	IsTileHouseClass(-3, 1, class_num) ||
	IsTileHouseClass(-3, 2, class_num) ||
	IsTileHouseClass(-3, 3, class_num) ||
	IsTileHouseClass(-1,-3, class_num) ||
	IsTileHouseClass(-1, 3, class_num) ||
	IsTileHouseClass( 0,-3, class_num) ||
	IsTileHouseClass( 0, 3, class_num) ||
	IsTileHouseClass( 1,-3, class_num) ||
	IsTileHouseClass( 1, 3, class_num) ||
	IsTileHouseClass( 2,-3, class_num) ||
	IsTileHouseClass( 2, 3, class_num) ||
	IsTileHouseClass( 3,-3, class_num) ||
	IsTileHouseClass( 3,-2, class_num) ||
	IsTileHouseClass( 3,-1, class_num) ||
	IsTileHouseClass( 3, 0, class_num) ||
	IsTileHouseClass( 3, 1, class_num) ||
	IsTileHouseClass( 3, 2, class_num) ||
	IsTileHouseClass( 3, 3, class_num) ||
	// Four square radius - adjustments to take into consideration that Temple is 2x2
	IsTileHouseClass(-4,-4, class_num) ||
	IsTileHouseClass(-4,-3, class_num) ||
	IsTileHouseClass(-4,-2, class_num) ||
	IsTileHouseClass(-4,-1, class_num) ||
	IsTileHouseClass(-4, 0, class_num) ||
	IsTileHouseClass(-4, 1, class_num) ||
	IsTileHouseClass(-4, 2, class_num) ||
	IsTileHouseClass(-4, 3, class_num) ||
	IsTileHouseClass(-4, 4, class_num) ||
	IsTileHouseClass(-3,-4, class_num) ||
	IsTileHouseClass(-2,-4, class_num) ||
	IsTileHouseClass(-1,-4, class_num) ||
	IsTileHouseClass( 0,-4, class_num) ||
	IsTileHouseClass( 1,-4, class_num) ||
	IsTileHouseClass( 2,-4, class_num) ||
	IsTileHouseClass( 3,-4, class_num) ||
	IsTileHouseClass( 4,-4, class_num)
	){return;}


/* Function for Buildings that cannot build near Temple (Building Class 3) */ 
switch (FEAT_HOUSES, SELF, BanFromHistDistrict, IsAdjacentToHouseClass(3) == 0 
	) {return;}

/* Function for Buildings that can build near the Temple (Building Class 3) to create a Historical District*/ 
switch (FEAT_HOUSES, SELF, AllowInHistDistrict, IsAdjacentToHouseClass(3) != 0 
	) {return;}

/* End historical district */

/* Begin Functions */

/* Building Classes
*
*	Class 0
*	Buildings in class: House, Market, Warehouse, Fountain, Statue
*
*	Class 1
*	Parks cannot be within 2 tiles of another park
*
*	Class 2
*	Skyscrapers/office towers can only build within 5 tiles of another skyscraper/office towers
*	Buildings in class: skyscrapers, office towers
*
*	Class 3
*	Temple
*
*	Class 4
*	Old houses (must be within 2 tiles of another old house, to prevent sparse town growth with house limit)
*
*	Class 5
*	Skyscrapers
*
*/

// Small Flats cannot build within 1 tile of a modern office building unless no passenger service is provided to the tile
switch(FEAT_HOUSES, SELF, ClassTwoWithinOneTile,
	// Shops and Offices
	nearby_tile_house_class(0,1) == 258 ||
	nearby_tile_house_class(0,-1) == 258 ||
	nearby_tile_house_class(1,0) == 258 ||
	nearby_tile_house_class(1,1) == 258 ||
	nearby_tile_house_class(1,-1) == 258 ||
	nearby_tile_house_class(-1,0) == 258 ||
	nearby_tile_house_class(-1,1) == 258 ||
	nearby_tile_house_class(-1,-1) == 258 ||
	// Skyscrapers
	nearby_tile_house_class(0,1) == 261 ||
	nearby_tile_house_class(0,-1) == 261 ||
	nearby_tile_house_class(1,0) == 261 ||
	nearby_tile_house_class(1,1) == 261 ||
	nearby_tile_house_class(1,-1) == 261 ||
	nearby_tile_house_class(-1,0) == 261 ||
	nearby_tile_house_class(-1,1) == 261 ||
	nearby_tile_house_class(-1,-1) == 261
		){return;}

// Function looking for no Passenger service, but there is a Class Two Building nearby
switch(FEAT_HOUSES, SELF, NoPassBesideModernOffice,
	ClassTwoWithinOneTile() &&
	FuncNoServicePASS()
		){return;}

// Small Apartments Check - There must be Passenger Service, but if there is not, and there is a Class Two Building nearby, allow building
switch(FEAT_HOUSES, SELF, SmallApartmentsCheck,
	NoPassBesideModernOffice() ||
	FuncServicePASS()
		){return;}

// Check for road (and stations) in adjacent tiles functions
//switch (FEAT_HOUSES, SELF, HasRoadAdjacentNW, nearby_tile_class( 0,-1) == TILE_CLASS_ROAD || nearby_tile_class( 0,-1) == TILE_CLASS_STATION) {return;}
switch (FEAT_HOUSES, SELF, HasRoadAdjacentSE, nearby_tile_class( 0, 1) == TILE_CLASS_ROAD || nearby_tile_class( 0, 1) == TILE_CLASS_STATION) {return;}
switch (FEAT_HOUSES, SELF, HasRoadAdjacentSW, nearby_tile_class( 1, 0) == TILE_CLASS_ROAD || nearby_tile_class( 1, 0) == TILE_CLASS_STATION) {return;}

switch (FEAT_HOUSES, SELF, HasRoadAdjacentSE2x2, nearby_tile_class(0,2) == TILE_CLASS_ROAD || nearby_tile_class(0,2) == TILE_CLASS_STATION) {return;}

switch (FEAT_HOUSES, SELF, HasRoadAdjacentNWSW, 
	nearby_tile_class( 0,-1) == TILE_CLASS_ROAD || 
	nearby_tile_class( 0,-1) == TILE_CLASS_STATION || 
	nearby_tile_class( 1, 0) == TILE_CLASS_ROAD || 
	nearby_tile_class( 1, 0) == TILE_CLASS_STATION
	) {return;}

switch (FEAT_HOUSES, SELF, HasTrackAdjacent, 
	nearby_tile_class( 0,-1) == TILE_CLASS_RAIL || 
	nearby_tile_class( 0, 1) == TILE_CLASS_RAIL || 
	nearby_tile_class(-1, 0) == TILE_CLASS_RAIL || 
	nearby_tile_class( 1, 0) == TILE_CLASS_RAIL
	) {return;}

/* House is Unique */
switch (FEAT_HOUSES, SELF, IsUniqueHouse, same_house_count_town == 0) {return;}

/* Can only appear when town is being generated */
switch (FEAT_HOUSES, SELF, OnGenerationOnly, generating_town == 1) {return;}

/* Probabilities */
switch (FEAT_HOUSES, SELF, RandomBitsFour, random_bits % 4 == 0) {return;}

/* Radius Checks */
/* There is a building of the same class within a radius of 2, or there is no building of that class at all in the town */
switch (FEAT_HOUSES, SELF, WithinTwoOfSameClass, nearest_house_matching_criterion(2, SEARCH_HOUSE_BY_CLASS) >= 1 || same_class_count_town == 0 ) {return;}
switch (FEAT_HOUSES, SELF, WithinThreeOfSameClass, nearest_house_matching_criterion(3, SEARCH_HOUSE_BY_CLASS) >= 1 || same_class_count_town == 0 ) {return;}

switch (FEAT_HOUSES, SELF, ClusterBuildingClass, 
	same_class_count_town == 0 || 
	(WithinThreeOfSameClass()  && HasTrackAdjacent() ) ||
	WithinTwoOfSameClass()
	) {return;}

switch (FEAT_HOUSES, SELF, ThirtyTileGap, nearest_house_matching_criterion(30, SEARCH_HOUSE_BY_TYPE) == 0 ) {return;}

switch (FEAT_HOUSES, SELF, IfFirstSkyscraper, 
((same_class_count_town == 0 && IsAdjacentToHouseClass(2)) || nearest_house_matching_criterion(2, SEARCH_HOUSE_BY_CLASS) >= 1 )) {return;}

//switch (FEAT_HOUSES, SELF, IsUniqueInRadius, radius, nearest_house_matching_criterion(radius, SEARCH_HOUSE_BY_TYPE) == 0) {return;}

//switch (FEAT_HOUSES, SELF, HasSameClassNearby, radius, nearest_house_matching_criterion(radius, SEARCH_HOUSE_BY_CLASS) ) {0: return 0; return 1;}

//switch (FEAT_HOUSES, SELF, IsFirstHouseOfClass, same_class_count_town == 0) {return;}

/* End Functions */

// Begin Sprite Templates


// Only 1 sprites to be used in four directions
template template_house_con(x, y) {   
	//left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    sw: [ x,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    nw: [ x,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    ne: [ x,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
}

template template_house_1dir(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    sw: [ x,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    nw: [ x,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    ne: [ x,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
}

template template_house_con_phases(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    nw: [ x+130,	y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    ne: [ x+195,	y,		64,		78,		-31,		-46,	NOCROP | ANIM]
}

template template_house_80_1dir(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    sw: [ x,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    nw: [ x,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    ne: [ x,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
}

template template_house_80_2dir(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    nw: [ x,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    ne: [ x+65,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
}

template template_house_80(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    nw: [ x+130,	y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    ne: [ x+195,	y,		64,		80,		-31,		-48,	NOCROP | ANIM]
}

template template_house_100_1dir(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		100,	-31,		-68,	NOCROP | ANIM]
    sw: [ x,		y,		64,		100,	-31,		-68,	NOCROP | ANIM]
    nw: [ x,		y,		64,		100,	-31,		-68,	NOCROP | ANIM]
    ne: [ x,		y,		64,		100,	-31,		-68,	NOCROP | ANIM]
}

template template_house_100(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		100,	-31,		-68,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		100,	-31,		-68,	NOCROP | ANIM]
    nw: [ x+130,	y,		64,		100,	-31,		-68,	NOCROP | ANIM]
    ne: [ x+195,	y,		64,		100,	-31,		-68,	NOCROP | ANIM]
}

template template_house_128_1dir(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		128,	-31,		-96,	NOCROP | ANIM]
    sw: [ x,		y,		64,		128,	-31,		-96,	NOCROP | ANIM]
    nw: [ x,		y,		64,		128,	-31,		-96,	NOCROP | ANIM]
    ne: [ x,		y,		64,		128,	-31,		-96,	NOCROP | ANIM]
}

template template_house_128(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		128,	-31,		-96,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		128,	-31,		-96,	NOCROP | ANIM]
    nw: [ x+130,	y,		64,		128,	-31,		-96,	NOCROP | ANIM]
    ne: [ x+195,	y,		64,		128,	-31,		-96,	NOCROP | ANIM]
}

template template_house_200(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		200,	-31,		-168,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		200,	-31,		-168,	NOCROP | ANIM]
    nw: [ x+130,	y,		64,		200,	-31,		-168,	NOCROP | ANIM]
    ne: [ x+195,	y,		64,		200,	-31,		-168,	NOCROP | ANIM]
}

template template_house_250(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		250,	-31,		-218,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		250,	-31,		-218,	NOCROP | ANIM]  
    nw: [ x+130,	y,		64,		250,	-31,		-218,	NOCROP | ANIM]
    ne: [ x+195,	y,		64,		250,	-31,		-218,	NOCROP | ANIM]
}

template template_house_250_wide(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		75,		250,	-36,		-218,	NOCROP | ANIM]
    sw: [ x+76,		y,		75,		250,	-36,		-218,	NOCROP | ANIM]  
    nw: [ x+152,	y,		75,		250,	-36,		-218,	NOCROP | ANIM]
    ne: [ x+228,	y,		75,		250,	-36,		-218,	NOCROP | ANIM]
}


template template_house_2dir(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    nw: [ x,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    ne: [ x+65,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
}

/* Rotation checks for buildings to face roads */

// Bus stops are TILE_CLASS_STATION, not TILE_CLASS_ROAD. If the building is not adjacent to a road (below) it may be adacent to a bus stop which it should face.
// Note: This will make buildings truly not adjacent to a road, but adjacent to a station (of any type) face the station.
switch (FEAT_HOUSES, SELF, switch_station_adj_ne, nearby_tile_class(-1,0) == TILE_CLASS_STATION)
	{1: return 3; return 0;}
switch (FEAT_HOUSES, SELF, switch_station_adj_nw, nearby_tile_class(0,-1) == TILE_CLASS_STATION)
	{1: return 2; switch_station_adj_ne;}
switch (FEAT_HOUSES, SELF, switch_station_adj_sw, nearby_tile_class(1,0) == TILE_CLASS_STATION)
	{1: return 1; switch_station_adj_nw;}
switch (FEAT_HOUSES, SELF, switch_station_adj_se, nearby_tile_class(0,1) == TILE_CLASS_STATION)
	{1: return 0; switch_station_adj_sw;}
// Check for roads first
switch (FEAT_HOUSES, SELF, switch_road_adj_ne, nearby_tile_class(-1,0) == TILE_CLASS_ROAD)
	{1: return 3; switch_station_adj_se;}
switch (FEAT_HOUSES, SELF, switch_road_adj_nw, nearby_tile_class(0,-1) == TILE_CLASS_ROAD)
	{1: return 2; switch_road_adj_ne;}
switch (FEAT_HOUSES, SELF, switch_road_adj_sw, nearby_tile_class(1,0) == TILE_CLASS_ROAD)
	{1: return 1; switch_road_adj_nw;}
switch (FEAT_HOUSES, SELF, switch_road_adj_se, nearby_tile_class(0,1) == TILE_CLASS_ROAD)
	{1: return 0; switch_road_adj_sw;}

switch (FEAT_HOUSES,SELF, switch_road_adjacency, 1) {switch_road_adj_se;}

// End Sprite Templates
// Begin apartments_01

// Building Sprites
spriteset (spr_apartments_01, 							"src/gfx/apartments/apartments_01/building.png") 						{template_house_con_phases(1,1)}
spriteset (spr_apartments_01_snow, 						"src/gfx/apartments/apartments_01/building.png") 						{template_house_con_phases(1,80)}

// Ground Tiles
spriteset (spr_apartments_01_ground, 					"src/gfx/apartments/apartments_01/ground.png") 						{template_house_1dir(1,1)}
spriteset (spr_apartments_01_ground_snow, 				"src/gfx/apartments/apartments_01/ground.png") 						{template_house_1dir(1,80)}

// Normal Sprites
spritelayout sprlay_apartments_01_norm {
	ground {
		sprite: spr_apartments_01_ground;
	}
	building {
		sprite: spr_apartments_01(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_apartments_01_snow {
	ground {
		sprite: spr_apartments_01_ground_snow;
	}
	building {
		sprite: spr_apartments_01_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_apartments_01_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_apartments_01_snow;
	sprlay_apartments_01_norm;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_switch_recolor_apartments_01)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_apartments_01_con_check, 	
	FuncServicePASS() &&			// Only build within the catchment area of a station which received passengers this month or last month
	BanFromHistDistrict()			// Do not allow building near Temple
	) {return;}	

item(FEAT_HOUSES, item_apartments_01, 27, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						string(NAME_APARTMENTS_01);
		population: 				150;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1960,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE,TOWNZONE_INNER_SUBURB,TOWNZONE_OUTER_SUBURB), ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
				
		}
	graphics {
		default: 					switch_apartments_01_snow;
		construction_check: 		switch_apartments_01_con_check;
		cargo_production: 			func_produce(13,4);
		colour: 					rand_switch_recolor_apartments_01;
	}
}

// End apartments_01

// Begin apartments_02

// Building Sprites
spriteset (spr_apartments_02, 							"src/gfx/apartments/apartments_02/building.png") 						{template_house_128(1,1)}
spriteset (spr_apartments_02_snow, 						"src/gfx/apartments/apartments_02/building.png") 						{template_house_128(1,130)}

// Ground Tiles
spriteset (spr_apartments_02_ground, 					"src/gfx/apartments/apartments_02/ground.png") 						{template_house_128(1,1)}
spriteset (spr_apartments_02_ground_snow, 				"src/gfx/apartments/apartments_02/ground.png") 						{template_house_128(1,130)}

// Normal Sprites
spritelayout sprlay_apartments_02_norm {
	ground {
		sprite: spr_apartments_02_ground(construction_state);
	}
	building {
		sprite: spr_apartments_02(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_apartments_02_snow {
	ground {
		sprite: spr_apartments_02_ground_snow(construction_state);
	}
	building {
		sprite: spr_apartments_02_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_apartments_02_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_apartments_02_snow;
	sprlay_apartments_02_norm;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_apartments_02)
	{
		//1: PALETTE_CC_RED;			// too in your face
		2: PALETTE_CC_LIGHT_BLUE;
		//1: PALETTE_CC_PINK;			// too silly
		1: PALETTE_CC_DARK_BLUE;
		//1: PALETTE_CC_GREEN;			// nah
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_apartments_02_con_check, 	
	FuncServicePASS() &&			// Only build within the catchment area of a station which received passengers this month or last month
	BanFromHistDistrict()			// Do not allow building near Temple
	) {return;}	

item(FEAT_HOUSES, item_apartments_02, 30, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						string(NAME_APARTMENTS_02);
		population: 				150;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1945,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE,TOWNZONE_INNER_SUBURB,TOWNZONE_OUTER_SUBURB), ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
				
		}
	graphics {
		default: 					switch_apartments_02_snow;
		construction_check: 		switch_apartments_02_con_check;
		cargo_production: 			func_produce(13,4);
		colour: 					rand_recolor_apartments_02;
	}
}

// End apartments_02

// Begin apartments_04

// Building Sprites
spriteset (spr_build_apartments_04_north, 							"src/gfx/apartments/apartments_04/building.png") 						{template_house_128(1,1)}
spriteset (spr_build_apartments_04_west, 							"src/gfx/apartments/apartments_04/building.png") 						{template_house_128(261,1)}

spriteset (spr_build_apartments_04_north_snow, 						"src/gfx/apartments/apartments_04/building.png") 						{template_house_128(1,130)}
spriteset (spr_build_apartments_04_west_snow, 						"src/gfx/apartments/apartments_04/building.png") 						{template_house_128(261,130)}
// Ground Sprites
spriteset (spr_ground_apartments_04, 							"src/gfx/apartments/apartments_04/ground.png") 						{template_house_128(1,1)}
spriteset (spr_ground_apartments_04_snow, 						"src/gfx/apartments/apartments_04/ground.png") 						{template_house_128(1,130)}

// Normal Sprites
spritelayout sprlay_apartments_04_north {
	ground {
		sprite: spr_ground_apartments_04(construction_state);
	}
	building {
		sprite: spr_build_apartments_04_north(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_apartments_04_west {
	ground {
		sprite: spr_ground_apartments_04(construction_state);
	}
	building {
		sprite: spr_build_apartments_04_west(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_apartments_04_snow_north {
	ground {
		sprite: spr_ground_apartments_04_snow(construction_state);
	}
	building {
		sprite: spr_build_apartments_04_north_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_apartments_04_snow_west {
	ground {
		sprite: spr_ground_apartments_04_snow(construction_state);
	}
	building {
		sprite: spr_build_apartments_04_west_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_apartments_04_north,terrain_type) {
	TILETYPE_SNOW: sprlay_apartments_04_snow_north;
	sprlay_apartments_04_north;
}
switch(FEAT_HOUSES, SELF, switch_apartments_04_west,terrain_type) {
	TILETYPE_SNOW: sprlay_apartments_04_snow_west;
	sprlay_apartments_04_west;
}


// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_apartments_04)
	{
		1: PALETTE_CC_RED;			// too in your face
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;			// too silly
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_apartments_04_con_check, 	
	FuncServicePASS() &&			// Only build within the catchment area of a station which received passengers this month or last month
	BanFromHistDistrict()			// Do not allow building near Temple
	) {return;}	

item(FEAT_HOUSES, item_apartments_04, 56, HOUSE_SIZE_2X1){
	property {
		substitute: 				76; 													
		name: 						string(NAME_APARTMENTS_04);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED);
		population: 				100;
		accepted_cargos: 			[[PASS, 8],[MAIL, 4],[GOOD, 4]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1960,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE,TOWNZONE_INNER_SUBURB,TOWNZONE_OUTER_SUBURB), ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
		building_class:				0;	
		}
	graphics {
		graphics_north: 			switch_apartments_04_north;
		graphics_west: 				switch_apartments_04_west;
		construction_check: 		switch_apartments_04_con_check; 	
		cargo_production: 			func_produce(13,4);
		colour: 					rand_recolor_apartments_04;
	} 					
}

// End apartments_04

// Begin naganuma_house

spriteset (spr_naganuma_house, 								"src/gfx/houses/naganuma/building.png") 						{template_house_2dir(1,1)}
spriteset (spr_naganuma_house_snow, 						"src/gfx/houses/naganuma/building.png") 						{template_house_2dir(1,80)}
spriteset (spr_naganuma_house_ground, 						"src/gfx/houses/naganuma/ground.png") 						{template_house_2dir(1,1)}
spriteset (spr_naganuma_house_ground_snow, 					"src/gfx/houses/naganuma/ground.png") 						{template_house_2dir(1,80)}

spritelayout sprlay_naganuma_house_norm {
	ground {
		sprite: spr_naganuma_house_ground(LOAD_TEMP(1));
	}
	building {
		sprite: spr_naganuma_house(LOAD_TEMP(1));
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_naganuma_house_snow {
	ground {
		sprite: spr_naganuma_house_ground_snow(LOAD_TEMP(1));
	}
	building {
		sprite: spr_naganuma_house_snow(LOAD_TEMP(1));
	}
}

switch (FEAT_HOUSES, SELF, switch_naganuma_house_sprites, [ 
 	// Check for snow and set the groundsprite in temporary variable 0
 	STORE_TEMP(GROUNDSPRITE_NORMAL, 0),
 	STORE_TEMP(terrain_type == TILETYPE_SNOW ? GROUNDSPRITE_SNOW : LOAD_TEMP(0), 0),
	// Check the rotation of the house
	STORE_TEMP(switch_road_adjacency(), 1),
	terrain_type == TILETYPE_SNOW])
	{1: sprlay_naganuma_house_snow; sprlay_naganuma_house_norm;}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_naganuma_house)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_naganuma_house_con_check, 
	HouseOfficeGap() &&				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
	BanFromHistDistrict()			// Cannot build close to Temple
	) {return;}	

item(FEAT_HOUSES, item_naganuma_house, 26, HOUSE_SIZE_1X1){
	property {
		substitute: 				26;
		name: 						string(NAME_NAGANUMA_HOUSE);
		population: 				20;	
		accepted_cargos: 			[[PASS, 2],[MAIL, 1]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1870,0xFFFF];
		minimum_lifetime: 			2;
		availability_mask: 			[ALL_TOWNZONES & ~bitmask(TOWNZONE_CENTRE), ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];	// House office gap to restrict placement in inner zones
		building_class: 			0;
		
		}
	graphics {
		default: 					switch_naganuma_house_sprites;
		construction_check: 		switch_naganuma_house_con_check;
		cargo_production: 			func_produce(2,1);
		colour: 					rand_recolor_naganuma_house;
	}
}

// End naganuma_house

// Begin nishikawa_house

spriteset (spr_nishikawa_house, 								"src/gfx/houses/nishikawa/building.png") 						{template_house_2dir(1,1)}
spriteset (spr_nishikawa_house_snow, 						"src/gfx/houses/nishikawa/building.png") 						{template_house_2dir(1,80)}
spriteset (spr_nishikawa_house_ground, 						"src/gfx/houses/nishikawa/ground.png") 						{template_house_2dir(1,1)}
spriteset (spr_nishikawa_house_ground_snow, 					"src/gfx/houses/nishikawa/ground.png") 						{template_house_2dir(1,80)}

spritelayout sprlay_nishikawa_house_norm {
	ground {
		sprite: spr_nishikawa_house_ground(LOAD_TEMP(1));
	}
	building {
		sprite: spr_nishikawa_house(LOAD_TEMP(1));
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_nishikawa_house_snow {
	ground {
		sprite: spr_nishikawa_house_ground_snow(LOAD_TEMP(1));
	}
	building {
		sprite: spr_nishikawa_house_snow(LOAD_TEMP(1));
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

switch (FEAT_HOUSES, SELF, switch_nishikawa_house_sprites, [ 
 	// Check for snow and set the groundsprite in temporary variable 0
 	STORE_TEMP(GROUNDSPRITE_NORMAL, 0),
 	STORE_TEMP(terrain_type == TILETYPE_SNOW ? GROUNDSPRITE_SNOW : LOAD_TEMP(0), 0),
	// Check the rotation of the house
	STORE_TEMP(switch_road_adjacency(), 1),
	terrain_type == TILETYPE_SNOW])
	{1: sprlay_nishikawa_house_snow; sprlay_nishikawa_house_norm;}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_nishikawa_house_old)
	{
		//1: PALETTE_CC_RED;
		//2: PALETTE_CC_LIGHT_BLUE;
		//1: PALETTE_CC_PINK;			
		//1: PALETTE_CC_DARK_BLUE;		
		//1: PALETTE_CC_GREEN;			
		//2: PALETTE_CC_DARK_GREEN;
		//3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

random_switch (FEAT_HOUSES, SELF, rand_recolor_nishikawa_house_new)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;			
		1: PALETTE_CC_DARK_BLUE;		
		1: PALETTE_CC_GREEN;			
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

switch (FEAT_HOUSES, SELF, rand_recolor_nishikawa_house, current_year){
    0..1960: 	rand_recolor_nishikawa_house_old;
    1960..9999: rand_recolor_nishikawa_house_new;
    rand_recolor_nishikawa_house_new;
}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_nishikawa_house_con_check, 
	HouseOfficeGap() &&				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
	BanFromHistDistrict()			// Can build close to Temple
	) {return;}	

item(FEAT_HOUSES, item_nishikawa_house, 65, HOUSE_SIZE_1X1){
	property {
		substitute: 				26;
		name: 						TTD_STR_TOWN_BUILDING_NAME_HOUSES_1;
		population: 				20;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1870,0xFFFF];
		minimum_lifetime: 			2;
		availability_mask: 			[ALL_TOWNZONES & ~bitmask(TOWNZONE_CENTRE), ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
		building_class: 			0;
		
		}
	graphics {
		default: 					switch_nishikawa_house_sprites;
		construction_check: 		switch_nishikawa_house_con_check;
		cargo_production: 			func_produce(2,1);
		colour: 					rand_recolor_nishikawa_house;
	}
}
// End nishikawa_house

// Begin offices_01

// Building Sprites
spriteset (spr_offices_01, 							"src/gfx/offices/offices_01/building.png") 						{template_house_128_1dir(1,1)}
spriteset (spr_offices_01_snow, 						"src/gfx/offices/offices_01/building.png") 						{template_house_128_1dir(1,130)}

// Ground Tiles
spriteset (spr_offices_01_ground, 					"src/gfx/offices/offices_01/ground.png") 						{template_house_128_1dir(1,1)}
spriteset (spr_offices_01_ground_snow, 				"src/gfx/offices/offices_01/ground.png") 						{template_house_128_1dir(1,130)}

spritelayout sprlay_offices_01_norm {
	ground {
		sprite: spr_offices_01_ground(LOAD_TEMP(1));
	}
	building {
		sprite: spr_offices_01(LOAD_TEMP(1));
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_offices_01_snow {
	ground {
		sprite: spr_offices_01_ground_snow(LOAD_TEMP(1));
	}
	building {
		sprite: spr_offices_01_snow(LOAD_TEMP(1));
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose the sprites
switch (FEAT_HOUSES, SELF, switch_offices_01_sprites, [ 
 	// Check for snow and set the groundsprite in temporary variable 0
 	STORE_TEMP(GROUNDSPRITE_NORMAL, 0),
 	STORE_TEMP(terrain_type == TILETYPE_SNOW ? GROUNDSPRITE_SNOW : LOAD_TEMP(0), 0),
	// Check the rotation of the house
	STORE_TEMP(switch_road_adjacency(), 1),
	terrain_type == TILETYPE_SNOW])
	{1: sprlay_offices_01_snow; sprlay_offices_01_norm;}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_offices_01)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_offices_01_con_check, 
	FuncServicePASS() &&		// Must have passenger service
	ModernOfficePopCheck() &&	// Residential population is sufficient for another modern office building class
	ClusterBuildingClass() &&	// Must be within two tiles of the same building class
	IsUniqueHouse() &&			// Only one per city
	BanFromHistDistrict()		// Cannot build close to Temple
	) {return;}	

item(FEAT_HOUSES, item_offices_01, 36, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						TTD_STR_TOWN_BUILDING_NAME_HOUSES_1;
		population: 				30;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1945,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class: 			2;
		}
	graphics {
		default: 					switch_offices_01_sprites;
		construction_check: 		switch_offices_01_con_check; 	
		cargo_production: 			func_produce(13,4);
		colour: 					rand_recolor_offices_01;
	}
}

// End offices_01

// Begin offices_02

// Building Sprites
spriteset (spr_offices_02, 							"src/gfx/offices/offices_02/building.png") 						{template_house_128(1,1)}
spriteset (spr_offices_02_snow, 						"src/gfx/offices/offices_02/building.png") 						{template_house_128(1,130)}

// Ground Tiles
spriteset (spr_offices_02_ground, 					"src/gfx/offices/offices_02/ground.png") 						{template_house_128(1,1)}
spriteset (spr_offices_02_ground_snow, 				"src/gfx/offices/offices_02/ground.png") 						{template_house_128(1,130)}

spritelayout sprlay_offices_02_norm {
	ground {
		sprite: spr_offices_02_ground(construction_state);
	}
	building {
		sprite: spr_offices_02(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_offices_02_snow {
	ground {
		sprite: spr_offices_02_ground_snow(construction_state);
	}
	building {
		sprite: spr_offices_02_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_offices_02_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_offices_02_snow;
	sprlay_offices_02_norm;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_offices_02)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_offices_02_con_check, 
	FuncServicePASS() &&		// Must have passenger service
	ModernOfficePopCheck() &&	// Residential population is sufficient for another modern office building class
	ClusterBuildingClass() &&	// Must be within two tiles of the same building class
	BanFromHistDistrict()		// Cannot build close to Temple
	) {return;}	

item(FEAT_HOUSES, item_offices_02, 37, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						TTD_STR_TOWN_BUILDING_NAME_HOUSES_1;
		population: 				30;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1945,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class: 			2;
		}
	graphics {
		default: 					switch_offices_02_sprites;
		construction_check: 		switch_offices_02_con_check; 	
		cargo_production: 			func_produce(13,4);
		colour: 					rand_recolor_offices_02;
	}
}

// End offices_02

// Begin offices_03

// Building Sprites
spriteset (spr_offices_03, 							"src/gfx/offices/offices_03/building.png") 						{template_house_100(1,1)}
spriteset (spr_offices_03_snow, 						"src/gfx/offices/offices_03/building.png") 						{template_house_100(1,102)}

// Ground Tiles
spriteset (spr_offices_03_ground, 					"src/gfx/offices/offices_03/ground.png") 						{template_house_100(1,1)}
spriteset (spr_offices_03_ground_snow, 				"src/gfx/offices/offices_03/ground.png") 						{template_house_100(1,102)}

spritelayout sprlay_offices_03_norm {
	ground {
		sprite: spr_offices_03_ground(construction_state);
	}
	building {
		sprite: spr_offices_03(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_offices_03_snow {
	ground {
		sprite: spr_offices_03_ground_snow(construction_state);
	}
	building {
		sprite: spr_offices_03_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_offices_03_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_offices_03_snow;
	sprlay_offices_03_norm;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_offices_03)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_offices_03_con_check, 
	FuncServicePASS() &&		// Must have passenger service
	ModernOfficePopCheck() &&	// Residential population is sufficient for another modern office building class
	ClusterBuildingClass() &&		// Must be within two tiles of the same building class
	BanFromHistDistrict()		// Cannot build close to Temple
	) {return;}	

item(FEAT_HOUSES, item_offices_03, 49, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						string(NAME_OFFICES_03);
		population: 				30;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1970,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE,TOWNZONE_INNER_SUBURB), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class: 			2;
		}
	graphics {
		default: 					switch_offices_03_sprites;
		construction_check: 		switch_offices_03_con_check; 	
		cargo_production: 			func_produce(13,4);
		colour: 					rand_recolor_offices_03;
	}
}

// End offices_03

// Begin offices_04

// Building Sprites
spriteset (spr_offices_04, 							"src/gfx/offices/offices_04/building.png") 						{template_house_100(1,1)}
spriteset (spr_offices_04_snow, 						"src/gfx/offices/offices_04/building.png") 						{template_house_100(1,102)}

// Ground Tiles
spriteset (spr_offices_04_ground, 					"src/gfx/offices/offices_04/ground.png") 						{template_house_100(1,1)}
spriteset (spr_offices_04_ground_snow, 				"src/gfx/offices/offices_04/ground.png") 						{template_house_100(1,102)}

spritelayout sprlay_offices_04_norm {
	ground {
		sprite: spr_offices_04_ground(construction_state);
	}
	building {
		sprite: spr_offices_04(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_offices_04_snow {
	ground {
		sprite: spr_offices_04_ground_snow(construction_state);
	}
	building {
		sprite: spr_offices_04_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_offices_04_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_offices_04_snow;
	sprlay_offices_04_norm;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_offices_04)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_offices_04_con_check, 
	FuncServicePASS() &&		// Must have passenger service
	ModernOfficePopCheck() &&	// Residential population is sufficient for another modern office building class
	ClusterBuildingClass() &&	// Must be within two tiles of the same building class
	BanFromHistDistrict()		// Cannot build close to Temple
	) {return;}	

item(FEAT_HOUSES, item_offices_04, 58, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						string(NAME_OFFICES_04);
		population: 				120;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1945,1979];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE,TOWNZONE_INNER_SUBURB), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class: 			2;
		}
	graphics {
		default: 					switch_offices_04_sprites;
		construction_check: 		switch_offices_04_con_check; 	
		cargo_production: 			func_produce(13,4);
		colour: 					rand_recolor_offices_04;
	}
}

// End offices_04

// Begin offices_05

// Building Sprites
spriteset (spr_offices_05, 							"src/gfx/offices/offices_05/building.png") 						{template_house_128(1,1)}
spriteset (spr_offices_05_snow, 						"src/gfx/offices/offices_05/building.png") 						{template_house_128(1,130)}

// Ground Tiles
spriteset (spr_offices_05_ground, 					"src/gfx/offices/offices_05/ground.png") 						{template_house_128(1,1)}
spriteset (spr_offices_05_ground_snow, 				"src/gfx/offices/offices_05/ground.png") 						{template_house_128(1,130)}

spritelayout sprlay_offices_05_norm {
	ground {
		sprite: spr_offices_05_ground(3);
	}
	building {
		sprite: spr_offices_05(3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_offices_05_snow {
	ground {
		sprite: spr_offices_05_ground_snow(3);
	}
	building {
		sprite: spr_offices_05_snow(3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_offices_05_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_offices_05_snow;
	sprlay_offices_05_norm;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_offices_05)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_offices_05_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	ModernOfficePopCheck() &&		// Residential population is sufficient for another modern office building class
	ClusterBuildingClass() &&		// Must be within two tiles of the same building class
	BanFromHistDistrict()			// Cannot build close to Temple
	) {return;}	

item(FEAT_HOUSES, item_offices_05, 59, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						string(NAME_OFFICES_05);
		population: 				120;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2],[GOOD, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1950,1989];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class: 			2;
		}
	graphics {
		default: 					switch_offices_05_sprites;
		construction_check: 		switch_offices_05_con_check; 	
		cargo_production: 			func_produce(13,4);
		colour: 					rand_recolor_offices_05;
	}
}

// End offices_05

// Begin petrol_station_01

// Building Sprites
spriteset (spr_build_petrol_station_01, 							"src/gfx/shops/petrol_station_01/building.png") 						{template_house_80(1,1)}
spriteset (spr_build_petrol_station_01_snow, 						"src/gfx/shops/petrol_station_01/building.png") 						{template_house_80(1,82)}

// Ground Sprites
spriteset (spr_ground_petrol_station_01, 							"src/gfx/shops/petrol_station_01/ground.png") 						{template_house_80(1,1)}
spriteset (spr_ground_petrol_station_01_snow, 						"src/gfx/shops/petrol_station_01/ground.png") 						{template_house_80(1,82)}

// Normal Sprites
spritelayout sprlay_petrol_station_01_north {
	ground {
		sprite: spr_ground_petrol_station_01(0);
	}
	building {
		sprite: spr_build_petrol_station_01(0);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_petrol_station_01_east {
	ground {
		sprite: spr_ground_petrol_station_01(1);
	}
	building {
		sprite: spr_build_petrol_station_01(1);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_petrol_station_01_snow_north {
	ground {
		sprite: spr_ground_petrol_station_01_snow(0);
	}
	building {
		sprite: spr_build_petrol_station_01_snow(0);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_petrol_station_01_snow_east {
	ground {
		sprite: spr_ground_petrol_station_01_snow(1);
	}
	building {
		sprite: spr_build_petrol_station_01_snow(1);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_petrol_station_01_north,terrain_type) {
	TILETYPE_SNOW: sprlay_petrol_station_01_snow_north;
	sprlay_petrol_station_01_north;
}
switch(FEAT_HOUSES, SELF, switch_petrol_station_01_east,terrain_type) {
	TILETYPE_SNOW: sprlay_petrol_station_01_snow_east;
	sprlay_petrol_station_01_east;
}

// Recolouring

random_switch (FEAT_HOUSES, SELF, rand_recolor_petrol_station_01)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
	}


// Construction Check
switch (FEAT_HOUSES, SELF, switch_petrol_station_01_con_check, 
	HasRoadAdjacentSW() &&		// Must have road to the SW
	ThirtyTileGap() &&			// Can't appear within 30 tiles of another
	BanFromHistDistrict()		// Cannot build close to Temple
	) {return;}	

// Protection Check
switch (FEAT_HOUSES, SELF, switch_petrol_station_01_pro_check, 
	HasRoadAdjacentSW() &&		// Must have road to the SW
	FuncServicePETR()			// Must have PETR delivered
	) {return;}	

item(FEAT_HOUSES, item_petrol_station_01, 50, HOUSE_SIZE_1X2){
	property {
		substitute: 				7; 													
		name: 						string(NAME_PETROL_STATION_01);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED,HOUSE_FLAG_PROTECTED);	// Want flat land
		population: 				80;														// Agreed to JPS
		accepted_cargos: 			[[PASS, 4],[MAIL, 2],[GOOD, 2],[PETR,8]];				// Agreed to JPS and added Petrol
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[1970,0xFFFF];	
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(
										TOWNZONE_OUTER_SUBURB,
										TOWNZONE_OUTSKIRT,
										TOWNZONE_EDGE
										), 
									bitmask(
										CLIMATE_TEMPERATE, 
										CLIMATE_ARCTIC, 
										ABOVE_SNOWLINE
										)];
		//building_class:			2;	
		}
	graphics {
		graphics_north: 			switch_petrol_station_01_north;
		graphics_east: 				switch_petrol_station_01_east;
		construction_check:			switch_petrol_station_01_con_check;
		protection:					switch_petrol_station_01_pro_check;
		cargo_production: 			func_produce(20,5);
		colour: 					rand_recolor_petrol_station_01;
	}
}

// End petrol_station_01

// Begin shiro_01

// Sprites
spriteset (spr_shiro_01, 							"src/gfx/landmarks/shiro_01/shiro.png") 						{template_house_200(1,1)}
spriteset (spr_shiro_01_snow, 						"src/gfx/landmarks/shiro_01/shiro.png") 						{template_house_200(1,202)}

// Normal Sprites
spritelayout sprlay_shiro_01_north {
	ground {
		sprite: spr_shiro_01(3);
	}
	building {
		sprite: spr_shiro_01(2);
		hide_sprite: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shiro_01_east {
	ground {
		sprite: spr_shiro_01(3);
	}
	building {
		sprite: spr_shiro_01(2);
		xoffset: -1;
		yoffset: 2;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shiro_01_west {
	ground {
		sprite: spr_shiro_01(3);
	}
	building {
		sprite: spr_shiro_01(0);
		xoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shiro_01_south {
	ground {
		sprite: spr_shiro_01(3);
	}
	building {
		sprite: spr_shiro_01(1);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_shiro_01_snow_north {
	ground {
		sprite: spr_shiro_01_snow(3);
	}
	building {
		sprite: spr_shiro_01_snow(2);
		hide_sprite: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shiro_01_snow_east {
	ground {
		sprite: spr_shiro_01_snow(3);
	}
	building {
		sprite: spr_shiro_01_snow(2);
		xoffset: -1;
		yoffset: 2;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shiro_01_snow_west {
	ground {
		sprite: spr_shiro_01_snow(3);
	}
	building {
		sprite: spr_shiro_01_snow(0);
		xoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shiro_01_snow_south {
	ground {
		sprite: spr_shiro_01_snow(3);
	}
	building {
		sprite: spr_shiro_01_snow(1);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_shiro_01_north,terrain_type) {
	TILETYPE_SNOW: sprlay_shiro_01_snow_north;
	sprlay_shiro_01_north;
}
switch(FEAT_HOUSES, SELF, switch_shiro_01_east,terrain_type) {
	TILETYPE_SNOW: sprlay_shiro_01_snow_east;
	sprlay_shiro_01_east;
}
switch(FEAT_HOUSES, SELF, switch_shiro_01_west,terrain_type) {
	TILETYPE_SNOW: sprlay_shiro_01_snow_west;
	sprlay_shiro_01_west;
}
switch(FEAT_HOUSES, SELF, switch_shiro_01_south,terrain_type) {
	TILETYPE_SNOW: sprlay_shiro_01_snow_south;
	sprlay_shiro_01_south;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_shiro_01)
	{
		//1: PALETTE_CC_RED;			nah
		2: PALETTE_CC_LIGHT_BLUE;
		//1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		//1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		//4: PALETTE_CC_WHITE;			too much like snow
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_shiro_01_con_check, 
	IsCity() && 				// Can only appear in Cities
	IsUniqueHouse() && 			// Only one Shiro per city
	OnGenerationOnly() && 		// Will only spawn when Map is generated - not realistic being built in modern times!
	RandomBitsFour()			// Think this makes the probability abouty a quarter
	) {return;}	

item(FEAT_HOUSES, item_shiro_01, 70, HOUSE_SIZE_2X2){
	property {
		substitute: 				20; 								//Stadium since 2x2
		name: 						string(NAME_SHIRO_01);
		building_flags: 			bitmask(HOUSE_FLAG_PROTECTED);		// Cities should delete
		population: 				160;								// Same as JPS
		accepted_cargos: 			[[PASS, 8],[MAIL, 1],[FOOD, 2]];	// Same as JPS
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;									
		years_available: 			[1700,0xFFFF];
		minimum_lifetime: 			50;
		availability_mask: 			[	
										bitmask(TOWNZONE_OUTER_SUBURB,TOWNZONE_OUTSKIRT), 				// Same as JPS
									 	bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)
									];	
		}
	graphics {
		graphics_north: 			switch_shiro_01_north;
		graphics_east: 				switch_shiro_01_east;
		graphics_west: 				switch_shiro_01_west;
		graphics_south: 			switch_shiro_01_south;
		construction_check:			switch_shiro_01_con_check;
		cargo_production: 			func_produce(10,2);
		colour: 					rand_recolor_shiro_01;
	}
}

// End shiro_01

// Begin shops_01

// Building Sprites
spriteset (spr_shops_01, 							"src/gfx/shops/shops_01/building.png") 						{template_house_100(1,1)}
spriteset (spr_shops_01_snow, 						"src/gfx/shops/shops_01/building.png") 						{template_house_100(1,102)}

// Ground Tiles
spriteset (spr_shops_01_ground, 					"src/gfx/shops/shops_01/ground.png") 						{template_house_100(1,1)}
spriteset (spr_shops_01_ground_snow, 				"src/gfx/shops/shops_01/ground.png") 						{template_house_100(1,102)}

spritelayout sprlay_shops_01_norm {
	ground {
		sprite: spr_shops_01_ground(construction_state);
	}
	building {
		sprite: spr_shops_01(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shops_01_snow {
	ground {
		sprite: spr_shops_01_ground_snow(construction_state);
	}
	building {
		sprite: spr_shops_01_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_shops_01_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_shops_01_snow;
	sprlay_shops_01_norm;
}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_shops_01_con_check, 
	FuncServicePASS() &&			// Only build within the catchment area of a station which received passengers this month or last month
	BanFromHistDistrict() &&		// Cannot build close to Temple
	HasRoadAdjacentSW() && 
	HasRoadAdjacentSE() && 
	ModernOfficePopCheck() &&		// Is there population to allow another
	ClusterBuildingClass()			// Must be within two tiles of the same building class
	) {return;}	

// Recolouring
random_switch (FEAT_HOUSES, SELF, random_recolour_shops_01) {
	1:	return PALETTE_CC_DARK_BLUE;
	1:	return PALETTE_CC_GREY;
	1:	return PALETTE_CC_BROWN;
	1:	return PALETTE_CC_MAUVE;
	1:	return PALETTE_CC_WHITE;
	1:	return PALETTE_CC_DARK_GREEN;
}

item(FEAT_HOUSES, item_shops_01, 48, HOUSE_SIZE_1X1) {
	property {
		substitute: 				30;
		name: 						string(NAME_SHOPS_01);
		population: 				180;
		mail_multiplier: 			75;
		accepted_cargos: 			[[PASS, 8],[MAIL,8],[GOOD, 8]];
		local_authority_impact: 	180;
		removal_cost_multiplier: 	155;
		probability: 				1;
		years_available: 			[1970,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];	// JPSet Zones 4,3
		building_class: 			2;
	}
	graphics {
		default: 					switch_shops_01_sprites;
		construction_check: 		switch_shops_01_con_check;
		colour: 					random_recolour_shops_01;
		cargo_production: 			func_produce(24,10);
	}
}
// End shops_01

// Begin shops_02

// Building Sprites
spriteset (spr_shops_02, 							"src/gfx/shops/shops_02/building.png") 						{template_house_128(1,1)}
spriteset (spr_shops_02_snow, 						"src/gfx/shops/shops_02/building.png") 						{template_house_128(1,130)}

// Ground Tiles
spriteset (spr_shops_02_ground, 					"src/gfx/shops/shops_02/ground.png") 						{template_house_128(1,1)}
//spriteset (spr_shops_02_ground_snow, 				"src/gfx/shops/shops_02/ground.png") 						{template_house_128(1,1)}

spritelayout sprlay_shops_02_norm {
	ground {
		sprite: spr_shops_02_ground(construction_state);
	}
	building {
		sprite: spr_shops_02(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shops_02_snow {
	ground {
		sprite: spr_shops_02_ground(construction_state);
	}
	building {
		sprite: spr_shops_02_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_shops_02_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_shops_02_snow;
	sprlay_shops_02_norm;
}


// Recolouring
random_switch (FEAT_HOUSES, SELF, random_recolour_shops_02) {
	1:	return PALETTE_CC_DARK_BLUE;
	1:	return PALETTE_CC_GREY;
	1:	return PALETTE_CC_BROWN;
	1:	return PALETTE_CC_MAUVE;
	1:	return PALETTE_CC_WHITE;
	1:	return PALETTE_CC_DARK_GREEN;
}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_shops_02_con_check, 
	FuncServicePASS() &&			// Only build within the catchment area of a station which received passengers this month or last month
	BanFromHistDistrict() &&		// Cannot build close to Temple
	ModernOfficePopCheck() &&		// Is there sufficieny population to build another?
	ClusterBuildingClass()			// Must be within two tiles of the same building class
	) {return;}	

item(FEAT_HOUSES, item_shops_02, 47, HOUSE_SIZE_1X1) {
	property {
		substitute: 				30;
		name: 						string(NAME_SHOPS_02);
		population: 				140;
		mail_multiplier: 			75;
		accepted_cargos: 			[[PASS, 8],[MAIL,8],[GOOD, 8]];
		local_authority_impact: 	180;
		removal_cost_multiplier: 	155;
		probability: 				1;
		years_available: 			[1970,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class: 			2;
	}
	graphics {
		default: 					switch_shops_02_sprites;
		construction_check: 		switch_shops_02_con_check;
		colour: 					random_recolour_shops_02;
		cargo_production: 			func_produce(24,10);
	}
}
// End shops_02

// Begin skyscraper_01

// Building Sprites
spriteset (spr_build_skyscraper_01_north, 							"src/gfx/skyscrapers/skyscraper_01/building.png") 						{template_house_250(261,1)}
spriteset (spr_build_skyscraper_01_east, 							"src/gfx/skyscrapers/skyscraper_01/building.png") 						{template_house_250(1,1)}

spriteset (spr_build_skyscraper_01_north_snow, 						"src/gfx/skyscrapers/skyscraper_01/building.png") 						{template_house_250(261,252)}
spriteset (spr_build_skyscraper_01_east_snow, 						"src/gfx/skyscrapers/skyscraper_01/building.png") 						{template_house_250(1,252)}
// Ground Sprites
spriteset (spr_ground_skyscraper_01_north, 							"src/gfx/skyscrapers/skyscraper_01/ground.png") 						{template_house_250(261,1)}
spriteset (spr_ground_skyscraper_01_east, 							"src/gfx/skyscrapers/skyscraper_01/ground.png") 						{template_house_250(1,1)}

spriteset (spr_ground_skyscraper_01_north_snow, 					"src/gfx/skyscrapers/skyscraper_01/ground.png") 						{template_house_250(261,252)}
spriteset (spr_ground_skyscraper_01_east_snow, 						"src/gfx/skyscrapers/skyscraper_01/ground.png") 						{template_house_250(1,252)}

// Normal Sprites
spritelayout sprlay_skyscraper_01_north {
	ground {
		sprite: spr_ground_skyscraper_01_north(construction_state);
	}
	building {
		sprite: spr_build_skyscraper_01_north(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_skyscraper_01_east {
	ground {
		sprite: spr_ground_skyscraper_01_east(construction_state);
	}
	building {
		sprite: spr_build_skyscraper_01_east(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_skyscraper_01_snow_north {
	ground {
		sprite: spr_ground_skyscraper_01_north_snow(construction_state);
	}
	building {
		sprite: spr_build_skyscraper_01_north_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_skyscraper_01_snow_east {
	ground {
		sprite: spr_ground_skyscraper_01_east_snow(construction_state);
	}
	building {
		sprite: spr_build_skyscraper_01_east_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_skyscraper_01_north,terrain_type) {
	TILETYPE_SNOW: sprlay_skyscraper_01_snow_north;
	sprlay_skyscraper_01_north;
}
switch(FEAT_HOUSES, SELF, switch_skyscraper_01_east,terrain_type) {
	TILETYPE_SNOW: sprlay_skyscraper_01_snow_east;
	sprlay_skyscraper_01_east;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_skyscraper_01)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_skyscraper_01_con_check, 
	FuncServicePASS() &&		// Must have passenger service
	IsCity() && 				// Can only appear in cities
	IsUniqueHouse() &&			// Only one in city
	PopOver30k() &&				// Population of city is over 30k
	ModernOfficePopCheck() &&	// Residential population is sufficient for another modern office building class
	ClusterBuildingClass() &&	// Must be within two tiles of the same building class
	IfFirstSkyscraper() &&		// If first skyscraper, it must build beside a Class 2
	BanFromHistDistrict()		// Cannot build close to Temple
	) {return;}		
 

item(FEAT_HOUSES, item_skyscraper_01, 76, HOUSE_SIZE_1X2){
	property {
		substitute: 				7; 													
		name: 						string(NAME_SKYSCRAPER_01);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED,HOUSE_FLAG_PROTECTED);
		population: 				255;
		accepted_cargos: 			[[PASS, 8],[MAIL, 4],[GOOD, 4]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[2006,0xFFFF];
		minimum_lifetime: 			20;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class:				5;	
		}
	graphics {
		graphics_north: 			switch_skyscraper_01_north;
		graphics_east: 				switch_skyscraper_01_east;
		construction_check:			switch_skyscraper_01_con_check;
		cargo_production: 			func_produce(24,10);
		colour: 					rand_recolor_skyscraper_01;
	}
}

// End skyscraper_01

// Begin skyscraper_02

// Building Sprites
spriteset (spr_build_skyscraper_02, 							"src/gfx/skyscrapers/skyscraper_02/building.png") 							{template_house_250(1,1)}
spriteset (spr_build_skyscraper_02_snow, 						"src/gfx/skyscrapers/skyscraper_02/building.png") 						{template_house_250(1,252)}

// Ground Sprites
spriteset (spr_ground_skyscraper_02, 							"src/gfx/skyscrapers/skyscraper_02/ground.png") 						{template_house_250(1,1)}
spriteset (spr_ground_skyscraper_02_snow, 						"src/gfx/skyscrapers/skyscraper_02/ground.png") 						{template_house_250(1,252)}

// Normal Sprites
spritelayout sprlay_skyscraper_02 {
	ground {
		sprite: spr_ground_skyscraper_02(construction_state);
	}
	building {
		sprite: spr_build_skyscraper_02(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_skyscraper_02_snow {
	ground {
		sprite: spr_ground_skyscraper_02_snow(construction_state);
	}
	building {
		sprite: spr_build_skyscraper_02_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_skyscraper_02,terrain_type) {
	TILETYPE_SNOW: sprlay_skyscraper_02_snow;
	sprlay_skyscraper_02;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_skyscraper_02)
	{
		1: PALETTE_CC_RED;			
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;			
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_skyscraper_02_con_check, 
	FuncServicePASS() &&		// Must have passenger service
	IsCity() && 				// Can only appear in cities
	IsUniqueHouse() &&			// Only one in city
	PopOver30k() &&				// Population of city is over 30k
	ModernOfficePopCheck() &&	// Residential population is sufficient for another modern office building class
	ClusterBuildingClass() &&	// Must be within two tiles of the same building class
	IfFirstSkyscraper() &&		// If first skyscraper, it must build beside a Class 2
	BanFromHistDistrict()		// Cannot build close to Temple
	) {return;}	

item(FEAT_HOUSES, item_skyscraper_02, 78, HOUSE_SIZE_1X1){
	property {
		substitute: 				4; 													
		name: 						string(NAME_SKYSCRAPER_02);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED,HOUSE_FLAG_PROTECTED);
		population: 				220;
		accepted_cargos: 			[[PASS, 8],[MAIL, 8],[GOOD, 8]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[2000,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class:				5;	
		}
	graphics {
		default: 					switch_skyscraper_02;
		construction_check:			switch_skyscraper_02_con_check;
		cargo_production: 			func_produce(24,10);
		colour: 					rand_recolor_skyscraper_02; 						// No recolouring
	}
}

// End skyscraper_02

// Begin skyscraper_03

// Building Sprites
spriteset (spr_build_skyscraper_03, 							"src/gfx/skyscrapers/skyscraper_03/building.png") 							{template_house_250_wide(1,1)}
spriteset (spr_build_skyscraper_03_snow, 						"src/gfx/skyscrapers/skyscraper_03/building.png") 						{template_house_250_wide(1,252)}

// Ground Sprites
spriteset (spr_ground_skyscraper_03, 							"src/gfx/skyscrapers/skyscraper_03/ground.png") 						{template_house_250_wide(1,1)}
spriteset (spr_ground_skyscraper_03_snow, 						"src/gfx/skyscrapers/skyscraper_03/ground.png") 						{template_house_250_wide(1,252)}

// Normal Sprites
spritelayout sprlay_skyscraper_03 {
	ground {
		sprite: spr_ground_skyscraper_03(construction_state);
	}
	building {
		sprite: spr_build_skyscraper_03(construction_state);
		//xoffset: -1;
		//yoffset: -2;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_skyscraper_03_snow {
	ground {
		sprite: spr_ground_skyscraper_03_snow(construction_state);
	}
	building {
		sprite: spr_build_skyscraper_03_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_skyscraper_03,terrain_type) {
	TILETYPE_SNOW: sprlay_skyscraper_03_snow;
	sprlay_skyscraper_03;
}

// Recolouring
/*
random_switch (FEAT_HOUSES, SELF, rand_recolor_skyscraper_03)
	{
		1: PALETTE_CC_RED;			
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;			
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}
*/

// Construction Check
switch (FEAT_HOUSES, SELF, switch_skyscraper_03_con_check, 
	FuncServicePASS() &&		// Must have passenger service
	IsCity() && 				// Can only appear in cities
	IsUniqueHouse() &&			// Only one in city
	PopOver30k() &&				// Population of city is over 30k
	ModernOfficePopCheck() &&	// Residential population is sufficient for another modern office building class
	ClusterBuildingClass() &&	// Must be within two tiles of the same building class
	IfFirstSkyscraper() &&		// If first skyscraper, it must build beside a Class 2
	BanFromHistDistrict()		// Cannot build close to Temple
	) {return;}	

item(FEAT_HOUSES, item_skyscraper_03, 79, HOUSE_SIZE_1X1){
	property {
		substitute: 				4; 													
		name: 						string(NAME_SKYSCRAPER_03);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED,HOUSE_FLAG_PROTECTED);
		population: 				220;
		accepted_cargos: 			[[PASS, 8],[MAIL, 8],[GOOD, 8]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[2000,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class:				5;	
		}
	graphics {
		default: 					switch_skyscraper_03;
		construction_check:			switch_skyscraper_03_con_check;
		cargo_production: 			func_produce(24,10);
		//colour: 					rand_recolor_skyscraper_03; 
	}
}

// End skyscraper_03

// Begin small_apartments_01

// Building Sprites
spriteset (spr_small_apartments_01, 							"src/gfx/small_apartments/small_apartments_01/building.png") 						{template_house_80(1,1)}
spriteset (spr_small_apartments_01_snow, 						"src/gfx/small_apartments/small_apartments_01/building.png") 						{template_house_80(1,82)}

// Ground Tiles
spriteset (spr_small_apartments_01_ground, 						"src/gfx/small_apartments/small_apartments_01/ground.png") 						{template_house_80(1,1)}
spriteset (spr_small_apartments_01_ground_snow, 				"src/gfx/small_apartments/small_apartments_01/ground.png") 						{template_house_80(1,82)}

// Normal Sprites
spritelayout sprlay_small_apartments_01_norm {
	ground {
		sprite: spr_small_apartments_01_ground(construction_state);
	}
	building {
		sprite: spr_small_apartments_01(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_small_apartments_01_snow {
	ground {
		sprite: spr_small_apartments_01_ground_snow(construction_state);
	}
	building {
		sprite: spr_small_apartments_01_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_small_apartments_01_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_small_apartments_01_snow;
	sprlay_small_apartments_01_norm;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_small_apartments_01)
	{
		1: PALETTE_CC_RED;				
		2: PALETTE_CC_LIGHT_BLUE;
		//1: PALETTE_CC_PINK;			// Looks silly
		//1: PALETTE_CC_DARK_BLUE;		// Too in your face
		//1: PALETTE_CC_GREEN;			// Too in your face
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_small_apartments_01_con_check, 
	HasRoadAdjacentNWSW() &&		// Can build with a road either to the NW or SW
	SmallApartmentsCheck() &&		// Small Apartments can't build next to Modern Office Building unless there no passenger service
	BanFromHistDistrict()			// Do not allow building near Temple
	) {return;}	

item(FEAT_HOUSES, item_small_apartments_01, 02, HOUSE_SIZE_1X1){
	property {
		substitute: 				02;
		name: 						string(NAME_SMALL_APARTMENTS_01);
		population: 				120;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1945,0xFFFF];
		minimum_lifetime: 			4;
		availability_mask: 			[ALL_TOWNZONES, ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
		
		}
	graphics {
		default: 					switch_small_apartments_01_snow;
		construction_check: 		switch_small_apartments_01_con_check;
		cargo_production: 			func_produce(5,2);
		colour: 					rand_recolor_small_apartments_01;
	}
}

// End small_apartments_01

// Begin small_apartments_02

// Building Sprites
spriteset (spr_small_apartments_02, 							"src/gfx/small_apartments/small_apartments_02/building.png") 						{template_house_80(1,1)}
spriteset (spr_small_apartments_02_snow, 						"src/gfx/small_apartments/small_apartments_02/building.png") 						{template_house_80(1,82)}

// Ground Tiles
spriteset (spr_small_apartments_02_ground, 						"src/gfx/small_apartments/small_apartments_02/ground.png") 						{template_house_80(1,1)}
spriteset (spr_small_apartments_02_ground_snow, 				"src/gfx/small_apartments/small_apartments_02/ground.png") 						{template_house_80(1,82)}

// Normal Sprites
spritelayout sprlay_small_apartments_02_norm {
	ground {
		sprite: spr_small_apartments_02_ground(construction_state);
	}
	building {
		sprite: spr_small_apartments_02(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_small_apartments_02_snow {
	ground {
		sprite: spr_small_apartments_02_ground_snow(construction_state);
	}
	building {
		sprite: spr_small_apartments_02_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_small_apartments_02_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_small_apartments_02_snow;
	sprlay_small_apartments_02_norm;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_small_apartments_02)
	{
		//1: PALETTE_CC_RED;			// Too in your face
		2: PALETTE_CC_LIGHT_BLUE;
		//1: PALETTE_CC_PINK;			// Looks silly
		//1: PALETTE_CC_DARK_BLUE;		// Too in your face
		//1: PALETTE_CC_GREEN;			// Too in your face
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_small_apartments_02_con_check, 
	SmallApartmentsCheck() &&		// Small Apartments can't build next to Modern Office Building unless there no passenger service
	BanFromHistDistrict()			// Do not allow building near Temple
	) {return;}	

item(FEAT_HOUSES, item_small_apartments_02, 44, HOUSE_SIZE_1X1){
	property {
		substitute: 				02;
		name: 						string(NAME_SMALL_APARTMENTS_02);
		population: 				100;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1945,0xFFFF];
		minimum_lifetime: 			4;
		availability_mask: 			[ALL_TOWNZONES, ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
		
		
		}
	graphics {
		default: 					switch_small_apartments_02_snow;
		construction_check: 		switch_small_apartments_02_con_check;
		cargo_production: 			func_produce(5,2);
		colour: 					rand_recolor_small_apartments_02;
	}
}
// End small_apartments_02

// Begin small_apartments_03

// Building Sprites
spriteset (spr_small_apartments_03, 							"src/gfx/small_apartments/small_apartments_03/building.png") 						{template_house_80_2dir(1,1)}
spriteset (spr_small_apartments_03_snow, 						"src/gfx/small_apartments/small_apartments_03/building.png") 					{template_house_80_2dir(1,82)}

// Ground Tiles
spriteset (spr_small_apartments_03_ground, 					"src/gfx/small_apartments/small_apartments_03/ground.png") 						{template_house_80_2dir(1,1)}
spriteset (spr_small_apartments_03_ground_snow, 				"src/gfx/small_apartments/small_apartments_03/ground.png") 						{template_house_80_2dir(1,82)}

spritelayout sprlay_small_apartments_03_norm {
	ground {
		sprite: spr_small_apartments_03_ground(LOAD_TEMP(1));
	}
	building {
		sprite: spr_small_apartments_03(LOAD_TEMP(1));
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_small_apartments_03_snow {
	ground {
		sprite: spr_small_apartments_03_ground_snow(LOAD_TEMP(1));
	}
	building {
		sprite: spr_small_apartments_03_snow(LOAD_TEMP(1));
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

switch (FEAT_HOUSES, SELF, switch_small_apartments_03_sprites, [ 
 	// Check for snow and set the groundsprite in temporary variable 0
 	STORE_TEMP(GROUNDSPRITE_NORMAL, 0),
 	STORE_TEMP(terrain_type == TILETYPE_SNOW ? GROUNDSPRITE_SNOW : LOAD_TEMP(0), 0),
	// Check the rotation of the house
	STORE_TEMP(switch_road_adjacency(), 1),
	terrain_type == TILETYPE_SNOW])
	{1: sprlay_small_apartments_03_snow; sprlay_small_apartments_03_norm;}

random_switch (FEAT_HOUSES, SELF, rand_recolor_apartments_03)
	{
		1: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_small_apartments_03_con_check, 
	SmallApartmentsCheck() &&		// Small Apartments can't build next to Modern Office Building unless there no passenger service
	BanFromHistDistrict()			// Do not allow building near Temple
	) {return;}	

item(FEAT_HOUSES, item_small_apartments_03, 45, HOUSE_SIZE_1X1){
	property {
		substitute: 					27;
		name: 							string(NAME_SMALL_APARTMENTS_03);
		population: 					120;
		accepted_cargos: 				[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 		80;
		removal_cost_multiplier: 		80;
		probability: 					1;
		years_available: 				[1950,0xFFFF];
		minimum_lifetime: 				5;
		availability_mask: 				[ALL_TOWNZONES, ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];		
		}
	graphics {
		default: 						switch_small_apartments_03_sprites;
		construction_check: 			switch_small_apartments_03_con_check;
		cargo_production: 				func_produce(5,2);
		colour: 						rand_recolor_apartments_03;
	}
}

// End small_apartments_03

// Begin takamaro_01

spriteset (spr_takamaro_01, 							"src/gfx/houses_old/takamaro_01/building.png") 						{template_house_80(1,1)}
spriteset (spr_takamaro_01_snow, 						"src/gfx/houses_old/takamaro_01/building.png") 						{template_house_80(1,82)}
spriteset (spr_takamaro_01_ground, 						"src/gfx/houses_old/takamaro_01/ground.png") 						{template_house_80(1,1)}
spriteset (spr_takamaro_01_ground_snow, 				"src/gfx/houses_old/takamaro_01/ground.png") 						{template_house_80(1,82)}

spritelayout sprlay_takamaro_01_norm {
	ground {
		sprite: spr_takamaro_01_ground;
	}
	building {
		sprite: spr_takamaro_01;
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_takamaro_01_snow {
	ground {
		sprite: spr_takamaro_01_ground_snow;
	}
	building {
		sprite: spr_takamaro_01_snow;
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_takamaro_01_sprites, [
	// Check the rotation of the house
	STORE_TEMP(switch_road_adjacency(), 1),
	terrain_type == TILETYPE_SNOW])
	{1: sprlay_takamaro_01_snow; sprlay_takamaro_01_norm;}

// Recolouring
/*
random_switch (FEAT_HOUSES, SELF, rand_recolor_takamaro_01)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}
*/

switch (FEAT_HOUSES, SELF, switch_takamaro_01_con_check, 
	HouseOfficeGap() ||				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
	AllowInHistDistrict()			// Can build close to Temple
	) {return;}	

item(FEAT_HOUSES, item_takamaro_01, 52, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						TTD_STR_TOWN_BUILDING_NAME_HOUSES_1;
		population: 				30;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1900,0xFFFF];
		minimum_lifetime: 			2;
		availability_mask: 			[bitmask(TOWNZONE_INNER_SUBURB,TOWNZONE_CENTRE), ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
		
		}
	graphics {
		default: 					switch_takamaro_01_sprites;
		construction_check: 		switch_takamaro_01_con_check;
		cargo_production: 			func_produce(2,1);
		//colour: 					rand_recolor_takamaro_01;
	}
}

// End takamaro_01

// Begin takamaro_02

spriteset (spr_takamaro_02, 							"src/gfx/houses_old/takamaro_02/building.png") 						{template_house_80(1,1)}
spriteset (spr_takamaro_02_snow, 						"src/gfx/houses_old/takamaro_02/building.png") 						{template_house_80(1,82)}
spriteset (spr_takamaro_02_ground, 						"src/gfx/houses_old/takamaro_02/ground.png") 						{template_house_80(1,1)}
spriteset (spr_takamaro_02_ground_snow, 				"src/gfx/houses_old/takamaro_02/ground.png") 						{template_house_80(1,82)}

spritelayout sprlay_takamaro_02_norm {
	ground {
		sprite: spr_takamaro_02_ground;
	}
	building {
		sprite: spr_takamaro_02;
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_takamaro_02_snow {
	ground {
		sprite: spr_takamaro_02_ground_snow;
	}
	building {
		sprite: spr_takamaro_02_snow;
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_takamaro_02_sprites, [
	// Check the rotation of the house
	STORE_TEMP(switch_road_adjacency(), 1),
	terrain_type == TILETYPE_SNOW])
	{1: sprlay_takamaro_02_snow; sprlay_takamaro_02_norm;}

// Recolouring
/*
random_switch (FEAT_HOUSES, SELF, rand_recolor_takamaro_02)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}
*/

switch (FEAT_HOUSES, SELF, switch_takamaro_02_con_check, 
	HouseOfficeGap() ||				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
	AllowInHistDistrict()			// Can build close to Temple
	) {return;}	

item(FEAT_HOUSES, item_takamaro_02, 53, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						TTD_STR_TOWN_BUILDING_NAME_HOUSES_1;
		population: 				30;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1900,0xFFFF];
		minimum_lifetime: 			2;
		availability_mask: 			[bitmask(TOWNZONE_INNER_SUBURB,TOWNZONE_CENTRE), ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
		
		}
	graphics {
		default: 					switch_takamaro_02_sprites;
		construction_check: 		switch_takamaro_02_con_check;
		cargo_production: 			func_produce(2,1);
		//colour: 					rand_recolor_takamaro_02;
	}
}

// End takamaro_02

// Begin takamaro_03

spriteset (spr_takamaro_03, 							"src/gfx/houses_old/takamaro_03/building.png") 						{template_house_80(1,1)}
spriteset (spr_takamaro_03_snow, 						"src/gfx/houses_old/takamaro_03/building.png") 						{template_house_80(1,82)}
spriteset (spr_takamaro_03_ground, 						"src/gfx/houses_old/takamaro_03/ground.png") 						{template_house_80(1,1)}
spriteset (spr_takamaro_03_ground_snow, 				"src/gfx/houses_old/takamaro_03/ground.png") 						{template_house_80(1,82)}

spritelayout sprlay_takamaro_03_norm {
	ground {
		sprite: spr_takamaro_03_ground;
	}
	building {
		sprite: spr_takamaro_03(LOAD_TEMP(1));
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_takamaro_03_snow {
	ground {
		sprite: spr_takamaro_03_ground_snow;
	}
	building {
		sprite: spr_takamaro_03_snow(LOAD_TEMP(1));
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_takamaro_03_sprites, [
	// Check the rotation of the house
	STORE_TEMP(switch_road_adjacency(), 1),
	terrain_type == TILETYPE_SNOW])
	{1: sprlay_takamaro_03_snow; sprlay_takamaro_03_norm;}

// Recolouring
/*
random_switch (FEAT_HOUSES, SELF, rand_recolor_takamaro_03)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}
*/

// Construction Check
switch (FEAT_HOUSES, SELF, switch_takamaro_03_con_check, 
	HouseOfficeGap() ||				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
	AllowInHistDistrict()			// Can build close to Temple
	) {return;}	

item(FEAT_HOUSES, item_takamaro_03, 54, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						TTD_STR_TOWN_BUILDING_NAME_HOUSES_1;
		population: 				30;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1900,0xFFFF];
		minimum_lifetime: 			2;
		availability_mask: 			[bitmask(TOWNZONE_INNER_SUBURB,TOWNZONE_CENTRE), ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
		
		}
	graphics {
		default: 					switch_takamaro_03_sprites;
		construction_check: 		switch_takamaro_03_con_check;
		cargo_production: 			func_produce(2,1);
		//colour: 					rand_recolor_takamaro_03;
	}
}

// End takamaro_03

// Begin takamaro_04

spriteset (spr_takamaro_04, 							"src/gfx/houses_old/takamaro_04/building.png") 						{template_house_80(1,1)}
spriteset (spr_takamaro_04_snow, 						"src/gfx/houses_old/takamaro_04/building.png") 						{template_house_80(1,82)}
spriteset (spr_takamaro_04_ground, 						"src/gfx/houses_old/takamaro_04/ground.png") 						{template_house_80(1,1)}
spriteset (spr_takamaro_04_ground_snow, 				"src/gfx/houses_old/takamaro_04/ground.png") 						{template_house_80(1,82)}

spritelayout sprlay_takamaro_04_norm {
	ground {
		sprite: spr_takamaro_04_ground;
	}
	building {
		sprite: spr_takamaro_04;
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_takamaro_04_snow {
	ground {
		sprite: spr_takamaro_04_ground_snow;
	}
	building {
		sprite: spr_takamaro_04_snow;
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_takamaro_04_sprites, [
	// Check the rotation of the house
	STORE_TEMP(switch_road_adjacency(), 1),
	terrain_type == TILETYPE_SNOW])
	{1: sprlay_takamaro_04_snow; sprlay_takamaro_04_norm;}

// Recolouring
/*
random_switch (FEAT_HOUSES, SELF, rand_recolor_takamaro_04)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}
*/

// Construction Check
switch (FEAT_HOUSES, SELF, switch_takamaro_04_con_check, 
	HouseOfficeGap() ||				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
	AllowInHistDistrict()			// Can build close to Temple
	) {return;}	

item(FEAT_HOUSES, item_takamaro_04, 55, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						TTD_STR_TOWN_BUILDING_NAME_HOUSES_1;
		population: 				30;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1900,0xFFFF];
		minimum_lifetime: 			2;
		availability_mask: 			[bitmask(TOWNZONE_INNER_SUBURB,TOWNZONE_CENTRE), ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
		
		}
	graphics {
		default: 					switch_takamaro_04_sprites;
		construction_check: 		switch_takamaro_04_con_check;
		cargo_production: 			func_produce(2,1);
		//colour: 					rand_recolor_takamaro_04;
	}
}

// End takamaro_04

// Begin temple_01

// Sprites
spriteset (spr_temple_01, 							"src/gfx/landmarks/temple_01/temple.png") 						{template_house_128(1,1)}
spriteset (spr_temple_01_snow, 						"src/gfx/landmarks/temple_01/temple.png") 						{template_house_128(1,130)}

// Normal Sprites
spritelayout sprlay_temple_01_north {
	ground {
		sprite: spr_temple_01(3);
	}
	building {
		sprite: spr_temple_01(2);
		hide_sprite: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_temple_01_east {
	ground {
		sprite: spr_temple_01(3);
	}
	building {
		sprite: spr_temple_01(2);
		xoffset: 1;
		yoffset: 3;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_temple_01_west {
	ground {
		sprite: spr_temple_01(3);
	}
	building {
		sprite: spr_temple_01(0);
		xoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_temple_01_south {
	ground {
		sprite: spr_temple_01(3);
	}
	building {
		sprite: spr_temple_01(1);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_temple_01_snow_north {
	ground {
		sprite: spr_temple_01_snow(3);
	}
	building {
		sprite: spr_temple_01_snow(2);
		hide_sprite: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_temple_01_snow_east {
	ground {
		sprite: spr_temple_01_snow(3);
	}
	building {
		sprite: spr_temple_01_snow(2);
		xoffset: 1;
		yoffset: 3;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_temple_01_snow_west {
	ground {
		sprite: spr_temple_01_snow(3);
	}
	building {
		sprite: spr_temple_01_snow(0);
		xoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_temple_01_snow_south {
	ground {
		sprite: spr_temple_01_snow(3);
	}
	building {
		sprite: spr_temple_01_snow(1);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_temple_01_north,terrain_type) {
	TILETYPE_SNOW: sprlay_temple_01_snow_north;
	sprlay_temple_01_north;
}
switch(FEAT_HOUSES, SELF, switch_temple_01_east,terrain_type) {
	TILETYPE_SNOW: sprlay_temple_01_snow_east;
	sprlay_temple_01_east;
}
switch(FEAT_HOUSES, SELF, switch_temple_01_west,terrain_type) {
	TILETYPE_SNOW: sprlay_temple_01_snow_west;
	sprlay_temple_01_west;
}
switch(FEAT_HOUSES, SELF, switch_temple_01_south,terrain_type) {
	TILETYPE_SNOW: sprlay_temple_01_snow_south;
	sprlay_temple_01_south;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_temple_01)
	{
		//1: PALETTE_CC_RED;			Nah
		2: PALETTE_CC_LIGHT_BLUE;
		//1: PALETTE_CC_PINK;			Nah
		1: PALETTE_CC_DARK_BLUE;
		//1: PALETTE_CC_GREEN;			Nah
		2: PALETTE_CC_DARK_GREEN;
		//3: PALETTE_CC_CREAM;
		//1: PALETTE_CC_MAUVE;			Nah
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_temple_01_con_check, 
	IsCity() && 				// Can only appear in Cities
	IsUniqueHouse() && 			// Only one Temple per city
	OnGenerationOnly() && 		// Will only spawn when Map is generated - not realistic being built in modern times!
	HasRoadAdjacentSE2x2() &&	// Requires a road to the SE, due to sticking out entrance
	RandomBitsFour()) {return;}	// Think this makes the probability abouty a quarter

item(FEAT_HOUSES, item_temple_01, 66, HOUSE_SIZE_2X2){
	property {
		substitute: 				20; //Stadium since 2x2
		name: 						string(NAME_TEMPLE_01);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED, HOUSE_FLAG_CHURCH, HOUSE_FLAG_PROTECTED);
		population: 				100;
		accepted_cargos: 			[[PASS, 8],[MAIL, 1],[FOOD, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				5;
		years_available: 			[1700,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[ALL_TOWNZONES, bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class:				3;	
		}
	graphics {
		graphics_north: 			switch_temple_01_north;
		graphics_east: 				switch_temple_01_east;
		graphics_west: 				switch_temple_01_west;
		graphics_south: 			switch_temple_01_south;
		construction_check:			switch_temple_01_con_check;	
		cargo_production: 			func_produce(10,2);
		colour: 					rand_recolor_temple_01;
	}
}

// End temple_01

// Begin townhouses_01

spriteset (spr_townhouses_01, 							"src/gfx/townhouses/townhouses_01/building.png") 						{template_house_1dir(1,1)}
spriteset (spr_townhouses_01_snow, 						"src/gfx/townhouses/townhouses_01/building.png") 						{template_house_1dir(1,80)}
spriteset (spr_townhouses_01_ground, 						"src/gfx/townhouses/townhouses_01/ground.png") 						{template_house_1dir(1,1)}
spriteset (spr_townhouses_01_ground_snow, 				"src/gfx/townhouses/townhouses_01/ground.png") 						{template_house_1dir(1,80)}

spritelayout sprlay_townhouses_01_norm {
	ground {
		sprite: spr_townhouses_01_ground(LOAD_TEMP(1));
	}
	building {
		sprite: spr_townhouses_01(LOAD_TEMP(1));
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_townhouses_01_snow {
	ground {
		sprite: spr_townhouses_01_ground_snow(LOAD_TEMP(1));
	}
	building {
		sprite: spr_townhouses_01_snow(LOAD_TEMP(1));
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

switch (FEAT_HOUSES, SELF, switch_townhouses_01_sprites, [ 
 	// Check for snow and set the groundsprite in temporary variable 0
 	STORE_TEMP(GROUNDSPRITE_NORMAL, 0),
 	STORE_TEMP(terrain_type == TILETYPE_SNOW ? GROUNDSPRITE_SNOW : LOAD_TEMP(0), 0),
	// Check the rotation of the house
	STORE_TEMP(switch_road_adjacency(), 1),
	terrain_type == TILETYPE_SNOW])
	{1: sprlay_townhouses_01_snow; sprlay_townhouses_01_norm;}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_townhouses_01)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

switch (FEAT_HOUSES, SELF, switch_townhouses_01_con_check, 
	HouseOfficeGap() &&				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
	BanFromHistDistrict()			// Can build close to Temple
	) {return;}	

item(FEAT_HOUSES, item_townhouses_01, 06, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						TTD_STR_TOWN_BUILDING_NAME_HOUSES_1;
		population: 				30;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1945,0xFFFF];
		minimum_lifetime: 			2;
		availability_mask: 			[bitmask(TOWNZONE_INNER_SUBURB,TOWNZONE_CENTRE), ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
		
		}
	graphics {
		default: 					switch_townhouses_01_sprites;
		construction_check: 		switch_townhouses_01_con_check;
		cargo_production: 			func_produce(4,1);
		colour: 					rand_recolor_townhouses_01;
	}
}

// End townhouses_01

// Begin townhouses_02

spriteset (spr_townhouses_02, 							"src/gfx/townhouses/townhouses_02/building.png") 						{template_house_1dir(1,1)}
spriteset (spr_townhouses_02_snow, 						"src/gfx/townhouses/townhouses_02/building.png") 						{template_house_1dir(1,80)}
spriteset (spr_townhouses_02_ground, 						"src/gfx/townhouses/townhouses_02/ground.png") 						{template_house_1dir(1,1)}
spriteset (spr_townhouses_02_ground_snow, 				"src/gfx/townhouses/townhouses_02/ground.png") 						{template_house_1dir(1,80)}

spritelayout sprlay_townhouses_02_norm {
	ground {
		sprite: spr_townhouses_02_ground(LOAD_TEMP(1));
	}
	building {
		sprite: spr_townhouses_02(LOAD_TEMP(1));
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_townhouses_02_snow {
	ground {
		sprite: spr_townhouses_02_ground_snow(LOAD_TEMP(1));
	}
	building {
		sprite: spr_townhouses_02_snow(LOAD_TEMP(1));
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

switch (FEAT_HOUSES, SELF, switch_townhouses_02_sprites, [ 
 	// Check for snow and set the groundsprite in temporary variable 0
 	STORE_TEMP(GROUNDSPRITE_NORMAL, 0),
 	STORE_TEMP(terrain_type == TILETYPE_SNOW ? GROUNDSPRITE_SNOW : LOAD_TEMP(0), 0),
	// Check the rotation of the house
	STORE_TEMP(switch_road_adjacency(), 1),
	terrain_type == TILETYPE_SNOW])
	{1: sprlay_townhouses_02_snow; sprlay_townhouses_02_norm;}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_townhouses_02)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

switch (FEAT_HOUSES, SELF, switch_townhouses_02_con_check, 
	HouseOfficeGap() &&				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
	BanFromHistDistrict()			// Can't build close to Temple
	) {return;}	

item(FEAT_HOUSES, item_townhouses_02, 05, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						TTD_STR_TOWN_BUILDING_NAME_HOUSES_1;
		population: 				30;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1945,0xFFFF];
		minimum_lifetime: 			2;
		availability_mask: 			[bitmask(TOWNZONE_INNER_SUBURB,TOWNZONE_CENTRE), ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
		
		}
	graphics {
		default: 					switch_townhouses_02_sprites;
		construction_check: 		switch_townhouses_02_con_check;
		cargo_production: 			func_produce(4,1);
		colour: 					rand_recolor_townhouses_02;
	}
}

// End townhouses_02
