/* *** Begin Header *** */

/*
*	Welcome to JPplusBuildings!
*/

grf {
	grfid: 						"KR04";
	name: 						string(STR_GRF_NAME);
	desc: 						string(STR_GRF_DESC);
	version: 					3;
	min_compatible_version: 	1;
	url: 						string(STR_WEBSITE);

	param 0 {
  		param_commercial_cargoes {
			type: 				int;
   			name: 				string(STR_PARAM_NAME_COMMERCIAL_CARGOES);
   			desc: 				string(STR_PARAM_DESC_COMMERCIAL_CARGOES);
   			def_value: 			0;
			min_value:			0;
			max_value:			1;
			names: {
				0: string(STR_PARAM_VALUE_COMMERCIAL_CARGOES_NONE);
				1: string(STR_PARAM_VALUE_COMMERCIAL_CARGOES_MAIL_ONLY);
			};
   		}
	}
}

if (version_openttd(1,10,0,28004) > openttd_version) {
	error(FATAL, string(STR_ERROR_GAME_VERSION));
}

disable_item(FEAT_HOUSES);

/* *** End Header *** */

/* Begin HouseGap */

/* 	
	Function for Houses and Town Houses, so they cannot build within 2 tiles of;
	
	* Building Class 2 - Shops and Offices
	* Building Class 5 - Skyscrapers

	If all tiles are neither Class 2 or Class 5, then HouseOfficeGap will return 1, and therefore allow construction
*/

switch(FEAT_HOUSES, SELF, HouseOfficeGap,
	// Shops and Offices
	nearby_tile_house_class(0,1) != 258 &&
	nearby_tile_house_class(0,-1) != 258 &&
	nearby_tile_house_class(1,0) != 258 &&
	nearby_tile_house_class(1,1) != 258 &&
	nearby_tile_house_class(1,-1) != 258 &&
	nearby_tile_house_class(-1,0) != 258 &&
	nearby_tile_house_class(-1,1) != 258 &&
	nearby_tile_house_class(-1,-1) != 258 &&
	nearby_tile_house_class(-2,-2) != 258 &&
	nearby_tile_house_class(-2,-1) != 258 &&
	nearby_tile_house_class(-2,0) != 258 &&
	nearby_tile_house_class(-2,1) != 258 &&
	nearby_tile_house_class(-2,2) != 258 &&
	nearby_tile_house_class(-1,-2) != 258 &&
	nearby_tile_house_class(-1,2) != 258 &&
	nearby_tile_house_class(0,-2) != 258 &&
	nearby_tile_house_class(0,-2) != 258 &&
	nearby_tile_house_class(1,-2) != 258 &&
	nearby_tile_house_class(1,-2) != 258 &&
	nearby_tile_house_class(2,-2) != 258 &&
	nearby_tile_house_class(2,-1) != 258 &&
	nearby_tile_house_class(2,0) != 258 &&
	nearby_tile_house_class(2,1) != 258 &&
	nearby_tile_house_class(2,2) != 258 &&
	// Skyscrapers
	nearby_tile_house_class(0,1) != 261 &&
	nearby_tile_house_class(0,-1) != 261 &&
	nearby_tile_house_class(1,0) != 261 &&
	nearby_tile_house_class(1,1) != 261 &&
	nearby_tile_house_class(1,-1) != 261 &&
	nearby_tile_house_class(-1,0) != 261 &&
	nearby_tile_house_class(-1,1) != 261 &&
	nearby_tile_house_class(-1,-1) != 261 &&
	nearby_tile_house_class(-2,-2) != 261 &&
	nearby_tile_house_class(-2,-1) != 261 &&
	nearby_tile_house_class(-2,0) != 261 &&
	nearby_tile_house_class(-2,1) != 261 &&
	nearby_tile_house_class(-2,2) != 261 &&
	nearby_tile_house_class(-1,-2) != 261 &&
	nearby_tile_house_class(-1,2) != 261 &&
	nearby_tile_house_class(0,-2) != 261 &&
	nearby_tile_house_class(0,-2) != 261 &&
	nearby_tile_house_class(1,-2) != 261 &&
	nearby_tile_house_class(1,-2) != 261 &&
	nearby_tile_house_class(2,-2) != 261 &&
	nearby_tile_house_class(2,-1) != 261 &&
	nearby_tile_house_class(2,0) != 261 &&
	nearby_tile_house_class(2,1) != 261 &&
	nearby_tile_house_class(2,2) != 261
		){return;}

/* End HouseGap */

/* Begin Function Population Adder */

// Function to add the the numbers of residential building, with a population factor based on size
switch(FEAT_HOUSES, SELF, FuncPopulationAdder,
	(
	// Houses
	(other_house_count_town(19)*2)+ 	// Nishikawa House
	(other_house_count_town(20)*2)+ 	// Nishikawa House
	(other_house_count_town(21)*2)+ 	// Nishikawa House
	(other_house_count_town(22)*2)+ 	// Nishikawa House
	(other_house_count_town(26)*2)+ 	// Naganuma House
	(other_house_count_town(25)*2)+ 	// Naganuma House
	(other_house_count_town(24)*2)+ 	// Naganuma House
	(other_house_count_town(23)*2)+ 	// Naganuma House

	// Old Houses
	(other_house_count_town(13)*2)+ 	// Dense Wooden
	(other_house_count_town(01)*2)+ 	// Wooden Townhouse 01
	(other_house_count_town(03)*2)+ 	// Wooden Townhouse 02
	(other_house_count_town(04)*2)+ 	// Wooden Townhouse 03
	(other_house_count_town(08)*2)+ 	// Wooden Townhouse 04
	
	// Town Houses
	(other_house_count_town(05)*3)+ 	// Townhouses_02
	(other_house_count_town(06)*3)+ 	// Townhouses_01
	
	// Apartments		
	(other_house_count_town(27)*10)+ 	// Apartments_01
	(other_house_count_town(30)*10)+ 	// Apartments_02
	(other_house_count_town(31)*10)+ 	// Apartments_03
	(other_house_count_town(56)*10)+ 	// Apartments_04
	(other_house_count_town(32)*10)+ 	// Apartments_05	

	// Small Apartments
	(other_house_count_town(02)*4)+ 	// Small Apartments 01
	(other_house_count_town(44)*4)+ 	// Small Apartments 02
	(other_house_count_town(45)*4) 		// Small Apartments 03
	)
) {return;}

/* End Function Population Adder */

/* Begin Modern Office Population Check */

switch (FEAT_HOUSES, SELF, ModernOfficePopCheck, 
	((1 + same_class_count_town) * 60) 
	
	< 

	(
	(other_class_count_town(00) * 2)	+	// Houses
	(other_class_count_town(01) * 3)	+	// Townhouses
	(other_class_count_town(03) * 4)	+	// Small Apartments
	(other_class_count_town(04) * 10)		// Apartments
	)

) {return;}

/* End Modern Office Population Check */

/* Begin ClassTwoWithinTwoTiles */

/* Note: Per NML specs, returns 256+X (X = 0..255) if the house has been defined by this NewGRF with building_class X */

switch(FEAT_HOUSES, SELF, ClassTwoWithinTwoTiles,
	// Within One Tile
    nearby_tile_house_class( 0, 1) == 258 ||
	nearby_tile_house_class( 0,-1) == 258 ||
	nearby_tile_house_class( 1, 0) == 258 ||
	nearby_tile_house_class( 1, 1) == 258 ||
	nearby_tile_house_class( 1,-1) == 258 ||
	nearby_tile_house_class(-1, 0) == 258 ||
	nearby_tile_house_class(-1, 1) == 258 ||
	nearby_tile_house_class(-1,-1) == 258 ||
    // Within Two Tiles
    nearby_tile_house_class( 0, 2) == 258 ||
	nearby_tile_house_class( 0,-2) == 258 ||
	nearby_tile_house_class( 1, 2) == 258 ||
	nearby_tile_house_class( 1,-2) == 258 ||
    nearby_tile_house_class(-1, 2) == 258 ||
	nearby_tile_house_class(-1,-2) == 258 ||
    nearby_tile_house_class( 2, 2) == 258 ||
	nearby_tile_house_class( 2,-2) == 258 ||
    nearby_tile_house_class(-2, 2) == 258 ||
	nearby_tile_house_class(-2,-2) == 258 ||
    nearby_tile_house_class( 2,-1) == 258 ||
    nearby_tile_house_class(-2,-1) == 258 ||
	nearby_tile_house_class( 2, 0) == 258 ||
    nearby_tile_house_class(-2, 0) == 258 ||
    nearby_tile_house_class( 2, 1) == 258 ||
    nearby_tile_house_class(-2, 1) == 258
		){return;}

/* End ClassTwoWithinTwoTiles */

/* Begin CommericalWithinOneTile */

/* Note: Per NML specs, returns 256+X (X = 0..255) if the house has been defined by this NewGRF with building_class X */

switch(FEAT_HOUSES, SELF, CommercialWithinOneTile,
	// Shops and Offices
	nearby_tile_house_class( 0, 1) == 258 ||
	nearby_tile_house_class( 0,-1) == 258 ||
	nearby_tile_house_class( 1, 0) == 258 ||
	nearby_tile_house_class( 1, 1) == 258 ||
	nearby_tile_house_class( 1,-1) == 258 ||
	nearby_tile_house_class(-1, 0) == 258 ||
	nearby_tile_house_class(-1, 1) == 258 ||
	nearby_tile_house_class(-1,-1) == 258 ||
	// Skyscrapers
	nearby_tile_house_class( 0, 1) == 261 ||
	nearby_tile_house_class( 0,-1) == 261 ||
	nearby_tile_house_class( 1, 0) == 261 ||
	nearby_tile_house_class( 1, 1) == 261 ||
	nearby_tile_house_class( 1,-1) == 261 ||
	nearby_tile_house_class(-1, 0) == 261 ||
	nearby_tile_house_class(-1, 1) == 261 ||
	nearby_tile_house_class(-1,-1) == 261
		){return;}

/* End CommericalWithinOneTile */

/* Begin NoCommericalWithinOneTile */

/* Note: Per NML specs, returns 256+X (X = 0..255) if the house has been defined by this NewGRF with building_class X */

// This function is required since Class 0 buildings will be checking for Class 2 and Class 5 buildings

switch(FEAT_HOUSES, SELF, NoCommercialWithinOneTile,
	// Shops and Offices
	nearby_tile_house_class( 0, 1) != 258 &&
	nearby_tile_house_class( 0,-1) != 258 &&
	nearby_tile_house_class( 1, 0) != 258 &&
	nearby_tile_house_class( 1, 1) != 258 &&
	nearby_tile_house_class( 1,-1) != 258 &&
	nearby_tile_house_class(-1, 0) != 258 &&
	nearby_tile_house_class(-1, 1) != 258 &&
	nearby_tile_house_class(-1,-1) != 258 &&
	// Skyscrapers
	nearby_tile_house_class( 0, 1) != 261 &&
	nearby_tile_house_class( 0,-1) != 261 &&
	nearby_tile_house_class( 1, 0) != 261 &&
	nearby_tile_house_class( 1, 1) != 261 &&
	nearby_tile_house_class( 1,-1) != 261 &&
	nearby_tile_house_class(-1, 0) != 261 &&
	nearby_tile_house_class(-1, 1) != 261 &&
	nearby_tile_house_class(-1,-1) != 261
		){return;}

/* End NoCommericalWithinOneTile */

/* Begin AcrossAnAvenue */

/* Purpose of this function is to allow Class 2 and Class 5 to build across an Avenue, i.e. 2 or 3 tile wide roads/trams */
switch (FEAT_HOUSES, SELF, AcrossAnAvenue, 
		// Direction 1
	(	
		(
			(	
			nearby_tile_class( 0,-1) == TILE_CLASS_ROAD && 
			nearby_tile_class( 0,-2) == TILE_CLASS_ROAD 
			) 
			&& 
			(	
			nearby_tile_house_class ( 0,-3) == 258 || 
			nearby_tile_house_class ( 0,-3) == 261
			)
		)
		||
		(
			(
			nearby_tile_class( 0,-1) == TILE_CLASS_ROAD && 
			nearby_tile_class( 0,-2) == TILE_CLASS_ROAD &&
			nearby_tile_class( 0,-3) == TILE_CLASS_ROAD
			)
			&&
			(
			nearby_tile_house_class ( 0,-4) == 258 || 
			nearby_tile_house_class ( 0,-4) == 261 
			)
		)
	) 
	
	||	// Direction 2 

	(	
		(
			(	
			nearby_tile_class( 0, 1) == TILE_CLASS_ROAD && 
			nearby_tile_class( 0, 2) == TILE_CLASS_ROAD 
			) 
			&& 
			(	
			nearby_tile_house_class ( 0, 3) == 258 || 
			nearby_tile_house_class ( 0, 3) == 261
			)
		)
		||
		(
			(
			nearby_tile_class( 0, 1) == TILE_CLASS_ROAD && 
			nearby_tile_class( 0, 2) == TILE_CLASS_ROAD &&
			nearby_tile_class( 0, 3) == TILE_CLASS_ROAD
			)
			&&
			(
			nearby_tile_house_class ( 0, 4) == 258 || 
			nearby_tile_house_class ( 0, 4) == 261 
			)
		)
	) 
	
	|| 	// Direction 3

	(	
		(
			(	
			nearby_tile_class(-1, 0) == TILE_CLASS_ROAD && 
			nearby_tile_class(-2, 0) == TILE_CLASS_ROAD 
			) 
			&& 
			(	
			nearby_tile_house_class (-3, 0) == 258 || 
			nearby_tile_house_class (-3, 0) == 261
			)
		)
		||
		(
			(
			nearby_tile_class(-1, 0) == TILE_CLASS_ROAD && 
			nearby_tile_class(-2, 0) == TILE_CLASS_ROAD &&
			nearby_tile_class(-3, 0) == TILE_CLASS_ROAD
			)
			&&
			(
			nearby_tile_house_class (-4, 0) == 258 || 
			nearby_tile_house_class (-4, 0) == 261 
			)
		)
	) 
		
	||	// Direction 4

	(	
		(
			(	
			nearby_tile_class( 1, 0) == TILE_CLASS_ROAD && 
			nearby_tile_class( 2, 0) == TILE_CLASS_ROAD 
			) 
			&& 
			(	
			nearby_tile_house_class ( 3, 0) == 258 || 
			nearby_tile_house_class ( 3, 0) == 261
			)
		)
		||
		(
			(
			nearby_tile_class( 1, 0) == TILE_CLASS_ROAD && 
			nearby_tile_class( 2, 0) == TILE_CLASS_ROAD &&
			nearby_tile_class( 3, 0) == TILE_CLASS_ROAD
			)
			&&
			(
			nearby_tile_house_class ( 4, 0) == 258 || 
			nearby_tile_house_class ( 4, 0) == 261 
			)
		)
	) 
) {return;}

/* End AcrossAnAvenue */

/* Begin Across Tracks */

switch (FEAT_HOUSES, SELF, AcrossTracks, 
	nearby_tile_class( 0,-1) == TILE_CLASS_RAIL || 
	nearby_tile_class( 0, 1) == TILE_CLASS_RAIL || 
	nearby_tile_class(-1, 0) == TILE_CLASS_RAIL || 
	nearby_tile_class( 1, 0) == TILE_CLASS_RAIL
	) {return;}

/* End Across Tracks */

/* Begin one_liners */

/* Function to check if City */
switch (FEAT_HOUSES, PARENT, IsCity, is_city == 1) {return;}

/* Population must be over a certain level */
switch (FEAT_HOUSES, PARENT, PopOver10k, population >= 10000) {return;}
switch (FEAT_HOUSES, PARENT, PopOver30k, population >= 30000) {return;}
switch (FEAT_HOUSES, PARENT, PopOver50k, population >= 50000) {return;}
switch (FEAT_HOUSES, PARENT, PopOver70k, population >= 70000) {return;}

/* House is Unique */
switch (FEAT_HOUSES, SELF, IsUniqueHouse, same_house_count_town == 0) {return;}

/* Can only appear when town is being generated */
switch (FEAT_HOUSES, SELF, OnGenerationOnly, generating_town == 1) {return;}

/* Probabilities */
switch (FEAT_HOUSES, SELF, RandomBitsFour, random_bits % 4 == 0) {return;}

/* Range Checks */
switch (FEAT_HOUSES, SELF, TwentyTileGap, nearest_house_matching_criterion(20, SEARCH_HOUSE_BY_TYPE) == 0 ) {return;}
switch (FEAT_HOUSES, SELF, ThirtyTileGap, nearest_house_matching_criterion(30, SEARCH_HOUSE_BY_TYPE) == 0 ) {return;}

switch (FEAT_HOUSES, SELF, WithinTwoOfSameClass, nearest_house_matching_criterion(2, SEARCH_HOUSE_BY_CLASS) >= 1 || same_class_count_town == 0 ) {return;}
switch (FEAT_HOUSES, SELF, WithinThreeOfSameClass, nearest_house_matching_criterion(3, SEARCH_HOUSE_BY_CLASS) >= 1 || same_class_count_town == 0 ) {return;}

/* Check for road (and stations) in adjacent tiles functions */
//switch (FEAT_HOUSES, SELF, HasRoadAdjacentNW, nearby_tile_class( 0,-1) == TILE_CLASS_ROAD || nearby_tile_class( 0,-1) == TILE_CLASS_STATION) {return;}
switch (FEAT_HOUSES, SELF, HasRoadAdjacentSE, nearby_tile_class( 0, 1) == TILE_CLASS_ROAD || nearby_tile_class( 0, 1) == TILE_CLASS_STATION) {return;}
switch (FEAT_HOUSES, SELF, HasRoadAdjacentSW, nearby_tile_class( 1, 0) == TILE_CLASS_ROAD || nearby_tile_class( 1, 0) == TILE_CLASS_STATION) {return;}

switch (FEAT_HOUSES, SELF, HasRoadAdjacentSE2x2, nearby_tile_class(0,2) == TILE_CLASS_ROAD || nearby_tile_class(0,2) == TILE_CLASS_STATION) {return;}

switch (FEAT_HOUSES, SELF, HasRoadAdjacentNWSW, nearby_tile_class( 0,-1) == TILE_CLASS_ROAD || nearby_tile_class( 0,-1) == TILE_CLASS_STATION || 
	nearby_tile_class( 1, 0) == TILE_CLASS_ROAD || nearby_tile_class( 1, 0) == TILE_CLASS_STATION) {return;}

/* End one_liners */

/* Begin Cargo Service Checks */

/* Functions checking for service of cargoes */

// Passenger Service
switch(FEAT_HOUSES, SELF, FuncServicePASS, 	(cargo_accepted_nearby_last_month(PASS) == 1 || cargo_accepted_nearby_this_month(PASS) == 1)) {return;}
switch(FEAT_HOUSES, SELF, FuncNoServicePASS, (cargo_accepted_nearby_last_month(PASS) == 0 && cargo_accepted_nearby_this_month(PASS) == 0)) {return;}
// Mail Service
switch(FEAT_HOUSES, SELF, FuncServiceMAIL, 	(cargo_accepted_nearby_last_month(MAIL) == 1 || cargo_accepted_nearby_this_month(MAIL) == 1)) {return;}
// Petroleum Fuels Service - for Petrol Stations
switch(FEAT_HOUSES, SELF, FuncServicePETR, (cargo_accepted_nearby_last_month(PETR) == 1 || cargo_accepted_nearby_this_month(PETR) == 1)) {return;}
// Alcohol Service - for Stadiums
switch(FEAT_HOUSES, SELF, FuncServiceBEER, (cargo_accepted_nearby_last_month(BEER) == 1 || cargo_accepted_nearby_this_month(BEER) == 1)) {return;}
// Food Service - for Stadiums
switch(FEAT_HOUSES, SELF, FuncServiceFOOD, (cargo_accepted_nearby_last_month(FOOD) == 1 || cargo_accepted_nearby_this_month(FOOD) == 1)) {return;}
// Food Service - for Stadiums
switch(FEAT_HOUSES, SELF, FuncServiceEOIL, (cargo_accepted_nearby_last_month(EOIL) == 1 || cargo_accepted_nearby_this_month(EOIL) == 1)) {return;}
// Food Service - for Stadiums
switch(FEAT_HOUSES, SELF, FuncServiceFISH, (cargo_accepted_nearby_last_month(FISH) == 1 || cargo_accepted_nearby_this_month(FISH) == 1)) {return;}
// Chemicals Service - for Stadiums
switch(FEAT_HOUSES, SELF, FuncServiceRFPR, (cargo_accepted_nearby_last_month(RFPR) == 1 || cargo_accepted_nearby_this_month(RFPR) == 1)) {return;}
// Fruit - for Shops
switch(FEAT_HOUSES, SELF, FuncServiceFRUT, (cargo_accepted_nearby_last_month(FRUT) == 1 || cargo_accepted_nearby_this_month(FRUT) == 1)) {return;}
// Cassava - for shops
switch(FEAT_HOUSES, SELF, FuncServiceCASS, (cargo_accepted_nearby_last_month(CASS) == 1 || cargo_accepted_nearby_this_month(CASS) == 1)) {return;}
// Goods - for various
switch(FEAT_HOUSES, SELF, FuncServiceGOOD, (cargo_accepted_nearby_last_month(GOOD) == 1 || cargo_accepted_nearby_this_month(GOOD) == 1)) {return;}

/* End Cargo Service Checks */

/* Begin Small Apartments Check */

/* Used to control placement of Small Apartments */
switch(FEAT_HOUSES, SELF, SmallApartmentsCheck,
	// If there is NO PASS Service, but would be beside a Commercial building (which will have PASS service)
	(FuncNoServicePASS() && CommercialWithinOneTile() )	
	// OR
	||	
	// There is PASS service and is not beside a Commercial building
	(FuncServicePASS() && NoCommercialWithinOneTile() )
){return;}

/* End Small Apartments Check */

/* Begin Cluster Building Class */

// Buildings after the first of the class must cluster near the same class
switch (FEAT_HOUSES, SELF, ClusterBuildingClass, 
	same_class_count_town == 0 || 								// No building of same class in town OR
	AcrossAnAvenue()  ||										// Allowing buildings accross an avenue ('wide' road) OR
	(WithinThreeOfSameClass() && AcrossTracks() ) ||			// Same class within 3 and track beside new building OR
	WithinTwoOfSameClass()										// Same class within 2
	) {return;}

/* End Cluster Building Class */

/* Begin If First Skyscraper */

// Allow first skyscraper to build near Class 2
switch (FEAT_HOUSES, SELF, IfFirstSkyscraper, 
	((same_class_count_town == 0 && ClassTwoWithinTwoTiles() ) || 
	nearest_house_matching_criterion(2, SEARCH_HOUSE_BY_CLASS) >= 1 )
	) {return;}

/* End If First Skyscraper */

/* Begin Commercial Cargoes */

switch(FEAT_HOUSES, SELF, CommercialCargoes,
	param_commercial_cargoes == 0 ||                            // No Cargo requirements - return 1 if no cargoes selected 
	(param_commercial_cargoes == 1 && FuncServiceMAIL() )       // Mail - return 1 if Mail delivered
) {return;}

/* End Commercial Cargoes*/

/* Begin cargotable */

cargotable {
	PASS, 		// Obviously
	MAIL, 		// Obviously
	GOOD, 		// For Commercial Buildings
	CASS,		// For Shops
	EOIL,		// For Restaurants
	FISH,		// For Restaurants
	FOOD, 		// For Stadiums and Restaurants
	FRUT,		// For Shops
	JAVA,		// For Restaurants
	LVST,		// For Restaurants
	BEER, 		// For Stadiums
	PETR,		// For Petrol Stations
	RFPR,		// For Hospitals	
}

/* Production loop, shared by all houses. Individual production rates stored in temporary registers in the function below.*/

switch (FEAT_HOUSES, SELF, switch_alt_production, getbits(extra_callback_info1, 0, 8)) {
	0: (PASS * 256) + (abs(extra_callback_info2 % 8) == 0) * LOAD_TEMP(1);
	1: (MAIL * 256) + (abs(extra_callback_info2 % 8) == 0) * LOAD_TEMP(2);
	return CB_RESULT_HOUSE_NO_MORE_PRODUCTION;
}

/* Production levels for passengers and mail, are passed as arguments to this function for use in the production loop. */
switch (FEAT_HOUSES, SELF, func_produce, pass, mail, [STORE_TEMP(pass, 1), STORE_TEMP(mail, 2)] ) {switch_alt_production;}

/* End cargotable */

// Begin Sprite Templates


// Only 1 sprites to be used in four directions
template template_house_con(x, y) {   
	//left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    sw: [ x,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    nw: [ x,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    ne: [ x,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
}

template template_house_1dir(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    sw: [ x,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    nw: [ x,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    ne: [ x,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
}

template template_house_con_phases(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    nw: [ x+130,	y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    ne: [ x+195,	y,		64,		78,		-31,		-46,	NOCROP | ANIM]
}

template template_house_80_1dir(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    sw: [ x,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    nw: [ x,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    ne: [ x,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
}

template template_house_80_2dir(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    nw: [ x,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    ne: [ x+65,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
}

template template_house_80(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    nw: [ x+130,	y,		64,		80,		-31,		-48,	NOCROP | ANIM]
    ne: [ x+195,	y,		64,		80,		-31,		-48,	NOCROP | ANIM]
}

template template_house_80_wide(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		76,		80,	    -37,		-48,	NOCROP | ANIM]
    sw: [ x+77,		y,		76,		80,	    -37,		-48,	NOCROP | ANIM]  
    nw: [ x+154,	y,		76,		80,	    -37,		-48,	NOCROP | ANIM]
    ne: [ x+231,	y,		76,		80,	    -37,		-48,	NOCROP | ANIM]
}

template template_house_100_1dir(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		100,	-31,		-68,	NOCROP | ANIM]
    sw: [ x,		y,		64,		100,	-31,		-68,	NOCROP | ANIM]
    nw: [ x,		y,		64,		100,	-31,		-68,	NOCROP | ANIM]
    ne: [ x,		y,		64,		100,	-31,		-68,	NOCROP | ANIM]
}

template template_house_100(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		100,	-31,		-68,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		100,	-31,		-68,	NOCROP | ANIM]
    nw: [ x+130,	y,		64,		100,	-31,		-68,	NOCROP | ANIM]
    ne: [ x+195,	y,		64,		100,	-31,		-68,	NOCROP | ANIM]
}

template template_house_128_1dir(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		128,	-31,		-96,	NOCROP | ANIM]
    sw: [ x,		y,		64,		128,	-31,		-96,	NOCROP | ANIM]
    nw: [ x,		y,		64,		128,	-31,		-96,	NOCROP | ANIM]
    ne: [ x,		y,		64,		128,	-31,		-96,	NOCROP | ANIM]
}

template template_house_128(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		128,	-31,		-96,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		128,	-31,		-96,	NOCROP | ANIM]
    nw: [ x+130,	y,		64,		128,	-31,		-96,	NOCROP | ANIM]
    ne: [ x+195,	y,		64,		128,	-31,		-96,	NOCROP | ANIM]
}

template template_house_200(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		200,	-31,		-168,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		200,	-31,		-168,	NOCROP | ANIM]
    nw: [ x+130,	y,		64,		200,	-31,		-168,	NOCROP | ANIM]
    ne: [ x+195,	y,		64,		200,	-31,		-168,	NOCROP | ANIM]
}

template template_house_200_wide(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		76,		200,	-37,		-168,	NOCROP | ANIM]
    sw: [ x+77,		y,		76,		200,	-37,		-168,	NOCROP | ANIM]  
    nw: [ x+154,	y,		76,		200,	-37,		-168,	NOCROP | ANIM]
    ne: [ x+231,	y,		76,		200,	-37,		-168,	NOCROP | ANIM]
}

template template_house_250(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		250,	-31,		-218,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		250,	-31,		-218,	NOCROP | ANIM]  
    nw: [ x+130,	y,		64,		250,	-31,		-218,	NOCROP | ANIM]
    ne: [ x+195,	y,		64,		250,	-31,		-218,	NOCROP | ANIM]
}

template template_house_250_wide(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		76,		250,	-37,		-218,	NOCROP | ANIM]
    sw: [ x+77,		y,		76,		250,	-37,		-218,	NOCROP | ANIM]  
    nw: [ x+154,	y,		76,		250,	-37,		-218,	NOCROP | ANIM]
    ne: [ x+231,	y,		76,		250,	-37,		-218,	NOCROP | ANIM]
}


template template_house_2dir(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    se: [ x,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    sw: [ x+65,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    nw: [ x,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
    ne: [ x+65,		y,		64,		78,		-31,		-46,	NOCROP | ANIM]
}

/* Rotation checks for buildings to face roads */

// Bus stops are TILE_CLASS_STATION, not TILE_CLASS_ROAD. If the building is not adjacent to a road (below) it may be adacent to a bus stop which it should face.
// Note: This will make buildings truly not adjacent to a road, but adjacent to a station (of any type) face the station.
switch (FEAT_HOUSES, SELF, switch_station_adj_ne, nearby_tile_class(-1,0) == TILE_CLASS_STATION)
	{1: return 3; return 0;}
switch (FEAT_HOUSES, SELF, switch_station_adj_nw, nearby_tile_class(0,-1) == TILE_CLASS_STATION)
	{1: return 2; switch_station_adj_ne;}
switch (FEAT_HOUSES, SELF, switch_station_adj_sw, nearby_tile_class(1,0) == TILE_CLASS_STATION)
	{1: return 1; switch_station_adj_nw;}
switch (FEAT_HOUSES, SELF, switch_station_adj_se, nearby_tile_class(0,1) == TILE_CLASS_STATION)
	{1: return 0; switch_station_adj_sw;}
// Check for roads first
switch (FEAT_HOUSES, SELF, switch_road_adj_ne, nearby_tile_class(-1,0) == TILE_CLASS_ROAD)
	{1: return 3; switch_station_adj_se;}
switch (FEAT_HOUSES, SELF, switch_road_adj_nw, nearby_tile_class(0,-1) == TILE_CLASS_ROAD)
	{1: return 2; switch_road_adj_ne;}
switch (FEAT_HOUSES, SELF, switch_road_adj_sw, nearby_tile_class(1,0) == TILE_CLASS_ROAD)
	{1: return 1; switch_road_adj_nw;}
switch (FEAT_HOUSES, SELF, switch_road_adj_se, nearby_tile_class(0,1) == TILE_CLASS_ROAD)
	{1: return 0; switch_road_adj_sw;}

switch (FEAT_HOUSES,SELF, switch_road_adjacency, 1) {switch_road_adj_se;}

// End Sprite Templates
// Begin townhouses_01

spriteset (spr_townhouses_01, 							"src/gfx/houses/townhouses_01/building.png") 						{template_house_1dir(1,1)}
spriteset (spr_townhouses_01_snow, 						"src/gfx/houses/townhouses_01/building.png") 						{template_house_1dir(1,80)}
spriteset (spr_townhouses_01_ground, 					"src/gfx/houses/townhouses_01/ground.png") 						{template_house_1dir(1,1)}
spriteset (spr_townhouses_01_ground_snow, 				"src/gfx/houses/townhouses_01/ground.png") 						{template_house_1dir(1,80)}

spritelayout sprlay_townhouses_01_norm {
	ground {
		sprite: spr_townhouses_01_ground(LOAD_TEMP(1));
	}
	building {
		sprite: spr_townhouses_01(LOAD_TEMP(1));
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_townhouses_01_snow {
	ground {
		sprite: spr_townhouses_01_ground_snow(LOAD_TEMP(1));
	}
	building {
		sprite: spr_townhouses_01_snow(LOAD_TEMP(1));
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

switch (FEAT_HOUSES, SELF, switch_townhouses_01_sprites, [ 
 	// Check for snow and set the groundsprite in temporary variable 0
 	STORE_TEMP(GROUNDSPRITE_NORMAL, 0),
 	STORE_TEMP(terrain_type == TILETYPE_SNOW ? GROUNDSPRITE_SNOW : LOAD_TEMP(0), 0),
	// Check the rotation of the house
	STORE_TEMP(switch_road_adjacency(), 1),
	terrain_type == TILETYPE_SNOW])
	{1: sprlay_townhouses_01_snow; sprlay_townhouses_01_norm;}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_townhouses_01)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

switch (FEAT_HOUSES, SELF, switch_townhouses_01_con_check, 
	HouseOfficeGap() 				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
) {return;}	

item(FEAT_HOUSES, item_townhouses_01, 06, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						TTD_STR_TOWN_BUILDING_NAME_HOUSES_1;
		population: 				30;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1945,0xFFFF];
		minimum_lifetime: 			2;
		availability_mask: 			[bitmask(TOWNZONE_INNER_SUBURB,TOWNZONE_CENTRE), ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
		building_class:				1;
		
		}
	graphics {
		default: 					switch_townhouses_01_sprites;
		construction_check: 		switch_townhouses_01_con_check;
		cargo_production: 			func_produce(4,1);
		colour: 					rand_recolor_townhouses_01;
	}
}

// End townhouses_01

// Begin townhouses_02

spriteset (spr_townhouses_02, 							"src/gfx/houses/townhouses_02/building.png") 					{template_house_1dir(1,1)}
spriteset (spr_townhouses_02_snow, 						"src/gfx/houses/townhouses_02/building.png") 					{template_house_1dir(1,80)}
spriteset (spr_townhouses_02_ground, 					"src/gfx/houses/townhouses_02/ground.png") 						{template_house_1dir(1,1)}
spriteset (spr_townhouses_02_ground_snow, 				"src/gfx/houses/townhouses_02/ground.png") 						{template_house_1dir(1,80)}

spritelayout sprlay_townhouses_02_norm {
	ground {
		sprite: spr_townhouses_02_ground(LOAD_TEMP(1));
	}
	building {
		sprite: spr_townhouses_02(LOAD_TEMP(1));
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_townhouses_02_snow {
	ground {
		sprite: spr_townhouses_02_ground_snow(LOAD_TEMP(1));
	}
	building {
		sprite: spr_townhouses_02_snow(LOAD_TEMP(1));
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

switch (FEAT_HOUSES, SELF, switch_townhouses_02_sprites, [ 
 	// Check for snow and set the groundsprite in temporary variable 0
 	STORE_TEMP(GROUNDSPRITE_NORMAL, 0),
 	STORE_TEMP(terrain_type == TILETYPE_SNOW ? GROUNDSPRITE_SNOW : LOAD_TEMP(0), 0),
	// Check the rotation of the house
	STORE_TEMP(switch_road_adjacency(), 1),
	terrain_type == TILETYPE_SNOW])
	{1: sprlay_townhouses_02_snow; sprlay_townhouses_02_norm;}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_townhouses_02)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

switch (FEAT_HOUSES, SELF, switch_townhouses_02_con_check, 
	HouseOfficeGap() 				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
) {return;}	

item(FEAT_HOUSES, item_townhouses_02, 05, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						TTD_STR_TOWN_BUILDING_NAME_HOUSES_1;
		population: 				30;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1945,0xFFFF];
		minimum_lifetime: 			2;
		availability_mask: 			[bitmask(TOWNZONE_INNER_SUBURB,TOWNZONE_CENTRE), ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
		building_class:				1;
		
		}
	graphics {
		default: 					switch_townhouses_02_sprites;
		construction_check: 		switch_townhouses_02_con_check;
		cargo_production: 			func_produce(4,1);
		colour: 					rand_recolor_townhouses_02;
	}
}

// End townhouses_02

// Begin naganuma_v2_new

spriteset (spr_naganuma_v2_new, 						"src/gfx/houses/naganuma/building_v2.png") 						{template_house_80(1,1)}
spriteset (spr_naganuma_v2_new_snow, 					"src/gfx/houses/naganuma/building_v2.png") 						{template_house_80(1,82)}
spriteset (spr_naganuma_v2_new_ground, 					"src/gfx/houses/naganuma/ground_v2.png") 						{template_house_80(1,1)}
spriteset (spr_naganuma_v2_new_ground_snow, 			"src/gfx/houses/naganuma/ground_v2.png") 						{template_house_80(1,82)}

spritelayout sprlay_naganuma_v2_new_norm {
	ground {
		sprite: spr_naganuma_v2_new_ground (construction_state);
	}
	building {
		sprite: spr_naganuma_v2_new (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_naganuma_v2_new_snow {
	ground {
		sprite: spr_naganuma_v2_new_ground_snow (construction_state);
	}
	building {
		sprite: spr_naganuma_v2_new_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_naganuma_v2_new_sprites, terrain_type) {
	TILETYPE_SNOW: sprlay_naganuma_v2_new_snow;
	sprlay_naganuma_v2_new_norm;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_naganuma_v2_new)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

switch (FEAT_HOUSES, SELF, switch_naganuma_v2_new_con_check, 
	HouseOfficeGap() 				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
) {return;}	

item(FEAT_HOUSES, item_naganuma_v2_new, 19, HOUSE_SIZE_1X1){
	property {
		substitute: 				26;
		name: 						string(NAME_NAGANUMA_HOUSE);
		population: 				20;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1960,0xFFFF];
		minimum_lifetime: 			2;
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										//TOWNZONE_INNER_SUBURB,	// 3
										//TOWNZONE_OUTER_SUBURB,	// 2
										TOWNZONE_OUTSKIRT,			// 1
										TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class: 			0;
		
		}
	graphics {
		default: 					switch_naganuma_v2_new_sprites;
		construction_check: 		switch_naganuma_v2_new_con_check;
		cargo_production: 			func_produce(2,1);
		colour: 					rand_recolor_naganuma_v2_new;
	}
}

// End naganuma_v2_new

// Begin dense_wooden

// Ground Sprites
spriteset (spr_dense_wooden_ground, 				"src/gfx/houses_old/old_houses/ground.png") 						{template_house_80(1,1)}
spriteset (spr_dense_wooden_ground_snow, 			"src/gfx/houses_old/old_houses/ground.png") 						{template_house_80(1,82)}

// Buildings
spriteset (spr_dense_wooden_a, 						"src/gfx/houses_old/old_houses/building_a.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_a_snow, 				"src/gfx/houses_old/old_houses/building_a.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_b, 						"src/gfx/houses_old/old_houses/building_b.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_b_snow, 				"src/gfx/houses_old/old_houses/building_b.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_c, 						"src/gfx/houses_old/old_houses/building_c.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_c_snow, 				"src/gfx/houses_old/old_houses/building_c.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_d, 						"src/gfx/houses_old/old_houses/building_d.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_d_snow, 				"src/gfx/houses_old/old_houses/building_d.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_e, 						"src/gfx/houses_old/old_houses/building_e.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_e_snow, 				"src/gfx/houses_old/old_houses/building_e.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_f, 						"src/gfx/houses_old/old_houses/building_f.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_f_snow, 				"src/gfx/houses_old/old_houses/building_f.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_g, 						"src/gfx/houses_old/old_houses/building_g.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_g_snow, 				"src/gfx/houses_old/old_houses/building_g.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_h, 						"src/gfx/houses_old/old_houses/building_h.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_h_snow, 				"src/gfx/houses_old/old_houses/building_h.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_i, 						"src/gfx/houses_old/old_houses/building_i.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_i_snow, 				"src/gfx/houses_old/old_houses/building_i.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_j, 						"src/gfx/houses_old/old_houses/building_j.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_j_snow, 				"src/gfx/houses_old/old_houses/building_j.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_k, 						"src/gfx/houses_old/old_houses/building_k.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_k_snow, 				"src/gfx/houses_old/old_houses/building_k.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_l, 						"src/gfx/houses_old/old_houses/building_l.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_l_snow, 				"src/gfx/houses_old/old_houses/building_l.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_m, 						"src/gfx/houses_old/old_houses/building_m.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_m_snow, 				"src/gfx/houses_old/old_houses/building_m.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_n, 						"src/gfx/houses_old/old_houses/building_n.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_n_snow, 				"src/gfx/houses_old/old_houses/building_n.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_o, 						"src/gfx/houses_old/old_houses/building_o.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_o_snow, 				"src/gfx/houses_old/old_houses/building_o.png") 					{template_house_80(1,82)}

spriteset (spr_dense_wooden_p, 						"src/gfx/houses_old/old_houses/building_p.png") 					{template_house_80(1,1)}
spriteset (spr_dense_wooden_p_snow, 				"src/gfx/houses_old/old_houses/building_p.png") 					{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_dense_wooden_a {
	ground {
		sprite: spr_dense_wooden_ground (construction_state);
	}
	building {
		sprite: spr_dense_wooden_a (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_a_snow {
	ground {
		sprite: spr_dense_wooden_ground_snow (construction_state);
	}
	building {
		sprite: spr_dense_wooden_a_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_b {
	ground {
		sprite: spr_dense_wooden_ground (construction_state);
	}
	building {
		sprite: spr_dense_wooden_b (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_b_snow {
	ground {
		sprite: spr_dense_wooden_ground_snow (construction_state);
	}
	building {
		sprite: spr_dense_wooden_b_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_c {
	ground {
		sprite: spr_dense_wooden_ground (construction_state);
	}
	building {
		sprite: spr_dense_wooden_c (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_c_snow {
	ground {
		sprite: spr_dense_wooden_ground_snow (construction_state);
	}
	building {
		sprite: spr_dense_wooden_c_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_d {
	ground {
		sprite: spr_dense_wooden_ground(construction_state);
	}
	building {
		sprite: spr_dense_wooden_d(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_d_snow {
	ground {
		sprite: spr_dense_wooden_ground_snow(construction_state);
	}
	building {
		sprite: spr_dense_wooden_d_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_e {
	ground {
		sprite: spr_dense_wooden_ground(construction_state);
	}
	building {
		sprite: spr_dense_wooden_e(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_e_snow {
	ground {
		sprite: spr_dense_wooden_ground_snow(construction_state);
	}
	building {
		sprite: spr_dense_wooden_e_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_f {
	ground {
		sprite: spr_dense_wooden_ground(construction_state);
	}
	building {
		sprite: spr_dense_wooden_f(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_f_snow {
	ground {
		sprite: spr_dense_wooden_ground_snow(construction_state);
	}
	building {
		sprite: spr_dense_wooden_f_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_g {
	ground {
		sprite: spr_dense_wooden_ground(construction_state);
	}
	building {
		sprite: spr_dense_wooden_g(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_g_snow {
	ground {
		sprite: spr_dense_wooden_ground_snow(construction_state);
	}
	building {
		sprite: spr_dense_wooden_g_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_h {
	ground {
		sprite: spr_dense_wooden_ground(construction_state);
	}
	building {
		sprite: spr_dense_wooden_h(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_h_snow {
	ground {
		sprite: spr_dense_wooden_ground_snow(construction_state);
	}
	building {
		sprite: spr_dense_wooden_h_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_i {
	ground {
		sprite: spr_dense_wooden_ground (construction_state);
	}
	building {
		sprite: spr_dense_wooden_i (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_i_snow {
	ground {
		sprite: spr_dense_wooden_ground_snow (construction_state);
	}
	building {
		sprite: spr_dense_wooden_i_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_j {
	ground {
		sprite: spr_dense_wooden_ground(construction_state);
	}
	building {
		sprite: spr_dense_wooden_j(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_j_snow {
	ground {
		sprite: spr_dense_wooden_ground_snow(construction_state);
	}
	building {
		sprite: spr_dense_wooden_j_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_k {
	ground {
		sprite: spr_dense_wooden_ground(construction_state);
	}
	building {
		sprite: spr_dense_wooden_k(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_k_snow {
	ground {
		sprite: spr_dense_wooden_ground_snow(construction_state);
	}
	building {
		sprite: spr_dense_wooden_k_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_l {
	ground {
		sprite: spr_dense_wooden_ground(construction_state);
	}
	building {
		sprite: spr_dense_wooden_l(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_l_snow {
	ground {
		sprite: spr_dense_wooden_ground_snow(construction_state);
	}
	building {
		sprite: spr_dense_wooden_l_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_m {
	ground {
		sprite: spr_dense_wooden_ground (construction_state);
	}
	building {
		sprite: spr_dense_wooden_m (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_m_snow {
	ground {
		sprite: spr_dense_wooden_ground_snow (construction_state);
	}
	building {
		sprite: spr_dense_wooden_m_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_n {
	ground {
		sprite: spr_dense_wooden_ground(construction_state);
	}
	building {
		sprite: spr_dense_wooden_n (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_n_snow {
	ground {
		sprite: spr_dense_wooden_ground_snow(construction_state);
	}
	building {
		sprite: spr_dense_wooden_n_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_o {
	ground {
		sprite: spr_dense_wooden_ground (construction_state);
	}
	building {
		sprite: spr_dense_wooden_o (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_o_snow {
	ground {
		sprite: spr_dense_wooden_ground_snow (construction_state);
	}
	building {
		sprite: spr_dense_wooden_o_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_p {
	ground {
		sprite: spr_dense_wooden_ground (construction_state);
	}
	building {
		sprite: spr_dense_wooden_p (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_dense_wooden_p_snow {
	ground {
		sprite: spr_dense_wooden_ground_snow (construction_state);
	}
	building {
		sprite: spr_dense_wooden_p_snow (construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_dense_wooden_a,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_a_snow;
	sprlay_dense_wooden_a;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_b,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_b_snow;
	sprlay_dense_wooden_b;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_c,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_c_snow;
	sprlay_dense_wooden_c;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_d,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_d_snow;
	sprlay_dense_wooden_d;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_e,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_e_snow;
	sprlay_dense_wooden_e;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_f,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_f_snow;
	sprlay_dense_wooden_f;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_g,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_g_snow;
	sprlay_dense_wooden_g;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_h,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_h_snow;
	sprlay_dense_wooden_h;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_i,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_i_snow;
	sprlay_dense_wooden_i;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_j,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_j_snow;
	sprlay_dense_wooden_j;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_k,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_k_snow;
	sprlay_dense_wooden_k;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_l,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_l_snow;
	sprlay_dense_wooden_l;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_m,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_m_snow;
	sprlay_dense_wooden_m;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_n,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_n_snow;
	sprlay_dense_wooden_n;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_o,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_o_snow;
	sprlay_dense_wooden_o;
}

switch(FEAT_HOUSES, SELF, switch_dense_wooden_p,terrain_type) {
	TILETYPE_SNOW: sprlay_dense_wooden_p_snow;
	sprlay_dense_wooden_p;
}

// Random selection of sprites
random_switch (FEAT_HOUSES, SELF, switch_dense_wooden_sprites) {
	1: switch_dense_wooden_a;
	1: switch_dense_wooden_b;
	1: switch_dense_wooden_c;
	1: switch_dense_wooden_d;
	1: switch_dense_wooden_e;
	1: switch_dense_wooden_f;
	1: switch_dense_wooden_g;
	1: switch_dense_wooden_h;
	1: switch_dense_wooden_i;
	1: switch_dense_wooden_j;
	1: switch_dense_wooden_k;
	1: switch_dense_wooden_l;
	1: switch_dense_wooden_m;
	1: switch_dense_wooden_n;
	1: switch_dense_wooden_o;
	1: switch_dense_wooden_p;

}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_dense_wooden)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

switch (FEAT_HOUSES, SELF, switch_dense_wooden_con_check, 
	HouseOfficeGap() 				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
) {return;}	

item(FEAT_HOUSES, item_dense_wooden, 13, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_DENSE_WOODEN);
		population: 				60;										// Agreed to JPS
		accepted_cargos: 			[[PASS, 6],[MAIL, 3],[GOOD, 6]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1700,1950];							// Agreed to JPS
		minimum_lifetime: 			2;										
		availability_mask: 			[bitmask(								// Agreed to JPS
										TOWNZONE_CENTRE,			// 4
										TOWNZONE_INNER_SUBURB		// 3
										//TOWNZONE_OUTER_SUBURB,	// 2
										//TOWNZONE_OUTSKIRT			// 1
										//TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				0;
		
		}
	graphics {
		default: 					switch_dense_wooden_sprites;
		construction_check: 		switch_dense_wooden_con_check;
		cargo_production: 			func_produce(4,1);						// 
		colour: 					rand_recolor_dense_wooden;
	}
}

// End dense_wooden

// Begin wooden_townhouses_01

// Ground Sprites

// Leveraged from dense wooden

// Buildings
spriteset (spr_wooden_townhouses_01, 			"src/gfx/houses_old/old_houses/wooden_townhouses_01.png") 			{template_house_80_wide(1,1)}
spriteset (spr_wooden_townhouses_01_snow, 		"src/gfx/houses_old/old_houses/wooden_townhouses_01.png") 			{template_house_80_wide(1,82)}

// Spritelayouts
spritelayout sprlay_wooden_townhouses_01 {
	ground {
		sprite: spr_dense_wooden_ground (construction_state);
	}
	building {
		sprite: spr_wooden_townhouses_01 (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_wooden_townhouses_01_snow {
	ground {
		sprite: spr_dense_wooden_ground_snow (construction_state);
	}
	building {
		sprite: spr_wooden_townhouses_01_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_wooden_townhouses_01,terrain_type) {
	TILETYPE_SNOW: sprlay_wooden_townhouses_01_snow;
	sprlay_wooden_townhouses_01;
}

switch (FEAT_HOUSES, SELF, switch_wooden_townhouses_01_con_check, 
	HouseOfficeGap() 			// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
) {return;}	

item(FEAT_HOUSES, item_wooden_townhouses_01, 01, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_WOODEN_TOWNHOUSES_SHOPS);
		population: 				40;										// Agreed to JPS
		accepted_cargos: 			[[PASS, 4],[MAIL, 2],[GOOD, 4]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1700,1950];							// Agreed to JPS
		minimum_lifetime: 			2;										
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										TOWNZONE_INNER_SUBURB,		// 3
										//TOWNZONE_OUTER_SUBURB,	// 2
										TOWNZONE_OUTSKIRT			// 1
										//TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				0;
		
		}
	graphics {
		default: 					switch_wooden_townhouses_01;
		construction_check: 		switch_wooden_townhouses_01_con_check;
		cargo_production: 			func_produce(4,1);						// 
		//colour: 					rand_recolor_wooden_townhouses;
	}
}

// End wooden_townhouses_01

// Begin wooden_townhouses_02

// Ground Sprites

// Leveraged from dense wooden

// Buildings
spriteset (spr_wooden_townhouses_02, 			"src/gfx/houses_old/old_houses/wooden_townhouses_02.png") 			{template_house_80(1,1)}
spriteset (spr_wooden_townhouses_02_snow, 		"src/gfx/houses_old/old_houses/wooden_townhouses_02.png") 			{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_wooden_townhouses_02 {
	ground {
		sprite: spr_dense_wooden_ground (construction_state);
	}
	building {
		sprite: spr_wooden_townhouses_02 (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_wooden_townhouses_02_snow {
	ground {
		sprite: spr_dense_wooden_ground_snow (construction_state);
	}
	building {
		sprite: spr_wooden_townhouses_02_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_wooden_townhouses_02,terrain_type) {
	TILETYPE_SNOW: sprlay_wooden_townhouses_02_snow;
	sprlay_wooden_townhouses_02;
}

// Construction Checks
switch (FEAT_HOUSES, SELF, switch_wooden_townhouses_02_con_check, 
	HouseOfficeGap() 				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
) {return;}	

item(FEAT_HOUSES, item_wooden_townhouses_02, 03, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_WOODEN_TOWNHOUSES);
		population: 				40;										// Agreed to JPS
		accepted_cargos: 			[[PASS, 4],[MAIL, 2],[GOOD, 4]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1700,1950];							// Agreed to JPS
		minimum_lifetime: 			2;										
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										TOWNZONE_INNER_SUBURB,		// 3
										//TOWNZONE_OUTER_SUBURB,	// 2
										TOWNZONE_OUTSKIRT			// 1
										//TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				0;
		
		}
	graphics {
		default: 					switch_wooden_townhouses_02;
		construction_check: 		switch_wooden_townhouses_02_con_check;
		cargo_production: 			func_produce(4,1);						// 
		//colour: 					rand_recolor_wooden_townhouses;
	}
}

// End wooden_townhouses_02

// Begin wooden_townhouses_03

// Ground Sprites

// Leveraged from dense wooden

// Buildings
spriteset (spr_wooden_townhouses_03, 			"src/gfx/houses_old/old_houses/wooden_townhouses_03.png") 			{template_house_80(1,1)}
spriteset (spr_wooden_townhouses_03_snow, 		"src/gfx/houses_old/old_houses/wooden_townhouses_03.png") 			{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_wooden_townhouses_03 {
	ground {
		sprite: spr_dense_wooden_ground (construction_state);
	}
	building {
		sprite: spr_wooden_townhouses_03 (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_wooden_townhouses_03_snow {
	ground {
		sprite: spr_dense_wooden_ground_snow (construction_state);
	}
	building {
		sprite: spr_wooden_townhouses_03_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_wooden_townhouses_03,terrain_type) {
	TILETYPE_SNOW: sprlay_wooden_townhouses_03_snow;
	sprlay_wooden_townhouses_03;
}

switch (FEAT_HOUSES, SELF, switch_wooden_townhouses_03_con_check, 
	HouseOfficeGap() 				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
) {return;}	

item(FEAT_HOUSES, item_wooden_townhouses_03, 04, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_WOODEN_TOWNHOUSES);
		population: 				40;										// Agreed to JPS
		accepted_cargos: 			[[PASS, 4],[MAIL, 2],[GOOD, 4]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1700,1950];							// Agreed to JPS
		minimum_lifetime: 			2;										
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										TOWNZONE_INNER_SUBURB,		// 3
										//TOWNZONE_OUTER_SUBURB,	// 2
										TOWNZONE_OUTSKIRT			// 1
										//TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				0;
		
		}
	graphics {
		default: 					switch_wooden_townhouses_03;
		construction_check: 		switch_wooden_townhouses_03_con_check;
		cargo_production: 			func_produce(4,1);						// 
		//colour: 					rand_recolor_wooden_townhouses;
	}
}

// End wooden_townhouses_03

// Begin wooden_townhouses_04

// Ground Sprites

// Leveraged from dense wooden

// Buildings
spriteset (spr_wooden_townhouses_04, 			"src/gfx/houses_old/old_houses/wooden_townhouses_04.png") 			{template_house_80(1,1)}
spriteset (spr_wooden_townhouses_04_snow, 		"src/gfx/houses_old/old_houses/wooden_townhouses_04.png") 			{template_house_80(1,82)}

// Spritelayouts
spritelayout sprlay_wooden_townhouses_04 {
	ground {
		sprite: spr_dense_wooden_ground (construction_state);
	}
	building {
		sprite: spr_wooden_townhouses_04 (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_wooden_townhouses_04_snow {
	ground {
		sprite: spr_dense_wooden_ground_snow (construction_state);
	}
	building {
		sprite: spr_wooden_townhouses_04_snow (construction_state);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_wooden_townhouses_04,terrain_type) {
	TILETYPE_SNOW: sprlay_wooden_townhouses_04_snow;
	sprlay_wooden_townhouses_04;
}


switch (FEAT_HOUSES, SELF, switch_wooden_townhouses_04_con_check, 
	HouseOfficeGap()				// Can't build within two tiles of Building Class 2 (Offices, Shops and Skyscrapers)
) {return;}	

item(FEAT_HOUSES, item_wooden_townhouses_04, 08, HOUSE_SIZE_1X1){
	property {
		substitute: 				06;
		name: 						string(NAME_WOODEN_TOWNHOUSES_TREE);
		population: 				40;										// Agreed to JPS
		accepted_cargos: 			[[PASS, 4],[MAIL, 2],[GOOD, 4]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1700,1950];							// Agreed to JPS
		minimum_lifetime: 			2;										
		availability_mask: 			[bitmask(								// Agreed to JPS
										//TOWNZONE_CENTRE,			// 4
										TOWNZONE_INNER_SUBURB,		// 3
										//TOWNZONE_OUTER_SUBURB,	// 2
										TOWNZONE_OUTSKIRT			// 1
										//TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				0;
		
		}
	graphics {
		default: 					switch_wooden_townhouses_04;
		construction_check: 		switch_wooden_townhouses_04_con_check;
		cargo_production: 			func_produce(4,1);						// 
		//colour: 					rand_recolor_wooden_townhouses;
	}
}

// End wooden_townhouses_04

// Begin small_apartments_01

// Building Sprites
spriteset (spr_small_apartments_01, 							"src/gfx/small_apartments/small_apartments_01/building.png") 						{template_house_80(1,1)}
spriteset (spr_small_apartments_01_snow, 						"src/gfx/small_apartments/small_apartments_01/building.png") 						{template_house_80(1,82)}

// Ground Tiles
spriteset (spr_small_apartments_01_ground, 						"src/gfx/small_apartments/small_apartments_01/ground.png") 						{template_house_80(1,1)}
spriteset (spr_small_apartments_01_ground_snow, 				"src/gfx/small_apartments/small_apartments_01/ground.png") 						{template_house_80(1,82)}

// Normal Sprites
spritelayout sprlay_small_apartments_01_norm {
	ground {
		sprite: spr_small_apartments_01_ground(construction_state);
	}
	building {
		sprite: spr_small_apartments_01(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_small_apartments_01_snow {
	ground {
		sprite: spr_small_apartments_01_ground_snow(construction_state);
	}
	building {
		sprite: spr_small_apartments_01_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_small_apartments_01_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_small_apartments_01_snow;
	sprlay_small_apartments_01_norm;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_small_apartments_01)
	{
		1: PALETTE_CC_RED;				
		2: PALETTE_CC_LIGHT_BLUE;
		//1: PALETTE_CC_PINK;			// Looks silly
		//1: PALETTE_CC_DARK_BLUE;		// Too in your face
		//1: PALETTE_CC_GREEN;			// Too in your face
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_small_apartments_01_con_check, 
	HasRoadAdjacentNWSW() &&		// Can build with a road either to the NW or SW
	SmallApartmentsCheck()			// Small Apartments can't build next to Modern Office Building unless there no passenger service
) {return;}	

item(FEAT_HOUSES, item_small_apartments_01, 02, HOUSE_SIZE_1X1){
	property {
		substitute: 				02;
		name: 						string(NAME_SMALL_APARTMENTS_01);
		population: 				120;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1945,0xFFFF];
		minimum_lifetime: 			4;
		availability_mask: 			[ALL_TOWNZONES, ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
		building_class:				3;
		
		}
	graphics {
		default: 					switch_small_apartments_01_snow;
		construction_check: 		switch_small_apartments_01_con_check;
		cargo_production: 			func_produce(5,2);
		colour: 					rand_recolor_small_apartments_01;
	}
}

// End small_apartments_01

// Begin small_apartments_02

// Building Sprites
spriteset (spr_small_apartments_02, 							"src/gfx/small_apartments/small_apartments_02/building.png") 						{template_house_80(1,1)}
spriteset (spr_small_apartments_02_snow, 						"src/gfx/small_apartments/small_apartments_02/building.png") 						{template_house_80(1,82)}

// Ground Tiles
spriteset (spr_small_apartments_02_ground, 						"src/gfx/small_apartments/small_apartments_02/ground.png") 						{template_house_80(1,1)}
spriteset (spr_small_apartments_02_ground_snow, 				"src/gfx/small_apartments/small_apartments_02/ground.png") 						{template_house_80(1,82)}

// Normal Sprites
spritelayout sprlay_small_apartments_02_norm {
	ground {
		sprite: spr_small_apartments_02_ground(construction_state);
	}
	building {
		sprite: spr_small_apartments_02(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_small_apartments_02_snow {
	ground {
		sprite: spr_small_apartments_02_ground_snow(construction_state);
	}
	building {
		sprite: spr_small_apartments_02_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_small_apartments_02_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_small_apartments_02_snow;
	sprlay_small_apartments_02_norm;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_small_apartments_02)
	{
		//1: PALETTE_CC_RED;			// Too in your face
		2: PALETTE_CC_LIGHT_BLUE;
		//1: PALETTE_CC_PINK;			// Looks silly
		//1: PALETTE_CC_DARK_BLUE;		// Too in your face
		//1: PALETTE_CC_GREEN;			// Too in your face
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_small_apartments_02_con_check, 
	SmallApartmentsCheck() 			// Small Apartments can't build next to Modern Office Building unless there no passenger service
) {return;}	

item(FEAT_HOUSES, item_small_apartments_02, 44, HOUSE_SIZE_1X1){
	property {
		substitute: 				02;
		name: 						string(NAME_SMALL_APARTMENTS_02);
		population: 				100;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1945,0xFFFF];
		minimum_lifetime: 			4;
		availability_mask: 			[ALL_TOWNZONES, ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
		building_class:				3;
		
		}
	graphics {
		default: 					switch_small_apartments_02_snow;
		construction_check: 		switch_small_apartments_02_con_check;
		cargo_production: 			func_produce(5,2);
		colour: 					rand_recolor_small_apartments_02;
	}
}
// End small_apartments_02

// Begin small_apartments_03

// Building Sprites
spriteset (spr_small_apartments_03, 							"src/gfx/small_apartments/small_apartments_03/building.png") 						{template_house_80_2dir(1,1)}
spriteset (spr_small_apartments_03_snow, 						"src/gfx/small_apartments/small_apartments_03/building.png") 					{template_house_80_2dir(1,82)}

// Ground Tiles
spriteset (spr_small_apartments_03_ground, 					"src/gfx/small_apartments/small_apartments_03/ground.png") 						{template_house_80_2dir(1,1)}
spriteset (spr_small_apartments_03_ground_snow, 				"src/gfx/small_apartments/small_apartments_03/ground.png") 						{template_house_80_2dir(1,82)}

spritelayout sprlay_small_apartments_03_norm {
	ground {
		sprite: spr_small_apartments_03_ground(LOAD_TEMP(1));
	}
	building {
		sprite: spr_small_apartments_03(LOAD_TEMP(1));
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_small_apartments_03_snow {
	ground {
		sprite: spr_small_apartments_03_ground_snow(LOAD_TEMP(1));
	}
	building {
		sprite: spr_small_apartments_03_snow(LOAD_TEMP(1));
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

switch (FEAT_HOUSES, SELF, switch_small_apartments_03_sprites, [ 
 	// Check for snow and set the groundsprite in temporary variable 0
 	STORE_TEMP(GROUNDSPRITE_NORMAL, 0),
 	STORE_TEMP(terrain_type == TILETYPE_SNOW ? GROUNDSPRITE_SNOW : LOAD_TEMP(0), 0),
	// Check the rotation of the house
	STORE_TEMP(switch_road_adjacency(), 1),
	terrain_type == TILETYPE_SNOW])
	{1: sprlay_small_apartments_03_snow; sprlay_small_apartments_03_norm;}

random_switch (FEAT_HOUSES, SELF, rand_recolor_apartments_03)
	{
		1: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_small_apartments_03_con_check, 
	SmallApartmentsCheck()			// Small Apartments can't build next to Modern Office Building unless there no passenger service
) {return;}	

item(FEAT_HOUSES, item_small_apartments_03, 45, HOUSE_SIZE_1X1){
	property {
		substitute: 					27;
		name: 							string(NAME_SMALL_APARTMENTS_03);
		population: 					120;
		accepted_cargos: 				[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 		80;
		removal_cost_multiplier: 		80;
		probability: 					1;
		years_available: 				[1950,0xFFFF];
		minimum_lifetime: 				5;
		availability_mask: 				[ALL_TOWNZONES, ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
		building_class:					3;		
		}
	graphics {
		default: 						switch_small_apartments_03_sprites;
		construction_check: 			switch_small_apartments_03_con_check;
		cargo_production: 				func_produce(5,2);
		colour: 						rand_recolor_apartments_03;
	}
}

// End small_apartments_03

// Begin small_apartments_04

// Building Sprites
spriteset (spr_small_apartments_04, 					"src/gfx/small_apartments/small_apartments_04/building.png") 			{template_house_100(1,1)}
spriteset (spr_small_apartments_04_snow, 				"src/gfx/small_apartments/small_apartments_04/building.png") 			{template_house_100(1,102)}

// Ground Tiles
spriteset (spr_small_apartments_04_ground, 				"src/gfx/small_apartments/small_apartments_04/ground.png") 				{template_house_100(1,1)}
spriteset (spr_small_apartments_04_ground_snow, 		"src/gfx/small_apartments/small_apartments_04/ground.png") 				{template_house_100(1,102)}

spritelayout sprlay_small_apartments_04_norm {
	ground {
		sprite: spr_small_apartments_04_ground(construction_state);
	}
	building {
		sprite: spr_small_apartments_04(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_small_apartments_04_snow {
	ground {
		sprite: spr_small_apartments_04_ground_snow(construction_state);
	}
	building {
		sprite: spr_small_apartments_04_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_small_apartments_04_sprites, terrain_type) {
	TILETYPE_SNOW: sprlay_small_apartments_04_snow;
	sprlay_small_apartments_04_norm;
}

random_switch (FEAT_HOUSES, SELF, rand_recolor_small_apartments_04)
	{
		1: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_small_apartments_04_con_check, 
	SmallApartmentsCheck() 				// Small Apartments can't build next to Modern Office Building unless there no passenger service
) {return;}	

item(FEAT_HOUSES, item_small_apartments_04, 46, HOUSE_SIZE_1X1){
	property {
		substitute: 					27;
		name: 							string(NAME_SMALL_APARTMENTS_04);
		population: 					150;
		accepted_cargos: 				[[PASS, 4],[MAIL, 4],[FOOD, 4]];
		local_authority_impact: 		80;
		removal_cost_multiplier: 		80;
		probability: 					1;
		years_available: 				[1955,1989];
		minimum_lifetime: 				5;
		availability_mask: 				[bitmask(TOWNZONE_OUTER_SUBURB,TOWNZONE_OUTSKIRT), ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
		building_class:					3;		
		}
	graphics {
		default: 						switch_small_apartments_04_sprites;
		construction_check: 			switch_small_apartments_04_con_check;
		cargo_production: 				func_produce(5,2);
		colour: 						rand_recolor_small_apartments_04;
	}
}

// End small_apartments_04

// Begin apartments_01

// Building Sprites
spriteset (spr_apartments_01, 							"src/gfx/apartments/apartments_01/building.png") 						{template_house_con_phases(1,1)}
spriteset (spr_apartments_01_snow, 						"src/gfx/apartments/apartments_01/building.png") 						{template_house_con_phases(1,80)}

// Ground Tiles
spriteset (spr_apartments_01_ground, 					"src/gfx/apartments/apartments_01/ground.png") 						{template_house_1dir(1,1)}
spriteset (spr_apartments_01_ground_snow, 				"src/gfx/apartments/apartments_01/ground.png") 						{template_house_1dir(1,80)}

// Normal Sprites
spritelayout sprlay_apartments_01_norm {
	ground {
		sprite: spr_apartments_01_ground;
	}
	building {
		sprite: spr_apartments_01(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_apartments_01_snow {
	ground {
		sprite: spr_apartments_01_ground_snow;
	}
	building {
		sprite: spr_apartments_01_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_apartments_01_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_apartments_01_snow;
	sprlay_apartments_01_norm;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_switch_recolor_apartments_01)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_apartments_01_con_check, 	
	FuncServicePASS() 				// Only build within the catchment area of a station which received passengers this month or last month
	) {return;}	

item(FEAT_HOUSES, item_apartments_01, 27, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						string(NAME_APARTMENTS_01);
		population: 				150;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1960,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE,TOWNZONE_INNER_SUBURB,TOWNZONE_OUTER_SUBURB), ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
		building_class:				4;
				
		}
	graphics {
		default: 					switch_apartments_01_snow;
		construction_check: 		switch_apartments_01_con_check;
		cargo_production: 			func_produce(13,4);
		colour: 					rand_switch_recolor_apartments_01;
	}
}

// End apartments_01

// Begin apartments_02

// Building Sprites
spriteset (spr_apartments_02, 							"src/gfx/apartments/apartments_02/building.png") 						{template_house_128(1,1)}
spriteset (spr_apartments_02_snow, 						"src/gfx/apartments/apartments_02/building.png") 						{template_house_128(1,130)}

// Ground Tiles
spriteset (spr_apartments_02_ground, 					"src/gfx/apartments/apartments_02/ground.png") 						{template_house_128(1,1)}
spriteset (spr_apartments_02_ground_snow, 				"src/gfx/apartments/apartments_02/ground.png") 						{template_house_128(1,130)}

// Normal Sprites
spritelayout sprlay_apartments_02_norm {
	ground {
		sprite: spr_apartments_02_ground(construction_state);
	}
	building {
		sprite: spr_apartments_02(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_apartments_02_snow {
	ground {
		sprite: spr_apartments_02_ground_snow(construction_state);
	}
	building {
		sprite: spr_apartments_02_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_apartments_02_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_apartments_02_snow;
	sprlay_apartments_02_norm;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_apartments_02)
	{
		//1: PALETTE_CC_RED;			// too in your face
		2: PALETTE_CC_LIGHT_BLUE;
		//1: PALETTE_CC_PINK;			// too silly
		1: PALETTE_CC_DARK_BLUE;
		//1: PALETTE_CC_GREEN;			// nah
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_apartments_02_con_check, 	
	FuncServicePASS() 				// Only build within the catchment area of a station which received passengers this month or last month
) {return;}	

item(FEAT_HOUSES, item_apartments_02, 30, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						string(NAME_APARTMENTS_02);
		population: 				150;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1945,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE,TOWNZONE_INNER_SUBURB,TOWNZONE_OUTER_SUBURB), ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
		building_class:				4;		
		}
	graphics {
		default: 					switch_apartments_02_snow;
		construction_check: 		switch_apartments_02_con_check;
		cargo_production: 			func_produce(13,4);
		colour: 					rand_recolor_apartments_02;
	}
}

// End apartments_02

// Begin apartments_03

// Building Sprites
spriteset (spr_apartments_03, 							"src/gfx/apartments/apartments_03/building.png") 						{template_house_80(1,1)}
spriteset (spr_apartments_03_snow, 						"src/gfx/apartments/apartments_03/building.png") 						{template_house_80(1,82)}

// Ground Tiles
spriteset (spr_apartments_03_ground, 					"src/gfx/apartments/apartments_03/ground.png") 						{template_house_80(1,1)}
spriteset (spr_apartments_03_ground_snow, 				"src/gfx/apartments/apartments_03/ground.png") 						{template_house_80(1,82)}

// Normal Sprites
spritelayout sprlay_apartments_03_norm {
	ground {
		sprite: spr_apartments_03_ground(3);
	}
	building {
		sprite: 		spr_apartments_03(3);
		recolour_mode: 	RECOLOUR_REMAP; 
		palette: 		PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_apartments_03_snow {
	ground {
		sprite: 		spr_apartments_03_ground_snow(3);
	}
	building {
		sprite: 		spr_apartments_03_snow(3);
		recolour_mode: 	RECOLOUR_REMAP; 
		palette: 		PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_apartments_03_snow,terrain_type) {
	TILETYPE_SNOW: sprlay_apartments_03_snow;
	sprlay_apartments_03_norm;
}

// Recolouring
/*
random_switch (FEAT_HOUSES, SELF, rand_recolor_apartments_03)
	{
		//1: PALETTE_CC_RED;			// too in your face
		2: PALETTE_CC_LIGHT_BLUE;
		//1: PALETTE_CC_PINK;			// too silly
		1: PALETTE_CC_DARK_BLUE;
		//1: PALETTE_CC_GREEN;			// nah
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}
*/
// Construction Check
switch (FEAT_HOUSES, SELF, switch_apartments_03_con_check, 	
	FuncServicePASS() 			// Only build within the catchment area of a station which received passengers this month or last month
) {return;}	

item(FEAT_HOUSES, item_apartments_03, 31, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						string(NAME_APARTMENTS_03);
		population: 				100;
		accepted_cargos: 			[[PASS, 8],[MAIL, 4],[FOOD, 4]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1950,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(					// JPS Zones = 3 & 2, ITL = All Zones
										TOWNZONE_CENTRE,		// 4
										TOWNZONE_INNER_SUBURB,	// 3
										TOWNZONE_OUTER_SUBURB	// 2
										//TOWNZONE_OUTSKIRT		// 1
										//TOWNZONE_EDGE			// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				4;
		}
	graphics {
		default: 					switch_apartments_03_snow;
		construction_check: 		switch_apartments_03_con_check;
		cargo_production: 			func_produce(13,4);
		//colour: 					rand_recolor_apartments_03;
	}
}

// End apartments_03

// Begin apartments_04

// Building Sprites
spriteset (spr_build_apartments_04_north, 							"src/gfx/apartments/apartments_04/building.png") 						{template_house_128(1,1)}
spriteset (spr_build_apartments_04_west, 							"src/gfx/apartments/apartments_04/building.png") 						{template_house_128(261,1)}

spriteset (spr_build_apartments_04_north_snow, 						"src/gfx/apartments/apartments_04/building.png") 						{template_house_128(1,130)}
spriteset (spr_build_apartments_04_west_snow, 						"src/gfx/apartments/apartments_04/building.png") 						{template_house_128(261,130)}
// Ground Sprites
spriteset (spr_ground_apartments_04, 							"src/gfx/apartments/apartments_04/ground.png") 						{template_house_128(1,1)}
spriteset (spr_ground_apartments_04_snow, 						"src/gfx/apartments/apartments_04/ground.png") 						{template_house_128(1,130)}

// Normal Sprites
spritelayout sprlay_apartments_04_north {
	ground {
		sprite: spr_ground_apartments_04(construction_state);
	}
	building {
		sprite: spr_build_apartments_04_north(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_apartments_04_west {
	ground {
		sprite: spr_ground_apartments_04(construction_state);
	}
	building {
		sprite: spr_build_apartments_04_west(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_apartments_04_snow_north {
	ground {
		sprite: spr_ground_apartments_04_snow(construction_state);
	}
	building {
		sprite: spr_build_apartments_04_north_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_apartments_04_snow_west {
	ground {
		sprite: spr_ground_apartments_04_snow(construction_state);
	}
	building {
		sprite: spr_build_apartments_04_west_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_apartments_04_north,terrain_type) {
	TILETYPE_SNOW: sprlay_apartments_04_snow_north;
	sprlay_apartments_04_north;
}
switch(FEAT_HOUSES, SELF, switch_apartments_04_west,terrain_type) {
	TILETYPE_SNOW: sprlay_apartments_04_snow_west;
	sprlay_apartments_04_west;
}


// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_apartments_04)
	{
		1: PALETTE_CC_RED;			// too in your face
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;			// too silly
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_apartments_04_con_check, 	
	FuncServicePASS() 				// Only build within the catchment area of a station which received passengers this month or last month
) {return;}	

item(FEAT_HOUSES, item_apartments_04, 56, HOUSE_SIZE_2X1){
	property {
		substitute: 				76; 													
		name: 						string(NAME_APARTMENTS_04);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED);
		population: 				100;
		accepted_cargos: 			[[PASS, 8],[MAIL, 4],[GOOD, 4]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1960,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE,TOWNZONE_INNER_SUBURB,TOWNZONE_OUTER_SUBURB), ALL_CLIMATES | bitmask(ABOVE_SNOWLINE)];
		building_class:				4;	
		}
	graphics {
		graphics_north: 			switch_apartments_04_north;
		graphics_west: 				switch_apartments_04_west;
		construction_check: 		switch_apartments_04_con_check; 	
		cargo_production: 			func_produce(13,4);
		colour: 					rand_recolor_apartments_04;
	} 					
}

// End apartments_04

// Begin apartments_05

// Building Sprites
spriteset (spr_apartments_05, 							"src/gfx/apartments/apartments_05/building.png") 						{template_house_128(1,1)}

// Ground Tiles
// Same as Skyscraper 04

// Normal Sprites
spritelayout sprlay_apartments_05_white {
	ground {
		sprite: spr_ground_skyscraper_04(2);
	}
	building {
		sprite: spr_apartments_05(0);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_apartments_05_cream {
	ground {
		sprite: spr_ground_skyscraper_04(2);
	}
	building {
		sprite: spr_apartments_05(1);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_apartments_05_white_snow {
	ground {
		sprite: spr_ground_skyscraper_04(3);
	}
	building {
		sprite: spr_apartments_05(2);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_apartments_05_cream_snow {
	ground {
		sprite: spr_ground_skyscraper_04(3);
	}
	building {
		sprite: spr_apartments_05(3);
		//recolour_mode: RECOLOUR_REMAP; 
		//palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_apartments_05_white,terrain_type) {
	TILETYPE_SNOW: sprlay_apartments_05_white_snow;
	sprlay_apartments_05_white;
}

switch(FEAT_HOUSES, SELF, switch_apartments_05_cream,terrain_type) {
	TILETYPE_SNOW: sprlay_apartments_05_cream_snow;
	sprlay_apartments_05_cream;
}

random_switch (FEAT_HOUSES, SELF, switch_apartments_05_snow) {
	1: switch_apartments_05_white;
	1: switch_apartments_05_cream;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_apartments_05)
	{
		//1: PALETTE_CC_RED;			// too in your face
		2: PALETTE_CC_LIGHT_BLUE;
		//1: PALETTE_CC_PINK;			// too silly
		1: PALETTE_CC_DARK_BLUE;
		//1: PALETTE_CC_GREEN;			// nah
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_apartments_05_con_check, 	
	FuncServicePASS() 				// Only build within the catchment area of a station which received passengers this month or last month
) {return;}	

item(FEAT_HOUSES, item_apartments_05, 32, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						string(NAME_APARTMENTS_05);
		population: 				180;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;
		years_available: 			[1970,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(						// Taller than other Apartments so limited to TOWNZONE_CENTRE
										TOWNZONE_CENTRE				// 4
										//TOWNZONE_INNER_SUBURB,	// 3
										//TOWNZONE_OUTER_SUBURB,	// 2
										//TOWNZONE_OUTSKIRT			// 1
										//TOWNZONE_EDGE				// 0
									), bitmask(
										CLIMATE_TEMPERATE,
										CLIMATE_ARCTIC, ABOVE_SNOWLINE,
										CLIMATE_TROPIC
									)];
		building_class:				4;
	}
	graphics {
		default: 					switch_apartments_05_snow;
		construction_check: 		switch_apartments_05_con_check;
		cargo_production: 			func_produce(13,4);
		colour: 					rand_recolor_apartments_05;
	}
}

// End apartments_05

// Begin shops_01

// Building Sprites
spriteset (spr_shops_01, 							"src/gfx/shops/shops_01/building.png") 						{template_house_100(1,1)}
spriteset (spr_shops_01_snow, 						"src/gfx/shops/shops_01/building.png") 						{template_house_100(1,102)}

// Ground Tiles
spriteset (spr_shops_01_ground, 					"src/gfx/shops/shops_01/ground.png") 						{template_house_100(1,1)}
spriteset (spr_shops_01_ground_snow, 				"src/gfx/shops/shops_01/ground.png") 						{template_house_100(1,102)}

spritelayout sprlay_shops_01_norm {
	ground {
		sprite: spr_shops_01_ground(construction_state);
	}
	building {
		sprite: spr_shops_01(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shops_01_snow {
	ground {
		sprite: spr_shops_01_ground_snow(construction_state);
	}
	building {
		sprite: spr_shops_01_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_shops_01_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_shops_01_snow;
	sprlay_shops_01_norm;
}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_shops_01_con_check, 
	FuncServicePASS() &&			// Only build within the catchment area of a station which received passengers this month or last month
	CommercialCargoes() &&			// Commerical Cargo Requirement as per parameter
	HasRoadAdjacentSW() && 
	HasRoadAdjacentSE() && 
	ModernOfficePopCheck() &&		// Is there population to allow another
	ClusterBuildingClass()			// Must be within two tiles of the same building class
) {return;}	

// Recolouring
random_switch (FEAT_HOUSES, SELF, random_recolour_shops_01) {
	1:	return PALETTE_CC_DARK_BLUE;
	1:	return PALETTE_CC_GREY;
	1:	return PALETTE_CC_BROWN;
	1:	return PALETTE_CC_MAUVE;
	1:	return PALETTE_CC_WHITE;
	1:	return PALETTE_CC_DARK_GREEN;
}

item(FEAT_HOUSES, item_shops_01, 48, HOUSE_SIZE_1X1) {
	property {
		substitute: 				30;
		name: 						string(NAME_SHOPS_01);
		population: 				180;
		mail_multiplier: 			75;
		accepted_cargos: 			[[PASS, 8],[MAIL,8],[GOOD, 8]];
		local_authority_impact: 	180;
		removal_cost_multiplier: 	155;
		probability: 				5;
		years_available: 			[1970,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];	// JPSet Zones 4,3
		building_class: 			2;
	}
	graphics {
		default: 					switch_shops_01_sprites;
		construction_check: 		switch_shops_01_con_check;
		colour: 					random_recolour_shops_01;
		cargo_production: 			func_produce(24,10);
	}
}
// End shops_01

// Begin shops_02

// Building Sprites
spriteset (spr_shops_02, 							"src/gfx/shops/shops_02/building.png") 						{template_house_128(1,1)}
spriteset (spr_shops_02_snow, 						"src/gfx/shops/shops_02/building.png") 						{template_house_128(1,130)}

// Ground Tiles
spriteset (spr_shops_02_ground, 					"src/gfx/shops/shops_02/ground.png") 						{template_house_128(1,1)}
//spriteset (spr_shops_02_ground_snow, 				"src/gfx/shops/shops_02/ground.png") 						{template_house_128(1,1)}

spritelayout sprlay_shops_02_norm {
	ground {
		sprite: spr_shops_02_ground(construction_state);
	}
	building {
		sprite: spr_shops_02(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shops_02_snow {
	ground {
		sprite: spr_shops_02_ground(construction_state);
	}
	building {
		sprite: spr_shops_02_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_shops_02_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_shops_02_snow;
	sprlay_shops_02_norm;
}


// Recolouring
random_switch (FEAT_HOUSES, SELF, random_recolour_shops_02) {
	1:	return PALETTE_CC_DARK_BLUE;
	1:	return PALETTE_CC_GREY;
	1:	return PALETTE_CC_BROWN;
	1:	return PALETTE_CC_MAUVE;
	1:	return PALETTE_CC_WHITE;
	1:	return PALETTE_CC_DARK_GREEN;
}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_shops_02_con_check, 
	FuncServicePASS() &&			// Only build within the catchment area of a station which received passengers this month or last month
	CommercialCargoes() &&			// Commerical Cargo Requirement as per parameter
	ModernOfficePopCheck() &&		// Is there sufficieny population to build another?
	ClusterBuildingClass()			// Must be within two tiles of the same building class
) {return;}	

item(FEAT_HOUSES, item_shops_02, 47, HOUSE_SIZE_1X1) {
	property {
		substitute: 				30;
		name: 						string(NAME_SHOPS_02);
		population: 				140;
		mail_multiplier: 			75;
		accepted_cargos: 			[[PASS, 8],[MAIL,8],[GOOD, 8]];
		local_authority_impact: 	180;
		removal_cost_multiplier: 	155;
		probability: 				5;
		years_available: 			[1970,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class: 			2;
	}
	graphics {
		default: 					switch_shops_02_sprites;
		construction_check: 		switch_shops_02_con_check;
		colour: 					random_recolour_shops_02;
		cargo_production: 			func_produce(24,10);
	}
}
// End shops_02

// Begin petrol_station_01

// Building Sprites
spriteset (spr_build_petrol_station_01, 							"src/gfx/shops/petrol_station_01/building.png") 						{template_house_80(1,1)}
spriteset (spr_build_petrol_station_01_snow, 						"src/gfx/shops/petrol_station_01/building.png") 						{template_house_80(1,82)}

// Ground Sprites
spriteset (spr_ground_petrol_station_01, 							"src/gfx/shops/petrol_station_01/ground.png") 						{template_house_80(1,1)}
spriteset (spr_ground_petrol_station_01_snow, 						"src/gfx/shops/petrol_station_01/ground.png") 						{template_house_80(1,82)}

// Normal Sprites
spritelayout sprlay_petrol_station_01_north {
	ground {
		sprite: spr_ground_petrol_station_01(0);
	}
	building {
		sprite: spr_build_petrol_station_01(0);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_petrol_station_01_east {
	ground {
		sprite: spr_ground_petrol_station_01(1);
	}
	building {
		sprite: spr_build_petrol_station_01(1);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_petrol_station_01_snow_north {
	ground {
		sprite: spr_ground_petrol_station_01_snow(0);
	}
	building {
		sprite: spr_build_petrol_station_01_snow(0);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_petrol_station_01_snow_east {
	ground {
		sprite: spr_ground_petrol_station_01_snow(1);
	}
	building {
		sprite: spr_build_petrol_station_01_snow(1);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_petrol_station_01_north,terrain_type) {
	TILETYPE_SNOW: sprlay_petrol_station_01_snow_north;
	sprlay_petrol_station_01_north;
}
switch(FEAT_HOUSES, SELF, switch_petrol_station_01_east,terrain_type) {
	TILETYPE_SNOW: sprlay_petrol_station_01_snow_east;
	sprlay_petrol_station_01_east;
}

// Recolouring

random_switch (FEAT_HOUSES, SELF, rand_recolor_petrol_station_01)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
	}


// Construction Check
switch (FEAT_HOUSES, SELF, switch_petrol_station_01_con_check, 
	HasRoadAdjacentSW() &&		// Must have road to the SW
	ThirtyTileGap()				// Can't appear within 30 tiles of another
) {return;}	

// Protection Check
switch (FEAT_HOUSES, SELF, switch_petrol_station_01_pro_check, 
	HasRoadAdjacentSW() &&		// Must have road to the SW
	FuncServicePETR()			// Must have PETR delivered
	) {return;}	

item(FEAT_HOUSES, item_petrol_station_01, 50, HOUSE_SIZE_1X2){
	property {
		substitute: 				7; 													
		name: 						string(NAME_PETROL_STATION_01);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED,HOUSE_FLAG_PROTECTED);	// Want flat land
		population: 				80;														// Agreed to JPS
		accepted_cargos: 			[[PASS, 4],[MAIL, 2],[GOOD, 2],[PETR,8]];				// Agreed to JPS and added Petrol
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[1970,0xFFFF];	
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(
										TOWNZONE_OUTER_SUBURB,
										TOWNZONE_OUTSKIRT,
										TOWNZONE_EDGE
										), 
									bitmask(
										CLIMATE_TEMPERATE, 
										CLIMATE_ARCTIC, 
										ABOVE_SNOWLINE
										)];
		//building_class:			2;	
		}
	graphics {
		graphics_north: 			switch_petrol_station_01_north;
		graphics_east: 				switch_petrol_station_01_east;
		construction_check:			switch_petrol_station_01_con_check;
		protection:					switch_petrol_station_01_pro_check;
		cargo_production: 			func_produce(20,5);
		colour: 					rand_recolor_petrol_station_01;
	}
}

// End petrol_station_01

// Begin restaurant_01

// Building Sprites
spriteset (spr_build_restaurant_01, 							"src/gfx/shops/restaurant_01/building.png") 					{template_house_80(1,1)}
spriteset (spr_build_restaurant_01_snow, 						"src/gfx/shops/restaurant_01/building.png") 					{template_house_80(1,82)}

// Ground Sprites
spriteset (spr_ground_restaurant_01, 							"src/gfx/shops/restaurant_01/ground.png") 						{template_house_80(1,1)}
spriteset (spr_ground_restaurant_01_snow, 						"src/gfx/shops/restaurant_01/ground.png") 						{template_house_80(1,82)}

// Normal Sprites
spritelayout sprlay_restaurant_01 {
	ground {
		sprite: spr_ground_restaurant_01(construction_state);
	}
	building {
		sprite: spr_build_restaurant_01(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_restaurant_01_snow {
	ground {
		sprite: spr_ground_restaurant_01_snow(construction_state);
	}
	building {
		sprite: spr_build_restaurant_01_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_restaurant_01,terrain_type) {
	TILETYPE_SNOW: sprlay_restaurant_01_snow;
	sprlay_restaurant_01;
}

// Recolouring

random_switch (FEAT_HOUSES, SELF, rand_recolor_restaurant_01)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
	}


// Construction Check
switch (FEAT_HOUSES, SELF, switch_restaurant_01_con_check, 
	HasRoadAdjacentSW() &&		// Must have road to the SW
	ThirtyTileGap()				// Can't appear within 30 tiles of another
) {return;}	

// Protection Check
switch (FEAT_HOUSES, SELF, switch_restaurant_01_pro_check, 
	FuncServicePASS() 	&&		// Must have PASS delivered
	(FuncServiceFOOD()	||		// Must have either FOOD delivered
	FuncServiceEOIL()	||		// or Edible Oil
	FuncServiceFISH()   )		// or Fish	
	) {return;}	

item(FEAT_HOUSES, item_restaurant_01, 64, HOUSE_SIZE_1X1){
	property {
		substitute: 				29; 													
		name: 						string(NAME_RESTAURANT_01);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED);		// Want flat land
		population: 				50;									// Agreed to JPS
		accepted_cargos: 			[
										[PASS, 4],[MAIL, 2],			// Of course
										[FOOD, 8],						// Food in general
										[JAVA ,8],						// Coffee
										[EOIL, 8],						// Oil for cooking
										[LVST, 8],						// Meat for restaurant
										[FISH, 8],						// It's a sushi restuarant!
									];							
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[1950,0xFFFF];	
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(
										TOWNZONE_INNER_SUBURB,
										TOWNZONE_OUTER_SUBURB,
										TOWNZONE_OUTSKIRT
										), 
									bitmask(
										CLIMATE_TEMPERATE, 
										CLIMATE_ARCTIC, 
										ABOVE_SNOWLINE
										)];
		//building_class:			2;	
		}
	graphics {
		default: 					switch_restaurant_01;
		construction_check:			switch_restaurant_01_con_check;
		protection:					switch_restaurant_01_pro_check;
		cargo_production: 			func_produce(20,5);
		colour: 					rand_recolor_restaurant_01;
	}
}

// End restaurant_01

// Begin shops_small_01

// Building Sprites
spriteset (spr_build_shops_small_01, 							"src/gfx/shops/shops_small_01/building.png") 					{template_house_80(1,1)}
spriteset (spr_build_shops_small_01_snow, 						"src/gfx/shops/shops_small_01/building.png") 					{template_house_80(1,82)}

// Ground Sprites
spriteset (spr_ground_shops_small_01, 							"src/gfx/shops/shops_small_01/ground.png") 						{template_house_80(1,1)}
spriteset (spr_ground_shops_small_01_snow, 						"src/gfx/shops/shops_small_01/ground.png") 						{template_house_80(1,82)}

// Normal Sprites
spritelayout sprlay_shops_small_01 {
	ground {
		sprite: spr_ground_shops_small_01(construction_state);
	}
	building {
		sprite: spr_build_shops_small_01(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_shops_small_01_snow {
	ground {
		sprite: spr_ground_shops_small_01_snow(construction_state);
	}
	building {
		sprite: spr_build_shops_small_01_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_shops_small_01,terrain_type) {
	TILETYPE_SNOW: sprlay_shops_small_01_snow;
	sprlay_shops_small_01;
}

// Recolouring

random_switch (FEAT_HOUSES, SELF, rand_recolor_shops_small_01)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
	}


// Construction Check
switch (FEAT_HOUSES, SELF, switch_shops_small_01_con_check, 
	HasRoadAdjacentSW() &&		// Must have road to the SW
	TwentyTileGap()				// Can't appear within 20 tiles of another
) {return;}	

// Protection Check
switch (FEAT_HOUSES, SELF, switch_shops_small_01_pro_check, 
	FuncServicePASS() 	&&		// Must have PASS delivered
	(FuncServiceFOOD()	||		// Must have either FOOD delivered
	FuncServiceGOOD()	||		// or GOOD
	FuncServiceCASS()	||		// or CASS
	FuncServiceFRUT()   )		// or FRUT	
) {return;}	

item(FEAT_HOUSES, item_shops_small_01, 7, HOUSE_SIZE_1X1){
	property {
		substitute: 				29; 													
		name: 						string(NAME_SHOPS_SMALL_01);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED);		// Want flat land
		population: 				50;									// Agreed to JPS
		accepted_cargos: 			[
										[PASS, 4],[MAIL, 2],			// Of course
										[FOOD, 8],						// Food in general
										[GOOD, 8],						// Food in general
										[FRUT ,8],						// Fruit
										[LVST, 8],						// Meat
										[CASS, 8],						// Cassava
									];							
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[1930,0xFFFF];	
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(
										TOWNZONE_CENTRE,
										TOWNZONE_INNER_SUBURB,
										TOWNZONE_OUTER_SUBURB
										//TOWNZONE_OUTSKIRT
										), 
									bitmask(
										CLIMATE_TEMPERATE, 
										CLIMATE_ARCTIC, 
										ABOVE_SNOWLINE
										)];
		//building_class:			2;	
		}
	graphics {
		default: 					switch_shops_small_01;
		construction_check:			switch_shops_small_01_con_check;
		protection:					switch_shops_small_01_pro_check;
		cargo_production: 			func_produce(10,3);
		colour: 					rand_recolor_shops_small_01;
	}
}

// End shops_small_01

// Begin offices_01

// Building Sprites
spriteset (spr_offices_01, 							"src/gfx/offices/offices_01/building.png") 						{template_house_128_1dir(1,1)}
spriteset (spr_offices_01_snow, 						"src/gfx/offices/offices_01/building.png") 						{template_house_128_1dir(1,130)}

// Ground Tiles
spriteset (spr_offices_01_ground, 					"src/gfx/offices/offices_01/ground.png") 						{template_house_128_1dir(1,1)}
spriteset (spr_offices_01_ground_snow, 				"src/gfx/offices/offices_01/ground.png") 						{template_house_128_1dir(1,130)}

spritelayout sprlay_offices_01_norm {
	ground {
		sprite: spr_offices_01_ground(LOAD_TEMP(1));
	}
	building {
		sprite: spr_offices_01(LOAD_TEMP(1));
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_offices_01_snow {
	ground {
		sprite: spr_offices_01_ground_snow(LOAD_TEMP(1));
	}
	building {
		sprite: spr_offices_01_snow(LOAD_TEMP(1));
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose the sprites
switch (FEAT_HOUSES, SELF, switch_offices_01_sprites, [ 
 	// Check for snow and set the groundsprite in temporary variable 0
 	STORE_TEMP(GROUNDSPRITE_NORMAL, 0),
 	STORE_TEMP(terrain_type == TILETYPE_SNOW ? GROUNDSPRITE_SNOW : LOAD_TEMP(0), 0),
	// Check the rotation of the house
	STORE_TEMP(switch_road_adjacency(), 1),
	terrain_type == TILETYPE_SNOW])
	{1: sprlay_offices_01_snow; sprlay_offices_01_norm;}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_offices_01)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_offices_01_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	CommercialCargoes() &&			// Commerical Cargo Requirement as per parameter
	ModernOfficePopCheck() &&		// Residential population is sufficient for another modern office building class
	ClusterBuildingClass() &&		// Must be within two tiles of the same building class
	IsUniqueHouse()					// Only one per city
) {return;}	

item(FEAT_HOUSES, item_offices_01, 36, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						TTD_STR_TOWN_BUILDING_NAME_HOUSES_1;
		population: 				30;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				5;
		years_available: 			[1945,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class: 			2;
		}
	graphics {
		default: 					switch_offices_01_sprites;
		construction_check: 		switch_offices_01_con_check; 	
		cargo_production: 			func_produce(13,4);
		colour: 					rand_recolor_offices_01;
	}
}

// End offices_01

// Begin offices_02

// Building Sprites
spriteset (spr_offices_02, 							"src/gfx/offices/offices_02/building.png") 						{template_house_128(1,1)}
spriteset (spr_offices_02_snow, 						"src/gfx/offices/offices_02/building.png") 						{template_house_128(1,130)}

// Ground Tiles
spriteset (spr_offices_02_ground, 					"src/gfx/offices/offices_02/ground.png") 						{template_house_128(1,1)}
spriteset (spr_offices_02_ground_snow, 				"src/gfx/offices/offices_02/ground.png") 						{template_house_128(1,130)}

spritelayout sprlay_offices_02_norm {
	ground {
		sprite: spr_offices_02_ground(construction_state);
	}
	building {
		sprite: spr_offices_02(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_offices_02_snow {
	ground {
		sprite: spr_offices_02_ground_snow(construction_state);
	}
	building {
		sprite: spr_offices_02_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_offices_02_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_offices_02_snow;
	sprlay_offices_02_norm;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_offices_02)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_offices_02_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	CommercialCargoes() &&			// Commerical Cargo Requirement as per parameter
	ModernOfficePopCheck() &&		// Residential population is sufficient for another modern office building class
	ClusterBuildingClass()			// Must be within two tiles of the same building class
) {return;}	

item(FEAT_HOUSES, item_offices_02, 37, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						TTD_STR_TOWN_BUILDING_NAME_HOUSES_1;
		population: 				30;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				5;
		years_available: 			[1945,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class: 			2;
		}
	graphics {
		default: 					switch_offices_02_sprites;
		construction_check: 		switch_offices_02_con_check; 	
		cargo_production: 			func_produce(13,4);
		colour: 					rand_recolor_offices_02;
	}
}

// End offices_02

// Begin offices_03

// Building Sprites
spriteset (spr_offices_03, 							"src/gfx/offices/offices_03/building.png") 						{template_house_100(1,1)}
spriteset (spr_offices_03_snow, 						"src/gfx/offices/offices_03/building.png") 						{template_house_100(1,102)}

// Ground Tiles
spriteset (spr_offices_03_ground, 					"src/gfx/offices/offices_03/ground.png") 						{template_house_100(1,1)}
spriteset (spr_offices_03_ground_snow, 				"src/gfx/offices/offices_03/ground.png") 						{template_house_100(1,102)}

spritelayout sprlay_offices_03_norm {
	ground {
		sprite: spr_offices_03_ground(construction_state);
	}
	building {
		sprite: spr_offices_03(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_offices_03_snow {
	ground {
		sprite: spr_offices_03_ground_snow(construction_state);
	}
	building {
		sprite: spr_offices_03_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_offices_03_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_offices_03_snow;
	sprlay_offices_03_norm;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_offices_03)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_offices_03_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	CommercialCargoes() &&			// Commerical Cargo Requirement as per parameter
	ModernOfficePopCheck() &&		// Residential population is sufficient for another modern office building class
	ClusterBuildingClass()			// Must be within two tiles of the same building class
) {return;}	

item(FEAT_HOUSES, item_offices_03, 49, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						string(NAME_OFFICES_03);
		population: 				30;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				5;
		years_available: 			[1970,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE,TOWNZONE_INNER_SUBURB), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class: 			2;
		}
	graphics {
		default: 					switch_offices_03_sprites;
		construction_check: 		switch_offices_03_con_check; 	
		cargo_production: 			func_produce(13,4);
		colour: 					rand_recolor_offices_03;
	}
}

// End offices_03

// Begin offices_04

// Building Sprites
spriteset (spr_offices_04, 							"src/gfx/offices/offices_04/building.png") 						{template_house_100(1,1)}
spriteset (spr_offices_04_snow, 						"src/gfx/offices/offices_04/building.png") 						{template_house_100(1,102)}

// Ground Tiles
spriteset (spr_offices_04_ground, 					"src/gfx/offices/offices_04/ground.png") 						{template_house_100(1,1)}
spriteset (spr_offices_04_ground_snow, 				"src/gfx/offices/offices_04/ground.png") 						{template_house_100(1,102)}

spritelayout sprlay_offices_04_norm {
	ground {
		sprite: spr_offices_04_ground(construction_state);
	}
	building {
		sprite: spr_offices_04(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_offices_04_snow {
	ground {
		sprite: spr_offices_04_ground_snow(construction_state);
	}
	building {
		sprite: spr_offices_04_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_offices_04_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_offices_04_snow;
	sprlay_offices_04_norm;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_offices_04)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_offices_04_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	CommercialCargoes() &&			// Commerical Cargo Requirement as per parameter
	ModernOfficePopCheck() &&		// Residential population is sufficient for another modern office building class
	ClusterBuildingClass()			// Must be within two tiles of the same building class
) {return;}	

item(FEAT_HOUSES, item_offices_04, 58, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						string(NAME_OFFICES_04);
		population: 				120;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				5;
		years_available: 			[1945,1979];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE,TOWNZONE_INNER_SUBURB), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class: 			2;
		}
	graphics {
		default: 					switch_offices_04_sprites;
		construction_check: 		switch_offices_04_con_check; 	
		cargo_production: 			func_produce(13,4);
		colour: 					rand_recolor_offices_04;
	}
}

// End offices_04

// Begin offices_05

// Building Sprites
spriteset (spr_offices_05, 							"src/gfx/offices/offices_05/building.png") 						{template_house_128(1,1)}
spriteset (spr_offices_05_snow, 						"src/gfx/offices/offices_05/building.png") 						{template_house_128(1,130)}

// Ground Tiles
spriteset (spr_offices_05_ground, 					"src/gfx/offices/offices_05/ground.png") 						{template_house_128(1,1)}
spriteset (spr_offices_05_ground_snow, 				"src/gfx/offices/offices_05/ground.png") 						{template_house_128(1,130)}

spritelayout sprlay_offices_05_norm {
	ground {
		sprite: spr_offices_05_ground(3);
	}
	building {
		sprite: spr_offices_05(3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_offices_05_snow {
	ground {
		sprite: spr_offices_05_ground_snow(3);
	}
	building {
		sprite: spr_offices_05_snow(3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_offices_05_sprites,terrain_type) {
	TILETYPE_SNOW: sprlay_offices_05_snow;
	sprlay_offices_05_norm;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_offices_05)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_offices_05_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	CommercialCargoes() &&			// Commerical Cargo Requirement as per parameter
	ModernOfficePopCheck() &&		// Residential population is sufficient for another modern office building class
	ClusterBuildingClass()			// Must be within two tiles of the same building class
) {return;}	

item(FEAT_HOUSES, item_offices_05, 59, HOUSE_SIZE_1X1){
	property {
		substitute: 				27;
		name: 						string(NAME_OFFICES_05);
		population: 				120;
		accepted_cargos: 			[[PASS, 4],[MAIL, 2],[GOOD, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				5;
		years_available: 			[1950,1989];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class: 			2;
		}
	graphics {
		default: 					switch_offices_05_sprites;
		construction_check: 		switch_offices_05_con_check; 	
		cargo_production: 			func_produce(13,4);
		colour: 					rand_recolor_offices_05;
	}
}

// End offices_05

// Begin skyscraper_01

// Building Sprites
spriteset (spr_build_skyscraper_01_north, 							"src/gfx/skyscrapers/skyscraper_01/building.png") 						{template_house_250(261,1)}
spriteset (spr_build_skyscraper_01_east, 							"src/gfx/skyscrapers/skyscraper_01/building.png") 						{template_house_250(1,1)}

spriteset (spr_build_skyscraper_01_north_snow, 						"src/gfx/skyscrapers/skyscraper_01/building.png") 						{template_house_250(261,252)}
spriteset (spr_build_skyscraper_01_east_snow, 						"src/gfx/skyscrapers/skyscraper_01/building.png") 						{template_house_250(1,252)}
// Ground Sprites
spriteset (spr_ground_skyscraper_01_north, 							"src/gfx/skyscrapers/skyscraper_01/ground.png") 						{template_house_250(261,1)}
spriteset (spr_ground_skyscraper_01_east, 							"src/gfx/skyscrapers/skyscraper_01/ground.png") 						{template_house_250(1,1)}

spriteset (spr_ground_skyscraper_01_north_snow, 					"src/gfx/skyscrapers/skyscraper_01/ground.png") 						{template_house_250(261,252)}
spriteset (spr_ground_skyscraper_01_east_snow, 						"src/gfx/skyscrapers/skyscraper_01/ground.png") 						{template_house_250(1,252)}

// Normal Sprites
spritelayout sprlay_skyscraper_01_north {
	ground {
		sprite: spr_ground_skyscraper_01_north(construction_state);
	}
	building {
		sprite: spr_build_skyscraper_01_north(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_skyscraper_01_east {
	ground {
		sprite: spr_ground_skyscraper_01_east(construction_state);
	}
	building {
		sprite: spr_build_skyscraper_01_east(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_skyscraper_01_snow_north {
	ground {
		sprite: spr_ground_skyscraper_01_north_snow(construction_state);
	}
	building {
		sprite: spr_build_skyscraper_01_north_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_skyscraper_01_snow_east {
	ground {
		sprite: spr_ground_skyscraper_01_east_snow(construction_state);
	}
	building {
		sprite: spr_build_skyscraper_01_east_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_skyscraper_01_north,terrain_type) {
	TILETYPE_SNOW: sprlay_skyscraper_01_snow_north;
	sprlay_skyscraper_01_north;
}
switch(FEAT_HOUSES, SELF, switch_skyscraper_01_east,terrain_type) {
	TILETYPE_SNOW: sprlay_skyscraper_01_snow_east;
	sprlay_skyscraper_01_east;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_skyscraper_01)
	{
		1: PALETTE_CC_RED;
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_skyscraper_01_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	IsCity() && 					// Can only appear in cities
	IsUniqueHouse() &&				// Only one in city
	PopOver70k() &&					// Population of city check
	ModernOfficePopCheck() &&		// Residential population is sufficient for another modern office building class
	ClusterBuildingClass() &&		// Must be within two tiles of the same building class
	IfFirstSkyscraper() 			// If first skyscraper, it must build beside a Class 2
) {return;}		
 

item(FEAT_HOUSES, item_skyscraper_01, 76, HOUSE_SIZE_1X2){
	property {
		substitute: 				7; 													
		name: 						string(NAME_SKYSCRAPER_01);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED,HOUSE_FLAG_PROTECTED);
		population: 				255;
		accepted_cargos: 			[[PASS, 8],[MAIL, 4],[GOOD, 4]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[2006,0xFFFF];
		minimum_lifetime: 			20;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class:				5;	
		}
	graphics {
		graphics_north: 			switch_skyscraper_01_north;
		graphics_east: 				switch_skyscraper_01_east;
		construction_check:			switch_skyscraper_01_con_check;
		cargo_production: 			func_produce(24,10);
		colour: 					rand_recolor_skyscraper_01;
	}
}

// End skyscraper_01

// Begin skyscraper_02

// Building Sprites
spriteset (spr_build_skyscraper_02, 							"src/gfx/skyscrapers/skyscraper_02/building.png") 							{template_house_250(1,1)}
spriteset (spr_build_skyscraper_02_snow, 						"src/gfx/skyscrapers/skyscraper_02/building.png") 						{template_house_250(1,252)}

// Ground Sprites
spriteset (spr_ground_skyscraper_02, 							"src/gfx/skyscrapers/skyscraper_02/ground.png") 						{template_house_250(1,1)}
spriteset (spr_ground_skyscraper_02_snow, 						"src/gfx/skyscrapers/skyscraper_02/ground.png") 						{template_house_250(1,252)}

// Normal Sprites
spritelayout sprlay_skyscraper_02 {
	ground {
		sprite: spr_ground_skyscraper_02(construction_state);
	}
	building {
		sprite: spr_build_skyscraper_02(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_skyscraper_02_snow {
	ground {
		sprite: spr_ground_skyscraper_02_snow(construction_state);
	}
	building {
		sprite: spr_build_skyscraper_02_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_skyscraper_02,terrain_type) {
	TILETYPE_SNOW: sprlay_skyscraper_02_snow;
	sprlay_skyscraper_02;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_skyscraper_02)
	{
		1: PALETTE_CC_RED;			
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;			
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_skyscraper_02_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	IsCity() && 					// Can only appear in cities
	IsUniqueHouse() &&				// Only one in city
	PopOver50k() &&					// Population of city check
	ModernOfficePopCheck() &&		// Residential population is sufficient for another modern office building class
	ClusterBuildingClass() &&		// Must be within two tiles of the same building class
	IfFirstSkyscraper() 			// If first skyscraper, it must build beside a Class 2
) {return;}	

item(FEAT_HOUSES, item_skyscraper_02, 78, HOUSE_SIZE_1X1){
	property {
		substitute: 				4; 													
		name: 						string(NAME_SKYSCRAPER_02);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED,HOUSE_FLAG_PROTECTED);
		population: 				220;
		accepted_cargos: 			[[PASS, 8],[MAIL, 8],[GOOD, 8]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[2000,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class:				5;	
		}
	graphics {
		default: 					switch_skyscraper_02;
		construction_check:			switch_skyscraper_02_con_check;
		cargo_production: 			func_produce(24,10);
		colour: 					rand_recolor_skyscraper_02; 						// No recolouring
	}
}

// End skyscraper_02

// Begin skyscraper_03

// Building Sprites
spriteset (spr_build_skyscraper_03, 							"src/gfx/skyscrapers/skyscraper_03/building.png") 						{template_house_250_wide(1,1)}
spriteset (spr_build_skyscraper_03_snow, 						"src/gfx/skyscrapers/skyscraper_03/building.png") 						{template_house_250_wide(1,252)}

// Ground Sprites
spriteset (spr_ground_skyscraper_03, 							"src/gfx/skyscrapers/skyscraper_03/ground.png") 						{template_house_80(1,1)}
spriteset (spr_ground_skyscraper_03_snow, 						"src/gfx/skyscrapers/skyscraper_03/ground.png") 						{template_house_80(1,82)}

// Normal Sprites
spritelayout sprlay_skyscraper_03 {
	ground {
		sprite: spr_ground_skyscraper_03(construction_state);
	}
	building {
		sprite: spr_build_skyscraper_03(construction_state);
		//xoffset: -1;
		//yoffset: -2;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_skyscraper_03_snow {
	ground {
		sprite: spr_ground_skyscraper_03_snow(construction_state);
	}
	building {
		sprite: spr_build_skyscraper_03_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_skyscraper_03,terrain_type) {
	TILETYPE_SNOW: sprlay_skyscraper_03_snow;
	sprlay_skyscraper_03;
}

// Recolouring
/*
random_switch (FEAT_HOUSES, SELF, rand_recolor_skyscraper_03)
	{
		1: PALETTE_CC_RED;			
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;			
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}
*/

// Construction Check
switch (FEAT_HOUSES, SELF, switch_skyscraper_03_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	IsCity() && 					// Can only appear in cities
	IsUniqueHouse() &&				// Only one in city
	PopOver70k() &&					// Population of city check
	ModernOfficePopCheck() &&		// Residential population is sufficient for another modern office building class
	ClusterBuildingClass() &&		// Must be within two tiles of the same building class
	IfFirstSkyscraper()				// If first skyscraper, it must build beside a Class 2
) {return;}	

item(FEAT_HOUSES, item_skyscraper_03, 79, HOUSE_SIZE_1X1){
	property {
		substitute: 				4; 													
		name: 						string(NAME_SKYSCRAPER_03);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED,HOUSE_FLAG_PROTECTED);
		population: 				220;
		accepted_cargos: 			[[PASS, 8],[MAIL, 8],[GOOD, 8]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[2000,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class:				5;	
		}
	graphics {
		default: 					switch_skyscraper_03;
		construction_check:			switch_skyscraper_03_con_check;
		cargo_production: 			func_produce(24,10);
		//colour: 					rand_recolor_skyscraper_03; 
	}
}

// End skyscraper_03

// Begin skyscraper_04

// Building Sprites
spriteset (spr_build_skyscraper_04, 			"src/gfx/skyscrapers/skyscraper_04/building.png") 				{template_house_200_wide(1,1)}
spriteset (spr_build_skyscraper_04_snow, 		"src/gfx/skyscrapers/skyscraper_04/building.png") 				{template_house_200_wide(1,202)}

// Ground Sprites
spriteset (spr_ground_skyscraper_04, 			"src/gfx/skyscrapers/skyscraper_04/ground.png") 				{template_house_80(1,1)}
spriteset (spr_ground_skyscraper_04_snow, 		"src/gfx/skyscrapers/skyscraper_04/ground.png") 				{template_house_80(1,82)}

// Normal Sprites
spritelayout sprlay_skyscraper_04 {
	ground {
		sprite: spr_ground_skyscraper_04(construction_state);
	}
	building {
		sprite: spr_build_skyscraper_04(construction_state);
		xoffset: 3;
		yoffset: 0;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_skyscraper_04_snow {
	ground {
		sprite: spr_ground_skyscraper_04_snow(construction_state);
	}
	building {
		sprite: spr_build_skyscraper_04_snow(construction_state);
		xoffset: 3;
		yoffset: 0;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_skyscraper_04,terrain_type) {
	TILETYPE_SNOW: sprlay_skyscraper_04_snow;
	sprlay_skyscraper_04;
}

// Recolouring
/*
random_switch (FEAT_HOUSES, SELF, rand_recolor_skyscraper_04)
	{
		1: PALETTE_CC_RED;			
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;			
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}
*/

// Construction Check
switch (FEAT_HOUSES, SELF, switch_skyscraper_04_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	IsCity() && 					// Can only appear in cities
	IsUniqueHouse() &&				// Only one in city
	PopOver50k() &&					// Population of city check
	ModernOfficePopCheck() &&		// Residential population is sufficient for another modern office building class
	ClusterBuildingClass() &&		// Must be within two tiles of the same building class
	IfFirstSkyscraper() 			// If first skyscraper, it must build beside a Class 2
) {return;}	

item(FEAT_HOUSES, item_skyscraper_04, 80, HOUSE_SIZE_1X1){
	property {
		substitute: 				4; 													
		name: 						string(NAME_SKYSCRAPER_04);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED,HOUSE_FLAG_PROTECTED);
		population: 				220;
		accepted_cargos: 			[[PASS, 8],[MAIL, 8],[GOOD, 8]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[1990,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class:				5;	
		}
	graphics {
		default: 					switch_skyscraper_04;
		construction_check:			switch_skyscraper_04_con_check;
		cargo_production: 			func_produce(24,10);
		//colour: 					rand_recolor_skyscraper_04; 
	}
}

// End skyscraper_04

// Begin skyscraper_05

// Building Sprites
spriteset (spr_build_skyscraper_05, 			"src/gfx/skyscrapers/skyscraper_05/building.png") 				{template_house_200_wide(1,1)}
spriteset (spr_build_skyscraper_05_snow, 		"src/gfx/skyscrapers/skyscraper_05/building.png") 				{template_house_200_wide(1,202)}

// Ground Sprites
spriteset (spr_ground_skyscraper_05, 			"src/gfx/skyscrapers/skyscraper_05/ground.png") 				{template_house_80(1,1)}
spriteset (spr_ground_skyscraper_05_snow, 		"src/gfx/skyscrapers/skyscraper_05/ground.png") 				{template_house_80(1,82)}

// Normal Sprites
spritelayout sprlay_skyscraper_05 {
	ground {
		sprite: spr_ground_skyscraper_05(construction_state);
	}
	building {
		sprite: spr_build_skyscraper_05(construction_state);
		xoffset:  0;
		yoffset:  3;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_skyscraper_05_snow {
	ground {
		sprite: spr_ground_skyscraper_05_snow(construction_state);
	}
	building {
		sprite: spr_build_skyscraper_05_snow(construction_state);
		xoffset:  0;
		yoffset:  3;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_skyscraper_05,terrain_type) {
	TILETYPE_SNOW: sprlay_skyscraper_05_snow;
	sprlay_skyscraper_05;
}

// Recolouring
/*
random_switch (FEAT_HOUSES, SELF, rand_recolor_skyscraper_05)
	{
		1: PALETTE_CC_RED;			
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;			
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}
*/

// Construction Check
switch (FEAT_HOUSES, SELF, switch_skyscraper_05_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	IsCity() && 					// Can only appear in cities
	IsUniqueHouse() &&				// Only one in city
	PopOver30k() &&					// Population of city check
	ModernOfficePopCheck() &&		// Residential population is sufficient for another modern office building class
	ClusterBuildingClass() &&		// Must be within two tiles of the same building class
	IfFirstSkyscraper() 			// If first skyscraper, it must build beside a Class 2
) {return;}	

item(FEAT_HOUSES, item_skyscraper_05, 81, HOUSE_SIZE_1X1){
	property {
		substitute: 				4; 													
		name: 						string(NAME_SKYSCRAPER_05);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED,HOUSE_FLAG_PROTECTED);
		population: 				220;
		accepted_cargos: 			[[PASS, 8],[MAIL, 8],[GOOD, 8]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[1990,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class:				5;	
		}
	graphics {
		default: 					switch_skyscraper_05;
		construction_check:			switch_skyscraper_05_con_check;
		cargo_production: 			func_produce(24,10);
		//colour: 					rand_recolor_skyscraper_05; 
	}
}

// End skyscraper_05

// Begin skyscraper_06

// Building Sprites
spriteset (spr_build_skyscraper_06, 			"src/gfx/skyscrapers/skyscraper_06/building.png") 				{template_house_200_wide(1,1)}
spriteset (spr_build_skyscraper_06_snow, 		"src/gfx/skyscrapers/skyscraper_06/building.png") 				{template_house_200_wide(1,202)}

// Ground Sprites
spriteset (spr_ground_skyscraper_06, 			"src/gfx/skyscrapers/skyscraper_06/ground.png") 				{template_house_80(1,1)}
spriteset (spr_ground_skyscraper_06_snow, 		"src/gfx/skyscrapers/skyscraper_06/ground.png") 				{template_house_80(1,82)}

// Normal Sprites
spritelayout sprlay_skyscraper_06 {
	ground {
		sprite: spr_ground_skyscraper_06(construction_state);
	}
	building {
		sprite: spr_build_skyscraper_06(construction_state);
		xoffset:  0;
		yoffset:  2;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_skyscraper_06_snow {
	ground {
		sprite: spr_ground_skyscraper_06_snow(construction_state);
	}
	building {
		sprite: spr_build_skyscraper_06_snow(construction_state);
		xoffset:  0;
		yoffset:  2;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_skyscraper_06,terrain_type) {
	TILETYPE_SNOW: sprlay_skyscraper_06_snow;
	sprlay_skyscraper_06;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_skyscraper_06)
	{
		1: PALETTE_CC_RED;			
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;			
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_skyscraper_06_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	IsCity() && 					// Can only appear in cities
	IsUniqueHouse() &&				// Only one in city
	PopOver30k() &&					// Population of city check
	ModernOfficePopCheck() &&		// Residential population is sufficient for another modern office building class
	ClusterBuildingClass() &&		// Must be within two tiles of the same building class
	IfFirstSkyscraper() 			// If first skyscraper, it must build beside a Class 2
) {return;}	

item(FEAT_HOUSES, item_skyscraper_06, 82, HOUSE_SIZE_1X1){
	property {
		substitute: 				4; 													
		name: 						string(NAME_SKYSCRAPER_06);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED,HOUSE_FLAG_PROTECTED);
		population: 				200;
		accepted_cargos: 			[[PASS, 8],[MAIL, 8],[GOOD, 8]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[1960,0xFFFF];											// JPS=1989
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(
										TOWNZONE_CENTRE), 
									bitmask(
										CLIMATE_TEMPERATE, 
										CLIMATE_ARCTIC, ABOVE_SNOWLINE
									)];
		building_class:				5;	
		}
	graphics {
		default: 					switch_skyscraper_06;
		construction_check:			switch_skyscraper_06_con_check;
		cargo_production: 			func_produce(24,10);
		colour: 					rand_recolor_skyscraper_06; 
	}
}

// End skyscraper_06

// Begin skyscraper_07

// Building Sprites
spriteset (spr_build_skyscraper_07, 			"src/gfx/skyscrapers/skyscraper_07/building.png") 				{template_house_200_wide(1,1)}
spriteset (spr_build_skyscraper_07_snow, 		"src/gfx/skyscrapers/skyscraper_07/building.png") 				{template_house_200_wide(1,202)}

// Ground Sprites
spriteset (spr_ground_skyscraper_07, 			"src/gfx/skyscrapers/skyscraper_07/ground.png") 				{template_house_80(1,1)}
spriteset (spr_ground_skyscraper_07_snow, 		"src/gfx/skyscrapers/skyscraper_07/ground.png") 				{template_house_80(1,82)}

// Normal Sprites
spritelayout sprlay_skyscraper_07 {
	ground {
		sprite: spr_ground_skyscraper_07(construction_state);
	}
	building {
		sprite: spr_build_skyscraper_07(construction_state);
		xoffset:  2;
		yoffset:  0;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_skyscraper_07_snow {
	ground {
		sprite: spr_ground_skyscraper_07_snow(construction_state);
	}
	building {
		sprite: spr_build_skyscraper_07_snow(construction_state);
		xoffset:  2;
		yoffset:  0;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_skyscraper_07,terrain_type) {
	TILETYPE_SNOW: sprlay_skyscraper_07_snow;
	sprlay_skyscraper_07;
}

// Recolouring

random_switch (FEAT_HOUSES, SELF, rand_recolor_skyscraper_07)
	{
		1: PALETTE_CC_RED;			
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;			
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}


// Construction Check
switch (FEAT_HOUSES, SELF, switch_skyscraper_07_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	IsCity() && 					// Can only appear in cities
	IsUniqueHouse() &&				// Only one in city
	PopOver50k() &&					// Population of city check
	ModernOfficePopCheck() &&		// Residential population is sufficient for another modern office building class
	ClusterBuildingClass() &&		// Must be within two tiles of the same building class
	IfFirstSkyscraper() 			// If first skyscraper, it must build beside a Class 2
) {return;}	

item(FEAT_HOUSES, item_skyscraper_07, 83, HOUSE_SIZE_1X1){
	property {
		substitute: 				4; 													
		name: 						string(NAME_SKYSCRAPER_07);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED,HOUSE_FLAG_PROTECTED);
		population: 				220;
		accepted_cargos: 			[[PASS, 8],[MAIL, 8],[GOOD, 8]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[2000,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class:				5;	
		}
	graphics {
		default: 					switch_skyscraper_07;
		construction_check:			switch_skyscraper_07_con_check;
		cargo_production: 			func_produce(24,10);
		colour: 					rand_recolor_skyscraper_07; 
	}
}

// End skyscraper_07

// Begin skyscraper_08

// Building Sprites
spriteset (spr_build_skyscraper_08, 			"src/gfx/skyscrapers/skyscraper_08/building.png") 				{template_house_200_wide(1,1)}
spriteset (spr_build_skyscraper_08_snow, 		"src/gfx/skyscrapers/skyscraper_08/building.png") 				{template_house_200_wide(1,202)}

// Ground Sprites
spriteset (spr_ground_skyscraper_08, 			"src/gfx/skyscrapers/skyscraper_08/ground.png") 				{template_house_80(1,1)}
spriteset (spr_ground_skyscraper_08_snow, 		"src/gfx/skyscrapers/skyscraper_08/ground.png") 				{template_house_80(1,82)}

// Normal Sprites
spritelayout sprlay_skyscraper_08 {
	ground {
		sprite: spr_ground_skyscraper_08(construction_state);
	}
	building {
		sprite: spr_build_skyscraper_08(construction_state);
		//xoffset:  2;
		//yoffset:  0;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_skyscraper_08_snow {
	ground {
		sprite: spr_ground_skyscraper_08_snow(construction_state);
	}
	building {
		sprite: spr_build_skyscraper_08_snow(construction_state);
		//xoffset:  2;
		//yoffset:  0;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_skyscraper_08,terrain_type) {
	TILETYPE_SNOW: sprlay_skyscraper_08_snow;
	sprlay_skyscraper_08;
}

// Recolouring

random_switch (FEAT_HOUSES, SELF, rand_recolor_skyscraper_08)
	{
		1: PALETTE_CC_RED;			
		2: PALETTE_CC_LIGHT_BLUE;
		1: PALETTE_CC_PINK;			
		1: PALETTE_CC_DARK_BLUE;
		1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		4: PALETTE_CC_WHITE;
	}


// Construction Check
switch (FEAT_HOUSES, SELF, switch_skyscraper_08_con_check, 
	FuncServicePASS() &&			// Must have passenger service
	IsCity() && 					// Can only appear in cities
	IsUniqueHouse() &&				// Only one in city
	PopOver10k() &&					// Population of city check
	ModernOfficePopCheck() &&		// Residential population is sufficient for another modern office building class
	ClusterBuildingClass() &&		// Must be within two tiles of the same building class
	IfFirstSkyscraper() 			// If first skyscraper, it must build beside a Class 2
) {return;}	

item(FEAT_HOUSES, item_skyscraper_08, 84, HOUSE_SIZE_1X1){
	property {
		substitute: 				4; 													
		name: 						string(NAME_SKYSCRAPER_08);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED,HOUSE_FLAG_PROTECTED);
		population: 				200;
		accepted_cargos: 			[[PASS, 8],[MAIL, 8],[GOOD, 8]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				10;
		years_available: 			[1960,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_CENTRE), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class:				5;	
		}
	graphics {
		default: 					switch_skyscraper_08;
		construction_check:			switch_skyscraper_08_con_check;
		cargo_production: 			func_produce(16,6);
		colour: 					rand_recolor_skyscraper_08; 
	}
}

// End skyscraper_08

// Begin temple_01

// Sprites
spriteset (spr_temple_01, 							"src/gfx/landmarks/temple_01/temple.png") 						{template_house_128(1,1)}
spriteset (spr_temple_01_snow, 						"src/gfx/landmarks/temple_01/temple.png") 						{template_house_128(1,130)}

// Normal Sprites
spritelayout sprlay_temple_01_north {
	ground {
		sprite: spr_temple_01(3);
	}
	building {
		sprite: spr_temple_01(2);
		hide_sprite: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_temple_01_east {
	ground {
		sprite: spr_temple_01(3);
	}
	building {
		sprite: spr_temple_01(2);
		xoffset: 1;
		yoffset: 3;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_temple_01_west {
	ground {
		sprite: spr_temple_01(3);
	}
	building {
		sprite: spr_temple_01(0);
		xoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_temple_01_south {
	ground {
		sprite: spr_temple_01(3);
	}
	building {
		sprite: spr_temple_01(1);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_temple_01_snow_north {
	ground {
		sprite: spr_temple_01_snow(3);
	}
	building {
		sprite: spr_temple_01_snow(2);
		hide_sprite: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_temple_01_snow_east {
	ground {
		sprite: spr_temple_01_snow(3);
	}
	building {
		sprite: spr_temple_01_snow(2);
		xoffset: 1;
		yoffset: 3;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_temple_01_snow_west {
	ground {
		sprite: spr_temple_01_snow(3);
	}
	building {
		sprite: spr_temple_01_snow(0);
		xoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_temple_01_snow_south {
	ground {
		sprite: spr_temple_01_snow(3);
	}
	building {
		sprite: spr_temple_01_snow(1);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_temple_01_north,terrain_type) {
	TILETYPE_SNOW: sprlay_temple_01_snow_north;
	sprlay_temple_01_north;
}
switch(FEAT_HOUSES, SELF, switch_temple_01_east,terrain_type) {
	TILETYPE_SNOW: sprlay_temple_01_snow_east;
	sprlay_temple_01_east;
}
switch(FEAT_HOUSES, SELF, switch_temple_01_west,terrain_type) {
	TILETYPE_SNOW: sprlay_temple_01_snow_west;
	sprlay_temple_01_west;
}
switch(FEAT_HOUSES, SELF, switch_temple_01_south,terrain_type) {
	TILETYPE_SNOW: sprlay_temple_01_snow_south;
	sprlay_temple_01_south;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_temple_01)
	{
		//1: PALETTE_CC_RED;			Nah
		2: PALETTE_CC_LIGHT_BLUE;
		//1: PALETTE_CC_PINK;			Nah
		1: PALETTE_CC_DARK_BLUE;
		//1: PALETTE_CC_GREEN;			Nah
		2: PALETTE_CC_DARK_GREEN;
		//3: PALETTE_CC_CREAM;
		//1: PALETTE_CC_MAUVE;			Nah
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_temple_01_con_check, 
	IsCity() && 				// Can only appear in Cities
	IsUniqueHouse() && 			// Only one Temple per city
	OnGenerationOnly() && 		// Will only spawn when Map is generated - not realistic being built in modern times!
	HasRoadAdjacentSE2x2() &&	// Requires a road to the SE, due to sticking out entrance
	RandomBitsFour()) {return;}	// Think this makes the probability abouty a quarter

item(FEAT_HOUSES, item_temple_01, 66, HOUSE_SIZE_2X2){
	property {
		substitute: 				20; //Stadium since 2x2
		name: 						string(NAME_TEMPLE_01);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED, HOUSE_FLAG_CHURCH, HOUSE_FLAG_PROTECTED);
		population: 				100;
		accepted_cargos: 			[[PASS, 8],[MAIL, 1],[FOOD, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				5;
		years_available: 			[1700,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[ALL_TOWNZONES, bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class:				6;	
		}
	graphics {
		graphics_north: 			switch_temple_01_north;
		graphics_east: 				switch_temple_01_east;
		graphics_west: 				switch_temple_01_west;
		graphics_south: 			switch_temple_01_south;
		construction_check:			switch_temple_01_con_check;	
		cargo_production: 			func_produce(10,2);
		colour: 					rand_recolor_temple_01;
	}
}

// End temple_01

// Begin temple_02

// Sprites
spriteset (spr_temple_02, 							"src/gfx/landmarks/temple_02/temple_02.png") 						{template_house_128(1,1)}
spriteset (spr_temple_02_snow, 						"src/gfx/landmarks/temple_02/temple_02.png") 						{template_house_128(1,130)}

// Normal Sprites
spritelayout sprlay_temple_02_north {
	ground {
		sprite: spr_temple_02(3);
	}
	building {
		sprite: spr_temple_02(2);
		hide_sprite: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_temple_02_east {
	ground {
		sprite: spr_temple_02(3);
	}
	building {
		sprite: spr_temple_02(2);
		xoffset: 1;
		yoffset: 3;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_temple_02_west {
	ground {
		sprite: spr_temple_02(3);
	}
	building {
		sprite: spr_temple_02(0);
		xoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_temple_02_south {
	ground {
		sprite: spr_temple_02(3);
	}
	building {
		sprite: spr_temple_02(1);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_temple_02_snow_north {
	ground {
		sprite: spr_temple_02_snow(3);
	}
	building {
		sprite: spr_temple_02_snow(2);
		hide_sprite: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_temple_02_snow_east {
	ground {
		sprite: spr_temple_02_snow(3);
	}
	building {
		sprite: spr_temple_02_snow(2);
		xoffset: 1;
		yoffset: 3;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_temple_02_snow_west {
	ground {
		sprite: spr_temple_02_snow(3);
	}
	building {
		sprite: spr_temple_02_snow(0);
		xoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_temple_02_snow_south {
	ground {
		sprite: spr_temple_02_snow(3);
	}
	building {
		sprite: spr_temple_02_snow(1);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_temple_02_north,terrain_type) {
	TILETYPE_SNOW: sprlay_temple_02_snow_north;
	sprlay_temple_02_north;
}
switch(FEAT_HOUSES, SELF, switch_temple_02_east,terrain_type) {
	TILETYPE_SNOW: sprlay_temple_02_snow_east;
	sprlay_temple_02_east;
}
switch(FEAT_HOUSES, SELF, switch_temple_02_west,terrain_type) {
	TILETYPE_SNOW: sprlay_temple_02_snow_west;
	sprlay_temple_02_west;
}
switch(FEAT_HOUSES, SELF, switch_temple_02_south,terrain_type) {
	TILETYPE_SNOW: sprlay_temple_02_snow_south;
	sprlay_temple_02_south;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_temple_02)
	{
		//1: PALETTE_CC_RED;			Nah
		2: PALETTE_CC_LIGHT_BLUE;
		//1: PALETTE_CC_PINK;			Nah
		1: PALETTE_CC_DARK_BLUE;
		//1: PALETTE_CC_GREEN;			Nah
		2: PALETTE_CC_DARK_GREEN;
		//3: PALETTE_CC_CREAM;
		//1: PALETTE_CC_MAUVE;			Nah
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_temple_02_con_check, 
	IsCity() && 					// Can only appear in Cities
	IsUniqueHouse() && 				// Only one Temple per city
	OnGenerationOnly() && 			// Will only spawn when Map is generated - not realistic being built in modern times!
	HasRoadAdjacentSE2x2() &&		// Requires a road to the SE, due to sticking out entrance
	RandomBitsFour()				// Think this makes the probability abouty a quarter
	) {return;}

item(FEAT_HOUSES, item_temple_02, 09, HOUSE_SIZE_2X2){
	property {
		substitute: 				20; //Stadium since 2x2
		name: 						string(NAME_TEMPLE_02);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED, HOUSE_FLAG_CHURCH, HOUSE_FLAG_PROTECTED);
		population: 				100;
		accepted_cargos: 			[[PASS, 8],[MAIL, 1],[FOOD, 2]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				5;
		years_available: 			[1700,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[ALL_TOWNZONES, bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		building_class:				6;	
		}
	graphics {
		graphics_north: 			switch_temple_02_north;
		graphics_east: 				switch_temple_02_east;
		graphics_west: 				switch_temple_02_west;
		graphics_south: 			switch_temple_02_south;
		construction_check:			switch_temple_02_con_check;	
		cargo_production: 			func_produce(10,2);
		colour: 					rand_recolor_temple_02;
	}
}

// End temple_02

// Begin shiro_01

// Sprites
spriteset (spr_shiro_01, 							"src/gfx/landmarks/shiro_01/shiro.png") 						{template_house_200(1,1)}
spriteset (spr_shiro_01_snow, 						"src/gfx/landmarks/shiro_01/shiro.png") 						{template_house_200(1,202)}

// Normal Sprites
spritelayout sprlay_shiro_01_north {
	ground {
		sprite: spr_shiro_01(3);
	}
	building {
		sprite: spr_shiro_01(2);
		hide_sprite: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shiro_01_east {
	ground {
		sprite: spr_shiro_01(3);
	}
	building {
		sprite: spr_shiro_01(2);
		xoffset: -1;
		yoffset: 2;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shiro_01_west {
	ground {
		sprite: spr_shiro_01(3);
	}
	building {
		sprite: spr_shiro_01(0);
		xoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shiro_01_south {
	ground {
		sprite: spr_shiro_01(3);
	}
	building {
		sprite: spr_shiro_01(1);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_shiro_01_snow_north {
	ground {
		sprite: spr_shiro_01_snow(3);
	}
	building {
		sprite: spr_shiro_01_snow(2);
		hide_sprite: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shiro_01_snow_east {
	ground {
		sprite: spr_shiro_01_snow(3);
	}
	building {
		sprite: spr_shiro_01_snow(2);
		xoffset: -1;
		yoffset: 2;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shiro_01_snow_west {
	ground {
		sprite: spr_shiro_01_snow(3);
	}
	building {
		sprite: spr_shiro_01_snow(0);
		xoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_shiro_01_snow_south {
	ground {
		sprite: spr_shiro_01_snow(3);
	}
	building {
		sprite: spr_shiro_01_snow(1);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_shiro_01_north,terrain_type) {
	TILETYPE_SNOW: sprlay_shiro_01_snow_north;
	sprlay_shiro_01_north;
}
switch(FEAT_HOUSES, SELF, switch_shiro_01_east,terrain_type) {
	TILETYPE_SNOW: sprlay_shiro_01_snow_east;
	sprlay_shiro_01_east;
}
switch(FEAT_HOUSES, SELF, switch_shiro_01_west,terrain_type) {
	TILETYPE_SNOW: sprlay_shiro_01_snow_west;
	sprlay_shiro_01_west;
}
switch(FEAT_HOUSES, SELF, switch_shiro_01_south,terrain_type) {
	TILETYPE_SNOW: sprlay_shiro_01_snow_south;
	sprlay_shiro_01_south;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_shiro_01)
	{
		//1: PALETTE_CC_RED;			nah
		2: PALETTE_CC_LIGHT_BLUE;
		//1: PALETTE_CC_PINK;
		1: PALETTE_CC_DARK_BLUE;
		//1: PALETTE_CC_GREEN;
		2: PALETTE_CC_DARK_GREEN;
		3: PALETTE_CC_CREAM;
		1: PALETTE_CC_MAUVE;
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
		//4: PALETTE_CC_WHITE;			too much like snow
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_shiro_01_con_check, 
	IsCity() && 				// Can only appear in Cities
	IsUniqueHouse() && 			// Only one Shiro per city
	OnGenerationOnly() && 		// Will only spawn when Map is generated - not realistic being built in modern times!
	RandomBitsFour()			// Think this makes the probability abouty a quarter
	) {return;}	

item(FEAT_HOUSES, item_shiro_01, 70, HOUSE_SIZE_2X2){
	property {
		substitute: 				20; 								//Stadium since 2x2
		name: 						string(NAME_SHIRO_01);
		building_flags: 			bitmask(HOUSE_FLAG_PROTECTED);		// Cities should delete
		population: 				160;								// Same as JPS
		accepted_cargos: 			[[PASS, 8],[MAIL, 1],[FOOD, 2]];	// Same as JPS
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				1;									
		years_available: 			[1700,0xFFFF];
		minimum_lifetime: 			50;
		availability_mask: 			[	
										bitmask(TOWNZONE_OUTER_SUBURB,TOWNZONE_OUTSKIRT), 				// Same as JPS
									 	bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)
									];	
		}
	graphics {
		graphics_north: 			switch_shiro_01_north;
		graphics_east: 				switch_shiro_01_east;
		graphics_west: 				switch_shiro_01_west;
		graphics_south: 			switch_shiro_01_south;
		construction_check:			switch_shiro_01_con_check;
		cargo_production: 			func_produce(10,2);
		colour: 					rand_recolor_shiro_01;
	}
}

// End shiro_01

// Begin stadium_01

// Sprites
spriteset (spr_build_stadium_01, 						"src/gfx/landmarks/stadium_01/building.png") 					{template_house_100(1,1)}
spriteset (spr_build_stadium_01_snow, 					"src/gfx/landmarks/stadium_01/building.png") 					{template_house_100(1,102)}

spriteset (spr_ground_stadium_01, 						"src/gfx/landmarks/stadium_01/ground.png") 						{template_house_100(1,1)}
spriteset (spr_ground_stadium_01_snow, 					"src/gfx/landmarks/stadium_01/ground.png") 						{template_house_100(1,102)}

// Normal Sprites
spritelayout sprlay_stadium_01_north {
	ground {
		sprite: spr_ground_stadium_01(0);
	}
	building {
		sprite: spr_build_stadium_01(0);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_stadium_01_east {
	ground {
		sprite: spr_ground_stadium_01(2);
	}
	building {
		sprite: spr_build_stadium_01(2);
		//xoffset: 1;
		//yoffset: 3;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_stadium_01_west {
	ground {
		sprite: spr_ground_stadium_01(1);
	}
	building {
		sprite: spr_build_stadium_01(1);
		//xoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_stadium_01_south {
	ground {
		sprite: spr_ground_stadium_01(3);
	}
	building {
		sprite: spr_build_stadium_01(3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_stadium_01_snow_north {
	ground {
		sprite: spr_ground_stadium_01_snow(0);
	}
	building {
		sprite: spr_build_stadium_01_snow(0);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_stadium_01_snow_east {
	ground {
		sprite: spr_ground_stadium_01_snow(2);
	}
	building {
		sprite: spr_build_stadium_01_snow(2);
		//xoffset: 1;
		//yoffset: 3;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_stadium_01_snow_west {
	ground {
		sprite: spr_ground_stadium_01_snow(1);
	}
	building {
		sprite: spr_build_stadium_01_snow(1);
		//xoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_stadium_01_snow_south {
	ground {
		sprite: spr_ground_stadium_01_snow(3);
	}
	building {
		sprite: spr_build_stadium_01_snow(3);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_stadium_01_north,terrain_type) {
	TILETYPE_SNOW: sprlay_stadium_01_snow_north;
	sprlay_stadium_01_north;
}
switch(FEAT_HOUSES, SELF, switch_stadium_01_east,terrain_type) {
	TILETYPE_SNOW: sprlay_stadium_01_snow_east;
	sprlay_stadium_01_east;
}
switch(FEAT_HOUSES, SELF, switch_stadium_01_west,terrain_type) {
	TILETYPE_SNOW: sprlay_stadium_01_snow_west;
	sprlay_stadium_01_west;
}
switch(FEAT_HOUSES, SELF, switch_stadium_01_south,terrain_type) {
	TILETYPE_SNOW: sprlay_stadium_01_snow_south;
	sprlay_stadium_01_south;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_stadium_01)
	{
		//1: PALETTE_CC_RED;			Nah
		2: PALETTE_CC_LIGHT_BLUE;
		//1: PALETTE_CC_PINK;			Nah
		1: PALETTE_CC_DARK_BLUE;
		//1: PALETTE_CC_GREEN;			Nah
		2: PALETTE_CC_DARK_GREEN;
		//3: PALETTE_CC_CREAM;
		//1: PALETTE_CC_MAUVE;			Nah
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_stadium_01_con_check, 
	IsCity() && 				// Can only appear in Cities
	PopOver10k() &&				// Population criteria
	IsUniqueHouse()				// Only one per city
	) {return;}	

// Protection Check
switch (FEAT_HOUSES, SELF, switch_stadium_01_pro_check, 
	FuncServiceFOOD() ||		
	FuncServiceBEER()			
	) {return;}	

item(FEAT_HOUSES, item_stadium_01, 60, HOUSE_SIZE_2X2){
	property {
		substitute: 				20; //Stadium since 2x2
		name: 						string(NAME_STADIUM_01);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED);
		population: 				65;
		accepted_cargos: 			[[PASS, 8],[MAIL, 1],[FOOD, 8],[BEER, 8]];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				5;
		years_available: 			[1970,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_OUTER_SUBURB,TOWNZONE_OUTSKIRT), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		//building_class:			3;	
		}
	graphics {
		graphics_north: 			switch_stadium_01_north;
		graphics_east: 				switch_stadium_01_east;
		graphics_west: 				switch_stadium_01_west;
		graphics_south: 			switch_stadium_01_south;
		construction_check:			switch_stadium_01_con_check;
		protection:					switch_stadium_01_pro_check;	
		cargo_production: 			func_produce(10,2);
		colour: 					rand_recolor_stadium_01;
	}
}

// End stadium_01

// Begin hospital_01

// Sprites
spriteset (spr_build_hospital_01_north, 				"src/gfx/landmarks/hospital_01/building.png") 					{template_house_128(1,1)}
spriteset (spr_build_hospital_01_north_snow, 			"src/gfx/landmarks/hospital_01/building.png") 					{template_house_128(1,130)}

spriteset (spr_build_hospital_01_west, 					"src/gfx/landmarks/hospital_01/building.png") 					{template_house_128(261,1)}
spriteset (spr_build_hospital_01_west_snow, 			"src/gfx/landmarks/hospital_01/building.png") 					{template_house_128(261,130)}

spriteset (spr_build_hospital_01_east, 					"src/gfx/landmarks/hospital_01/building.png") 					{template_house_128(521,1)}
spriteset (spr_build_hospital_01_east_snow, 			"src/gfx/landmarks/hospital_01/building.png") 					{template_house_128(521,130)}

spriteset (spr_build_hospital_01_south, 				"src/gfx/landmarks/hospital_01/building.png") 					{template_house_128(781,1)}
spriteset (spr_build_hospital_01_south_snow, 			"src/gfx/landmarks/hospital_01/building.png") 					{template_house_128(781,130)}


spriteset (spr_ground_hospital_01_north, 				"src/gfx/landmarks/hospital_01/ground.png") 					{template_house_128(1,1)}
spriteset (spr_ground_hospital_01_north_snow, 			"src/gfx/landmarks/hospital_01/ground.png") 					{template_house_128(1,130)}

spriteset (spr_ground_hospital_01_west, 				"src/gfx/landmarks/hospital_01/ground.png") 					{template_house_128(261,1)}
spriteset (spr_ground_hospital_01_west_snow, 			"src/gfx/landmarks/hospital_01/ground.png") 					{template_house_128(261,130)}

spriteset (spr_ground_hospital_01_east, 				"src/gfx/landmarks/hospital_01/ground.png") 					{template_house_128(521,1)}
spriteset (spr_ground_hospital_01_east_snow, 			"src/gfx/landmarks/hospital_01/ground.png") 					{template_house_128(521,130)}

spriteset (spr_ground_hospital_01_south, 				"src/gfx/landmarks/hospital_01/ground.png") 					{template_house_128(781,1)}
spriteset (spr_ground_hospital_01_south_snow, 			"src/gfx/landmarks/hospital_01/ground.png") 					{template_house_128(781,130)}

// Normal Sprites
spritelayout sprlay_hospital_01_north {
	ground {
		sprite: spr_ground_hospital_01_north(construction_state);
	}
	building {
		sprite: spr_build_hospital_01_north(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_hospital_01_east {
	ground {
		sprite: spr_ground_hospital_01_east(construction_state);
	}
	building {
		sprite: spr_build_hospital_01_east(construction_state);
		//xoffset: 1;
		//yoffset: 3;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_hospital_01_west {
	ground {
		sprite: spr_ground_hospital_01_west(construction_state);
	}
	building {
		sprite: spr_build_hospital_01_west(construction_state);
		//xoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_hospital_01_south {
	ground {
		sprite: spr_ground_hospital_01_south(construction_state);
	}
	building {
		sprite: spr_build_hospital_01_south(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Snow Sprites
spritelayout sprlay_hospital_01_snow_north {
	ground {
		sprite: spr_ground_hospital_01_north_snow(construction_state);
	}
	building {
		sprite: spr_build_hospital_01_north_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_hospital_01_snow_east {
	ground {
		sprite: spr_ground_hospital_01_east_snow(construction_state);
	}
	building {
		sprite: spr_build_hospital_01_east_snow(construction_state);
		//xoffset: 1;
		//yoffset: 3;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_hospital_01_snow_west {
	ground {
		sprite: spr_ground_hospital_01_west_snow(construction_state);
	}
	building {
		sprite: spr_build_hospital_01_west_snow(construction_state);
		//xoffset: 1;
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

spritelayout sprlay_hospital_01_snow_south {
	ground {
		sprite: spr_ground_hospital_01_south_snow(construction_state);
	}
	building {
		sprite: spr_build_hospital_01_south_snow(construction_state);
		recolour_mode: RECOLOUR_REMAP; 
		palette: PALETTE_USE_DEFAULT;
	}
}

// Choose between Normal Sprites and Snow Sprites
switch(FEAT_HOUSES, SELF, switch_hospital_01_north,terrain_type) {
	TILETYPE_SNOW: sprlay_hospital_01_snow_north;
	sprlay_hospital_01_north;
}
switch(FEAT_HOUSES, SELF, switch_hospital_01_east,terrain_type) {
	TILETYPE_SNOW: sprlay_hospital_01_snow_east;
	sprlay_hospital_01_east;
}
switch(FEAT_HOUSES, SELF, switch_hospital_01_west,terrain_type) {
	TILETYPE_SNOW: sprlay_hospital_01_snow_west;
	sprlay_hospital_01_west;
}
switch(FEAT_HOUSES, SELF, switch_hospital_01_south,terrain_type) {
	TILETYPE_SNOW: sprlay_hospital_01_snow_south;
	sprlay_hospital_01_south;
}

// Recolouring
random_switch (FEAT_HOUSES, SELF, rand_recolor_hospital_01)
	{
		//1: PALETTE_CC_RED;			Nah
		2: PALETTE_CC_LIGHT_BLUE;
		//1: PALETTE_CC_PINK;			Nah
		1: PALETTE_CC_DARK_BLUE;
		//1: PALETTE_CC_GREEN;			Nah
		2: PALETTE_CC_DARK_GREEN;
		//3: PALETTE_CC_CREAM;
		//1: PALETTE_CC_MAUVE;			Nah
		4: PALETTE_CC_BROWN;
		4: PALETTE_CC_GREY;
	}

// Construction Check
switch (FEAT_HOUSES, SELF, switch_hospital_01_con_check, 
	IsCity() && 				// Can only appear in Cities
	IsUniqueHouse()	&&			// Only one per city
	PopOver10k()				// Required city population
	) {return;}	

// Protection Check
switch (FEAT_HOUSES, SELF, switch_hospital_01_pro_check, 
	FuncServicePASS() ||		
	FuncServiceRFPR()			
	) {return;}	

item(FEAT_HOUSES, item_hospital_01, 40, HOUSE_SIZE_2X2){
	property {
		substitute: 				20; //Stadium since 2x2
		name: 						string(NAME_HOSPITAL_01);
		building_flags: 			bitmask(HOUSE_FLAG_NOT_SLOPED);
		population: 				150;
		accepted_cargos: 			[
										[PASS, 8],
										[MAIL, 4],
										[GOOD, 4],
										[RFPR, 8]
									];
		local_authority_impact: 	80;
		removal_cost_multiplier: 	80;
		probability: 				5;
		years_available: 			[1970,0xFFFF];
		minimum_lifetime: 			5;
		availability_mask: 			[bitmask(TOWNZONE_OUTER_SUBURB,TOWNZONE_OUTSKIRT), bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, ABOVE_SNOWLINE)];
		//building_class:			3;	
		}
	graphics {
		graphics_north: 			switch_hospital_01_north;
		graphics_east: 				switch_hospital_01_east;
		graphics_west: 				switch_hospital_01_west;
		graphics_south: 			switch_hospital_01_south;
		construction_check:			switch_hospital_01_con_check;
		protection:					switch_hospital_01_pro_check;	
		cargo_production: 			func_produce(10,2);
		colour: 					rand_recolor_hospital_01;
	}
}

// End hospital_01
